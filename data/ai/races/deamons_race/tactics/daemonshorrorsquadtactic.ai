----------------------------------------
-- File: 'daemonshorrorsquadtactic.ai'
-- Edited by fuggles 27.05.2013
-- Edited by Thudmeizer	07.05.2016

class 'DaemonsHorrorSquadTactic' (DaemonsInfantryTactic)

DaemonsHorrorSquad  = {}

function DaemonsHorrorSquadTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Daemons Horror Squad Tactic")
end

function DaemonsHorrorSquadTactic:InitAbilities()

	-- Init ability ID's
	if (DaemonsHorrorSquad.voice_id == nil) then
		DaemonsHorrorSquad.voice_id = cpu_manager.stats:GetAbilityID( "daemons_dark_speech" )
	end

	if (DaemonsHorrorSquad.cloak_id == nil) then
		DaemonsHorrorSquad.cloak_id = cpu_manager.stats:GetAbilityID( "daemons_cloak_of_darkness" )
	end

	if (DaemonsHorrorSquad.run_id == nil) then
		DaemonsHorrorSquad.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function DaemonsHorrorSquadTactic:DoAbilities()

	if (self.squad_ai:CanDoAbility( DaemonsHorrorSquad.voice_id )) then
		Ability.DoAbilityArea( self.squad_ai, DaemonsHorrorSquad.voice_id, Ability.Filters.CloseSquadEnemy, 20, 5 )
		Ability.DoAbilityArea( self.squad_ai, DaemonsHorrorSquad.voice_id, Ability.Filters.CloseMonsterEnemy, 20, 5 )
	end

	if (self.squad_ai:CanDoAbility( DaemonsHorrorSquad.cloak_id )) then
		Ability.DoAbilityArea( self.squad_ai, DaemonsHorrorSquad.cloak_id, Ability.Filters.CloseEnemy, 30, 5 )
	end

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( DaemonsHorrorSquad.run_id )) then
			self.squad_ai:DoSpecialAbility( DaemonsHorrorSquad.run_id )
		end
	end

	-- Call basic DoAbilities methods
	DaemonsInfantryTactic.DoAbilities(self)
end

function DaemonsHorrorSquadTactic:Reinforce()

	if not self.squad_ai:IsReinforcing() then

		-- Always try for the actual leader first
		if (self.squad_ai:CanReinforce( false, 0 )) then
			self.squad_ai:DoReinforce( false, 0 )
			return
		end

		-- Try for different types of squad members
		local purpleIndex = 0
		local greenIndex = 1
		local redIndex = 2
		local yellowIndex = 3
	
		-- Get current leader count
		local numpurple = self.squad_ai:GetLeaderCount( purpleIndex )
		local numgreen = self.squad_ai:GetLeaderCount( greenIndex )
		local numred = self.squad_ai:GetLeaderCount( redIndex)
		local numyellow = self.squad_ai:GetLeaderCount( yellowIndex )

		-- Desired number of each leader type
		local desiredpurple = math.random( 0,2 )
		local desiredgreen = math.random( 0,2 )
		local desiredred = math.random( 0,2 )
		local desiredyellow = math.random( 0,2 )

		-- Desired order of reinforcing
		if (numpurple < desiredpurple) then
			if self.squad_ai:CanReinforce( true, purpleIndex ) then
				self.squad_ai:DoReinforce( true, purpleIndex )
			end
		elseif (numgreen < desiredgreen) then
			if self.squad_ai:CanReinforce( true, greenIndex ) then
				self.squad_ai:DoReinforce( true, greenIndex )
			end
		elseif (numred < desiredred) then
			if self.squad_ai:CanReinforce( true, redIndex ) then
				self.squad_ai:DoReinforce( true, redIndex )
			end
		elseif (numred < desiredyellow) then
			if self.squad_ai:CanReinforce( true, yellowIndex ) then
				self.squad_ai:DoReinforce( true, yellowIndex )
			end
		end
	end
end

