----------------------------------------
-- File: 'daemonsheraldslaaneshtactic.ai'
-- Edited by fuggles 27.05.2013
-- Edited by Thudmeizer	08.05.2016

class 'DaemonsHeraldSlaaneshTactic' (DaemonsInfantryTactic)

DaemonsHeraldSlaanesh = {}

function DaemonsHeraldSlaaneshTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Daemons Herald of Slaanesh Tactic")
	
	self.attachlist = {}
	self:AddAttachList()
end

function DaemonsHeraldSlaaneshTactic:AutoBuildAddOn( addonSlot )
	for e in self.squad_ai:GetEntities() do
		local buildChannelDaemonsHeraldSlaanesh = build_manager:GetBuildChannelFromID(e:GetID())
		if (buildChannelDaemonsHeraldSlaanesh ~= nil) then
			local addOnID = buildChannelDaemonsHeraldSlaanesh:GetItemIDAt(BuildChannelAI.PQ_AddOn, addonSlot)
			if (buildChannelDaemonsHeraldSlaanesh:IsBuilding() == 0 and buildChannelDaemonsHeraldSlaanesh:CanAddToQueue(BuildChannelAI.PQ_AddOn, addOnID) == BuildChannelAI.CANBUILD_Ok) then
				buildChannelDaemonsHeraldSlaanesh:BuildAddOn(addOnID)
				return
			end
		end
	end
	return
end

function DaemonsHeraldSlaaneshTactic:IsAttacker()

	-- Never attack if we have low health
	if (self.squad_ai:GetHealthPercentage() <= 0.3 ) then
		return false
	end
	return self:IsCommanderAttacker() 
end

function DaemonsHeraldSlaaneshTactic:IsDefender()
	return self:IsCommanderDefender()
end

function DaemonsHeraldSlaaneshTactic:AddAttachList()
	table.insert( self.attachlist, "daemon_squad_daemonettes_greater")
	table.insert( self.attachlist, "daemon_squad_fiends")
	table.insert( self.attachlist, "daemon_squad_daemonettes")
end

function DaemonsHeraldSlaaneshTactic:InitAbilities()

	-- Init ability ID's
	if (DaemonsHeraldSlaanesh.allure_id == nil) then
		DaemonsHeraldSlaanesh.allure_id = cpu_manager.stats:GetAbilityID( "daemons_slaanesh_allure" )
	end

	if (DaemonsHeraldSlaanesh.run_id == nil) then
		DaemonsHeraldSlaanesh.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function DaemonsHeraldSlaaneshTactic:DoAbilities()
		
	Ability.DoAbilityArea( self.squad_ai, DaemonsHeraldSlaanesh.allure_id, Ability.Filters.CloseEnemy, 10, 1 )

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( DaemonsHeraldSlaanesh.run_id )) then
			self.squad_ai:DoSpecialAbility( DaemonsHeraldSlaanesh.run_id )
		end
	end

	InfantryTactic.DoAbilities(self)
end

function DaemonsHeraldSlaaneshTactic:AttachSquadMatch( squad_ai )
	local squadName = squad_ai:GetSquadName()
			
	for i = 1, table.getn( self.attachlist ) do
		if( self.attachlist[i] ~= nil and squadName == self.attachlist[i] and not squad_ai:IsAttached() ) then
			return true	
		end
	end
	return false
end
		
function DaemonsHeraldSlaaneshTactic:TryAttachSquad( melee, match_stance, radius, min_strength, health )

	local bInfiltrator = self.squad_ai:IsInfiltrating()
	if not self.squad_ai:IsBroken() and 
		(health == nil or self.squad_ai:GetHealthPercentage() < health) then
		
		-- minimum strength of squad we want to attach to
		if min_strength == nil then
			min_strength = 160 + (cpu_manager:GetTierLevel() - 1) * 40
		end

		local range_filter = function( squad_ai )
			local oTactic = squad_ai:GetTactic()
			return squad_ai:IsRanged() and not squad_ai:IsBroken() and not squad_ai:IsCapturing() and
					oTactic:GetUnitStrength() >= min_strength and self.squad_ai:CanAttachTo( squad_ai ) and
					not oTactic:IsInSubState() and (not squad_ai:IsInfiltrating() or bInfiltrator) and oTactic:IsAttacker() and self:AttachSquadMatch( squad_ai )
		end
		
		local melee_filter = function( squad_ai )
			local oTactic = squad_ai:GetTactic()
			return not squad_ai:IsRanged() and not squad_ai:IsBroken() and not squad_ai:IsCapturing() and
					oTactic:GetUnitStrength() >= min_strength and self.squad_ai:CanAttachTo( squad_ai ) and
					not oTactic:IsInSubState() and (not squad_ai:IsInfiltrating() or bInfiltrator) and oTactic:IsAttacker() and self:AttachSquadMatch( squad_ai )
		end

		-- attach to ranged
		if not melee then
			
			local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), radius, range_filter )
			
			if attach_to == nil and not match_stance then
				--try for melee unit if we don't care about the stance
				local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), radius, melee_filter )
			end
			
			if attach_to ~= nil then			
				self:DoMoveAttach( attach_to )		            		 
				
				if match_stance then
				attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Ranged )
				end			
			end
			
		else -- attach to melee
			
			local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), radius, melee_filter )
			if attach_to == nil and not match_stance then
				--try for ranged unit if we don't care about the stance
				local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), radius, range_filter )
			end

			if attach_to ~= nil then
			
				self:DoMoveAttach( attach_to )		            		 
				
				if match_stance then
				attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Assault )
				end
			end
		end
	end
	return attach_to 
end

function DaemonsHeraldSlaaneshTactic:Upgrade()

--	self:AutoBuildAddOn(0)	--	[addon_01] addon_commanders_cap_squad			4/1
--	self:AutoBuildAddOn(1)	-- 	[addon_02] addon_commanders_cap_support			5/1
--	self:AutoBuildAddOn(2)	-- 	[addon_03] addon_commanders_increase_production		5/1
--	self:AutoBuildAddOn(3)	-- 	[addon_04] addon_commanders_increase_health		6/1
--	self:AutoBuildAddOn(4)	-- 	[addon_05] addon_commanders_increase_morale		6/1
--	self:AutoBuildAddOn(5)	-- 	[addon_06] addon_commanders_cap_squad_2			6
--	self:AutoBuildAddOn(6)	-- 	[addon_07] addon_commanders_cap_support_2		8
--	self:AutoBuildAddOn(7)	-- 	[addon_08] addon_commanders_increase_production_2	8

	local addon_random_commander_upgrades = math.random( 0,7 )	-- Randomize these addons
	self:AutoBuildAddOn(addon_random_commander_upgrades)
end

function DaemonsHeraldSlaaneshTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update( self )) then
		return
	end
	
	-- Attach to squad
	self:TryAttachSquad(true, false, 1000, 150, nil)
	
	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end
 