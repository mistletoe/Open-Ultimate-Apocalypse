----------------------------------------
-- File: 'librariantactic.ai'
-- Edited by Thudmeizer @ 04.03.2016
-- Edited by LarkinVB   @ 15.08.2005

class 'LibrarianTactic' (SpaceMarineInfantryTactic)

Librarian = {}

function LibrarianTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Librarian Tactic")
end

function LibrarianTactic:AutoBuildAddOn( addonSlot )
	for e in self.squad_ai:GetEntities() do
		local buildChannelLibrarian = build_manager:GetBuildChannelFromID(e:GetID())
		if (buildChannelLibrarian ~= nil) then
			local addOnID = buildChannelLibrarian:GetItemIDAt(BuildChannelAI.PQ_AddOn, addonSlot)
			if (buildChannelLibrarian:IsBuilding() == 0 and buildChannelLibrarian:CanAddToQueue(BuildChannelAI.PQ_AddOn, addOnID) == BuildChannelAI.CANBUILD_Ok) then
				buildChannelLibrarian:BuildAddOn(addOnID)
				return
			end
		end
	end
	return
end

function LibrarianTactic:IsAttacker()
	return self:IsCommanderAttacker()
end

function LibrarianTactic:IsDefender()
	return self:IsCommanderDefender()
end

-- Librarian is allowed to retreat even directly after a jump
function LibrarianTactic:SetTarget( target, variant_type )

	self.variant_type = variant_type
	self.target = Vector3f(target)
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

-- Arkhan 03.2006: Inherited method used by commanders which are able to jump with an attached squad
function LibrarianTactic:CanJumpAttached()
	return true
end

function LibrarianTactic:InitAbilities()

	-- Init ability ID's
	if (Librarian.smite == nil) then
		Librarian.smite = cpu_manager.stats:GetAbilityID( "marines_smite" )
	end
	if (Librarian.word == nil) then
		Librarian.word = cpu_manager.stats:GetAbilityID( "marines_word_of_emperer" )
	end
	if (Librarian.weaken_resolve == nil) then
		Librarian.weaken_resolve = cpu_manager.stats:GetAbilityID( "marines_weaken_resolve" )
	end
	if (Librarian.haste == nil) then
		Librarian.haste = cpu_manager.stats:GetAbilityID( "marines_haste" )
	end
	if (Librarian.cotms == nil) then
		Librarian.cotms = cpu_manager.stats:GetAbilityID( "marines_curse_machine_spirits" )
	end
	if (Librarian.inquisition == nil) then
		Librarian.inquisition = cpu_manager.stats:GetAbilityID( "marines_inquisition_librarian" )
	end
	if (Librarian.firebolt == nil) then
		Librarian.firebolt = cpu_manager.stats:GetAbilityID( "marines_firebolt" )
	end
	if (Librarian.mind_war == nil) then
		Librarian.mind_war = cpu_manager.stats:GetAbilityID( "marines_mind_war" )
	end
	if (Librarian.run_id == nil) then
		Librarian.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function LibrarianTactic:DoAbilities()

	Ability.DoAbility( self.squad_ai, Librarian.word, Ability.Filters.IsInCombat )
	Ability.DoAbility( self.squad_ai, Librarian.haste, Ability.Filters.IsInCombat )
	
	-- We are dying, lower requisites for attacks
	if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.4) then
		Ability.DoAbilityTarget( self.squad_ai, Librarian.smite, Ability.Filters.CloseInfantryEnemy, 4 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.weaken_resolve, Ability.Filters.CloseInfantryEnemy, 4 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.inquisition, Ability.Filters.CloseInfantryEnemy, 4 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.firebolt, Ability.Filters.CloseInfantryEnemy, 4 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.mind_war, Ability.Filters.CloseInfantryEnemy, 1 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.cotms, Ability.Filters.CloseVehicleEnemy, 1 )
	else
		Ability.DoAbilityTarget( self.squad_ai, Librarian.smite, Ability.Filters.CloseInfantryEnemy, 6 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.weaken_resolve, Ability.Filters.CloseInfantryEnemy, 6 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.inquisition, Ability.Filters.CloseInfantryEnemy, 8 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.firebolt, Ability.Filters.CloseInfantryEnemy, 8 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.mind_war, Ability.Filters.CloseInfantryEnemy, 1 )
		Ability.DoAbilityTarget( self.squad_ai, Librarian.cotms, Ability.Filters.CloseVehicleEnemy, 1 )
	end

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( Librarian.run_id )) then
			self.squad_ai:DoSpecialAbility( Librarian.run_id )
		end
	end
end

function LibrarianTactic:Upgrade()

--	self:AutoBuildAddOn(0)	--	[addon_01] addon_commanders_cap_squad			4/1
--	self:AutoBuildAddOn(1)	-- 	[addon_02] addon_commanders_cap_support			5/1
--	self:AutoBuildAddOn(2)	-- 	[addon_03] addon_commanders_cap_relic			6/1
--	self:AutoBuildAddOn(3)	-- 	[addon_04] addon_commanders_increase_production		5/1
--	self:AutoBuildAddOn(4)	-- 	[addon_05] addon_commanders_increase_health		6/1
--	self:AutoBuildAddOn(5)	-- 	[addon_06] addon_commanders_increase_morale		6/1
--	self:AutoBuildAddOn(6)	-- 	[addon_07] addon_commanders_cap_squad_2			6
--	self:AutoBuildAddOn(7)	-- 	[addon_08] addon_commanders_cap_support_2		8
--	self:AutoBuildAddOn(8)	-- 	[addon_09] addon_commanders_increase_production_2	8

   	if (cpu_manager:GetTierLevel() <= 4) then 
		local addon_random_commander_upgrades = math.random( 0,8 )	-- Randomize these addons
		self:AutoBuildAddOn(addon_random_commander_upgrades)
	end

   	if (cpu_manager:GetTierLevel() > 4) then 
		self:AutoBuildAddOn(2)	-- Always build in late tiers to support the construction of Titans and late game ubers.
	end
end

function LibrarianTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update(self)) then
		return
	end
	
	-- Attach to melee in tier3+
	if (cpu_manager:GetTierLevel() > 2) then
	
		if (self:TryAttachSquad(true, true, 50, 100, nil) ~= nil) then
			return
		end
	end
	if (self:TryAttachSquad(false, true, 50, 100, self.m_fCommanderAttachHealth) == nil) then
		self:TryAttachSquadMelee()
	end

	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end
