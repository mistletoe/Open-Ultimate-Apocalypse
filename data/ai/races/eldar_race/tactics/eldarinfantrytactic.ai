----------------------------------------
-- File: 'eldarinfantrytactic.ai'
-- Created by Arkhan		@ 12.01.2006
-- Edited by Thudmeizer         @ 07.06.2016

class 'EldarInfantryTactic' (InfantryTactic)

function EldarInfantryTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Eldar Infantry Tactic")
	
	local sSquadName = squad_ai:GetSquadName()
	if (sSquadName == "eldar_guardian_squad" or
		sSquadName == "eldar_storm_guardian_squad" or
		sSquadName == "eldar_squad_rangers" or	
		sSquadName == "eldar_squad_corsairs" or
		sSquadName == "eldar_squad_grav_platform" or
		sSquadName == "eldar_squad_grav_platform_brightlance" or
		sSquadName == "eldar_squad_banshees" or
		sSquadName == "eldar_squad_dark_reapers" or
		sSquadName == "eldar_dire_avenger_squad" or
		sSquadName == "eldar_squad_fire_dragon" or
		sSquadName == "eldar_squad_striking_scorpions" or
		sSquadName == "eldar_squad_swooping_hawk" or
		sSquadName == "eldar_squad_seer_council" or
		sSquadName == "eldar_harlequin_squad" or
		sSquadName == "eldar_warlock_attachable_squad" or
		sSquadName == "eldar_squad_shadowseer" or
		sSquadName == "eldar_squad_autarch" or
		sSquadName == "eldar_squad_farseer" or
		sSquadName == "eldar_squad_wraithguard" or
		sSquadName == "eldar_squad_wraithguard_ancient") then

		-- Squads are both transportable and can deepstrike
		self.m_iTransportable = 1 or 2 -- Wave Serpent or Falcon // Storm Serpent

	elseif (sSquadName == "eldar_squad_warp_spider") then

		-- Squads are both transportable and can deepstrike
		self.m_iTransportable = 2 -- Storm Serpent
		self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID( "eldar_aspect_portal" ) 
	end

	-- Set FoF range
	self.m_iFoFRange = 35
	if (sSquadName == "eldar_squad_banshees" or sSquadName == "eldar_squad_striking_scorpions" or sSquadName == "eldar_harlequin_squad" or sSquadName == "eldar_warlock_attachable_squad" or sSquadName == "eldar_squad_seer_council" or sSquadName == "eldar_squad_shadowseer" or sSquadName == "eldar_squad_farseer" or sSquadName == "eldar_squad_autarch") then
		self.m_iFoFRange = 15
	elseif (sSquadName == "eldar_squad_fire_dragon" or sSquadName == "eldar_squad_wraithguard" or sSquadName == "eldar_squad_wraithguard_ancient" or ssSquadName == "eldar_squad_warp_spider") then
		self.m_iFoFRange = 30
	elseif (sSquadName == "eldar_guardian_squad" or sSquadName == "eldar_storm_guardian_squad" or sSquadName == "eldar_squad_corsairs" or sSquadName == "eldar_squad_swooping_hawk" or sSquadName == "eldar_dire_avenger_squad") then
		self.m_iFoFRange = 35
	elseif (sSquadName == "eldar_squad_rangers" or sSquadName == "eldar_squad_grav_platform" or sSquadName == "eldar_squad_grav_platform_brightlance") then
		self.m_iFoFRange = 40
	elseif (sSquadName == "eldar_squad_dark_reapers") then
		self.m_iFoFRange = 45
	end
end

function EldarInfantryTactic:AddTargetAbilities()

end

function EldarInfantryTactic:AddCommanders()
	table.insert(self.commander, { "eldar_squad_farseer", true })
	table.insert(self.commander, { "eldar_squad_autarch", true })
	table.insert(self.commander, { "eldar_squad_shadowseer", false })
	table.insert(self.commander, { "eldar_warlock_attachable_squad", false })
end

function EldarInfantryTactic:DoAbilities()

	--Xeno commented this out, as it causes error-spam.
	--[[
	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		local run_id = cpu_manager.stats:GetAbilityID( "all_run!" )
		local foot_id = cpu_manager.stats:GetAbilityID( "eldar_fleetoffoot" )
		local foot2_id = cpu_manager.stats:GetAbilityID( "eldar_fleetoffoot2" )
		local foot3_id = cpu_manager.stats:GetAbilityID( "eldar_fleetoffoot_laughing_god" )
		if (self.squad_ai:CanDoAbility( run_id )) then
			self.squad_ai:DoSpecialAbility( run_id )
		elseif (self.squad_ai:CanDoAbility( foot_id )) then
			self.squad_ai:DoSpecialAbility( foot_id )
		elseif (self.squad_ai:CanDoAbility( foot2_id )) then
			self.squad_ai:DoSpecialAbility( foot2_id )
		elseif (self.squad_ai:CanDoAbility( foot3_id )) then
			self.squad_ai:DoSpecialAbility( foot3_id )
		end
	end
	]]

	-- I might have these attached
	if (self.squad_ai:IsAttached()) then
	
		if (self.squad_ai:HasSquadAttached("eldar_warlock_attachable_squad")) then
			WarlockTactic.InitAbilities( self )
			WarlockTactic.DoAbilities( self )
		elseif (self.squad_ai:HasSquadAttached("eldar_squad_shadowseer")) then
			ShadowseerTactic.InitAbilities( self )
			ShadowseerTactic.DoAbilities( self )
		elseif (self.squad_ai:HasSquadAttached("eldar_squad_farseer")) then
			FarSeerTactic.InitAbilities( self )
			FarSeerTactic.DoAbilities( self )
		elseif (self.squad_ai:HasSquadAttached("eldar_squad_autarch")) then
			AutarchTactic.InitAbilities( self )
			AutarchTactic.DoAbilities( self )
		end
	end
	
	-- Check if I should enable/disable fleet of foot
	--self:DoAbilityFoF()

	-- Call basic DoAbilities methods
	InfantryTactic.DoAbilities(self)
end

function EldarInfantryTactic:TryAttachSquadMelee()

	--if I'm in combat
	local bInfiltrator = self.squad_ai:IsInfiltrating()
	if not self.squad_ai:IsBroken() and self.squad_ai:IsInCombat() then
	  
		if self.squad_ai:GetHealthPercentage() < 0.3 then
		 
			local attachable_filter = function( squad_ai )
		 	local oTactic = squad_ai:GetTactic()
				return self.squad_ai:CanAttachTo( squad_ai ) and not squad_ai:IsBroken() and
					not squad_ai:IsCapturing() and not oTactic:IsInSubState() and
					(not squad_ai:IsInfiltrating() or bInfiltrator) and oTactic:IsAttacker()
		 		end
		 
			--find close by squads
			 local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), 10, attachable_filter )
			 if attach_to ~= nil then 
			
				--sync FoF
				self:ToggleFoF( self.squad_ai, false )
				self:ToggleFoF( attach_to, false )  
			
				self.squad_ai:DoAttachSquad( attach_to )
				attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Assault )
			end
		 
		else
		 
			local melee_filter = function( squad_ai )
			local oTactic = squad_ai:GetTactic()
				return self.squad_ai:CanAttachTo( squad_ai ) and not squad_ai:IsRanged() and 
					not squad_ai:IsBroken() and not squad_ai:IsCapturing() and not oTactic:IsInSubState() and
					(not squad_ai:IsInfiltrating() or bInfiltrator) and oTactic:IsAttacker()
				end

			local attach_to = cpu_manager:GetClosestSquad( self.squad_ai:GetPosition(), 10, melee_filter )
			if attach_to ~= nil then 
			
			--sync FoF
			self:ToggleFoF( self.squad_ai, false )
			self:ToggleFoF( attach_to, false )  
			
			self.squad_ai:DoAttachSquad( attach_to )
			attach_to:DoSetMeleeStance( SquadAI.MSTANCE_Assault )
			end
		 end	  
	end
end

function EldarInfantryTactic:DoMoveAttach( attach_to )
   
	-- Sync FoF
	self:ToggleFoF( self.squad_ai, fof )
	self:ToggleFoF( attach_to, fof )

	-- Call standard method
	Tactic.DoMoveAttach(self, attach_to)
end

function EldarInfantryTactic:ToggleFoF( squad_ai, state )

	-- Check if the squad can handle fleet of foot
	local id = cpu_manager.stats:GetAbilityID( "eldar_fleetoffoot" )
	local idB = cpu_manager.stats:GetAbilityID( "eldar_fleetoffoot2" )
	local idC = cpu_manager.stats:GetAbilityID( "eldar_fleetoffoot_laughing_god" )
	if (not squad_ai:CanDoAbility(id)) or (not squad_ai:CanDoAbility(idB)) or (not squad_ai:CanDoAbility(idC)) then
		return
	end
	
	-- Check if it's already in desired state
	if (squad_ai:IsUsingAbility(id) == state) or (squad_ai:IsUsingAbility(idB) == state) or (squad_ai:IsUsingAbility(idC) == state) then
		return 
	end
	
	-- Activate fleet of foot
	squad_ai:DoSpecialAbility(id)
	squad_ai:DoSpecialAbility(idB)
	squad_ai:DoSpecialAbility(idC)
end

-- Dreddnott edit (April 16th)
function EldarInfantryTactic:DoAbilityFoF()

	-- Check if we should toggle FoF
	local iFoFID = cpu_manager.stats:GetAbilityID( "eldar_fleetoffoot" )
	local iFoFIDB = cpu_manager.stats:GetAbilityID( "eldar_fleetoffoot2" )
	local iFoFIDC = cpu_manager.stats:GetAbilityID( "eldar_fleetoffoot_laughing_god" )
	local bToggleFoF = false
	local bToggleFoFB = false
	local bToggleFoFC = false

	-- Check whether we're using the ability
	local bIsUsing = self.squad_ai:IsUsingAbility(iFoFID)
	local bIsUsingB = self.squad_ai:IsUsingAbility(iFoFIDB)
	local bIsUsingC = self.squad_ai:IsUsingAbility(iFoFIDC)

	-- Check if we're attacking
	local bIsAttacking = self.squad_ai:IsInStateAttackMove()
	
	-- Check if we are shooting or fighting in melee
	local bIsFighting = self.squad_ai:IsAttacking()
	
	-- Check if we're moving normally
	local bIsMoving = (self.squad_ai:IsInStateMove() and not bIsAttacking)

	-- Check if we're in a state that should FoF regardless of enemy presence
	local bAvoidCombat = (self.squad_ai:IsBroken() or self:IsInSubState() or self.squad_ai:IsCapturing() or bIsMoving)

	-- Check if we should slow down for enemies nearing range
	local vSquadPos = self.squad_ai:GetPosition()
	local oEnemy = cpu_manager.cpu_player:FindFirstEnemy(vSquadPos, self.m_iFoFRange, 1)
	local bCloseEnemy = (oEnemy ~= nil)
	
	-- Helper flags
	local bIsCharging = (bIsAttacking and bCloseEnemy)
	local bIsDefending = (not bIsMoving and bCloseEnemy)
	local bIsInCombat = (bIsFighting or bIsCharging or bIsDefending)

	-- Check if FoF should be toggled
	if ((bIsUsing and bIsInCombat and not bAvoidCombat) or (not bIsUsing and (not bIsInCombat or bAvoidCombat))) then        
        	bToggleFoF = true
	elseif ((bIsUsingB and bIsInCombat and not bAvoidCombat) or (not bIsUsingB and (not bIsInCombat or bAvoidCombat))) then  
		bToggleFoFB = true
	elseif ((bIsUsingC and bIsInCombat and not bAvoidCombat) or (not bIsUsingC and (not bIsInCombat or bAvoidCombat))) then  
		bToggleFoFC = true
	end

	-- Toggle FoF
	if (bToggleFoF and self.squad_ai:CanDoAbility(iFoFID)) then
		self.squad_ai:DoSpecialAbility(iFoFID)
	elseif (bToggleFoFB and self.squad_ai:CanDoAbility(iFoFIDB)) then
		self.squad_ai:DoSpecialAbility(iFoFIDB)
	elseif (bToggleFoFC and self.squad_ai:CanDoAbility(iFoFIDC)) then
		self.squad_ai:DoSpecialAbility(iFoFIDC)
	end
end

