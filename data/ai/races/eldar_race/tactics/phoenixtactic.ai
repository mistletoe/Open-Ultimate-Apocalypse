----------------------------------------
-- File: 'phoenixtactic.ai'
-- Created by Cylarne_04 2011
-- Edited by Thudmeizer		@ 22.02.2016

class 'PhoenixTactic' (EldarVehicleTactic)

Phoenix = {}

function PhoenixTactic:__init( squad_ai ) super( squad_ai )
	
	self:SetName("Phoenix Tactic")

	self.timedDirectSpawnAbility = Timer( PhoenixTactic.DoDirectSpawnAbility, self, 5 )
end

function PhoenixTactic:InitAbilities()

	if (Phoenix.bombard_id == nil) then
		Phoenix.bombard_id = cpu_manager.stats:GetAbilityID( "eldar_nightwing_strike" )
	end
end

function PhoenixTactic:DoAbilities()

	if (self.squad_ai:CanDoAbility(Phoenix.bombard_id)) then
		Ability.DoAbilityPos(self.squad_ai, Phoenix.bombard_id, Ability.Filters.CloseInfiltratedEnemy, 2)
		Ability.DoAbilityPos(self.squad_ai, Phoenix.bombard_id, Ability.Filters.CloseEnemy, 4)
	end

	-- Try to spawn Nightwing Fighters
	if (self.timedDirectSpawnAbility ~= nil) then
		self.timedDirectSpawnAbility:Call()
	else
		PhoenixTactic.DoDirectSpawnAbility(self)
	end
end

function PhoenixTactic:DoDirectSpawnAbility()

	-- Spawn Nightwing Fighters in combat
	if (self.squad_ai:CanDirectSpawn()) then 
		self.squad_ai:DoDirectSpawn()
	end
end

function PhoenixTactic:JumpAttackRanged()

	-- Call standard method
	if (Tactic.JumpAttackRanged(self)) then
		return true
	end
	
	-- Get position and jump range
	local vPhoenixPosition = self.squad_ai:GetPosition()
	local iJumpRange = sqr(self.squad_ai:GetJumpDistance())
	
	-- Check if we can jump directly to the target
	local iClosestDistance = distance_sqr(vPhoenixPosition, self.target)
	local vTargetPos = nil
	if (iClosestDistance < iJumpRange) then
		vTargetPos = self.target
	else
	
		-- Get closest squad to target position
		for oSquad in military_manager:GetSquads() do
	
			-- Check if squad is valid
			if (oSquad:IsValid()) then
			
				-- Check distance
				local vPosition = oSquad:GetPosition()
				local iDistanceToPhoenix = distance_sqr(vPosition, vPhoenixPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToPhoenix < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
		
		-- Get closest building to target position
		for oBuilding in military_manager:GetBases() do
		
			-- Check if building is valid
			if (oBuilding:IsValid()) then
			
				-- Check distance
				local vPosition = oBuilding:GetPosition()
				local iDistanceToPhoenix = distance_sqr(vPosition, vPhoenixPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToPhoenix < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
	end
	
	-- Don't jump if we didn't find a target
	if (vTargetPos == nil or distance_sqr(vPhoenixPosition, vTargetPos) < sqr(50)) then
		return false
	end
	
	-- Try to jump to target
	for iLoop1 = 1, 5 do
	
		-- Create a jump position
		local vJumpPosition = vTargetPos
		vJumpPosition.x = vJumpPosition.x + math.random(-15, 15)
		vJumpPosition.z = vJumpPosition.z + math.random(-15, 15)
			
		-- Check if target position is in range and if unit is able to jump to target position
		local iDistance = distance_sqr(vJumpPosition, vPhoenixPosition)
		if (iDistance <= iJumpRange and self.squad_ai:CanJumpToPosition(vJumpPosition)) then
							
			-- Jump to position
			self.squad_ai:DoJump(vJumpPosition)
			self.last_jump = g_iGMT
			self.m_iLastGatherMove = self.last_jump - 10
			return true
		end
	end
	return false
end