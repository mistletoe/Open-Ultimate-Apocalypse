----------------------------------------
-- File: 'shiningspearstactic.ai'
-- Created by Cylarne
-- Edited by Thudmeizer		@ 20.04.2016

class 'ShiningSpearsTactic' (EldarVehicleTactic)

ShiningSpears = {}

function ShiningSpearsTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Shining Spears Tactic")
end

function ShiningSpearsTactic:AlwaysAttack()
	return true
end

function ShiningSpearsTactic:InitAbilities()

	-- Init ability ID's
	if (ShiningSpears.blind_id == nil) then
		ShiningSpears.blind_id = cpu_manager.stats:GetAbilityID( "eldar_blind_grenades" )
	end
	if (ShiningSpears.gravitic_id == nil) then
		ShiningSpears.gravitic_id = cpu_manager.stats:GetAbilityID( "eldar_gravitic_grenades" )
	end
	if (ShiningSpears.haywire_id == nil) then
		ShiningSpears.haywire_id = cpu_manager.stats:GetAbilityID( "eldar_haywire_bombs_2" )
	end
	if (ShiningSpears.plasma_id == nil) then
		ShiningSpears.plasma_id = cpu_manager.stats:GetAbilityID( "eldar_plasma_grenades" )
	end
	if (ShiningSpears.nightwing_id == nil) then
		ShiningSpears.nightwing_id = cpu_manager.stats:GetAbilityID( "eldar_nightwing_strike" )
	end
end

function ShiningSpearsTactic:DoAbilities()

	if (self.squad_ai:IsInCombat()) then
		Ability.DoAbilityTarget( self.squad_ai, ShiningSpears.blind_id, Ability.Filters.CloseSquadEnemy, 4 )
		Ability.DoAbilityTarget( self.squad_ai, ShiningSpears.gravitic_id, Ability.Filters.CloseInfantryEnemy, 6 )
		Ability.DoAbilityTarget( self.squad_ai, ShiningSpears.haywire_id, Ability.Filters.CloseVehicleEnemy, 1 )
		Ability.DoAbilityTarget( self.squad_ai, ShiningSpears.plasma_id, Ability.Filters.CloseSquadEnemy, 4 )
	end

	-- Launch a Nightwing Strike
	Ability.DoAbilityPos( self.squad_ai, ShiningSpears.nightwing_id, Ability.Filters.CloseEnemy, 10 )
	Ability.DoAbilityPos( self.squad_ai, ShiningSpears.nightwing_id, Ability.EntityFilters.CloseBaseEntityEnemy, 5)

	-- Call basic DoAbilities methods
	EldarVehicleTactic.DoAbilities(self)
end

function ShiningSpearsTactic:Upgrade()

	-- If there are no ressources available, don't upgrade!
	if (not Tactic.Options.can_reinforce) then
		return
	end
  
	local class_type = cpu_manager:FindClosestEnemyPlayer():GetMajorityClassType()
		self.squad_ai:DoBestUpgrade( class_type )
end

function ShiningSpearsTactic:CanOnlyDecap()
	return true
end

function ShiningSpearsTactic:JumpAttackRanged()

	-- Call standard method
	if (Tactic.JumpAttackRanged(self)) then
		return true
	end
	
	-- Get position and jump range
	local vShiningSpearsPosition = self.squad_ai:GetPosition()
	local iJumpRange = sqr(self.squad_ai:GetJumpDistance())
	
	-- Check if we can jump directly to the target
	local iClosestDistance = distance_sqr(vShiningSpearsPosition, self.target)
	local vTargetPos = nil
	if (iClosestDistance < iJumpRange) then
		vTargetPos = self.target
	else
	
		-- Get closest squad to target position
		for oSquad in military_manager:GetSquads() do
	
			-- Check if squad is valid
			if (oSquad:IsValid()) then
			
				-- Check distance
				local vPosition = oSquad:GetPosition()
				local iDistanceToShiningSpears = distance_sqr(vPosition, vShiningSpearsPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToShiningSpears < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
		
		-- Get closest building to target position
		for oBuilding in military_manager:GetBases() do
		
			-- Check if building is valid
			if (oBuilding:IsValid()) then
			
				-- Check distance
				local vPosition = oBuilding:GetPosition()
				local iDistanceToShiningSpears = distance_sqr(vPosition, vShiningSpearsPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToShiningSpears < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
	end
	
	-- Don't jump if we didn't find a target
	if (vTargetPos == nil or distance_sqr(vShiningSpearsPosition, vTargetPos) < sqr(50)) then
		return false
	end
	
	-- Try to jump to target
	for iLoop1 = 1, 5 do
	
		-- Create a jump position
		local vJumpPosition = vTargetPos
		vJumpPosition.x = vJumpPosition.x + math.random(-15, 15)
		vJumpPosition.z = vJumpPosition.z + math.random(-15, 15)
			
		-- Check if target position is in range and if unit is able to jump to target position
		local iDistance = distance_sqr(vJumpPosition, vShiningSpearsPosition)
		if (iDistance <= iJumpRange and self.squad_ai:CanJumpToPosition(vJumpPosition)) then
							
			-- Jump to position
			self.squad_ai:DoJump(vJumpPosition)
			self.last_jump = g_iGMT
			self.m_iLastGatherMove = self.last_jump - 10
			return true
		end
	end
	return false
end