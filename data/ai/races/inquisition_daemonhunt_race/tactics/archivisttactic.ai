----------------------------------------
-- File: 'archivisttactic.ai'
-- Edited by Thudmeizer @ 11.10.2016

class 'ArchivistTactic' (EngineerTactic)

Archivist = {}

function ArchivistTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Archivist Tactic")

	self.previousPosition = self.squad_ai:GetPosition()
	self.checkTime = g_iGMT
end

-- Archivist is allowed to retreat even directly after a jump
function ArchivistTactic:SetTarget( target, variant_type )

	self.variant_type = variant_type
	self.target = Vector3f(target)
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

function ArchivistTactic:DoAbilities()

	-- Jump/Teleport squads' unstuck code call. Checks every 12 secs for stuck squads, and force them to jump nearby.
	self:SolveStuckCase()
end

function ArchivistTactic:CanRepair()

	-- Archivists cannot repair
	return false
end

function ArchivistTactic:SolveStuckCase()

	if g_iGMT > self.checkTime + 18 and g_iGMT > self.last_jump + 60 then
        self.checkTime = g_iGMT
        	if self:IsSquadStuck() then
            		self:ForceSquadJumpNear(self.squad_ai:GetPosition())
        	end
	end
end

function ArchivistTactic:IsSquadStuck()

	local iPosition = self.squad_ai:GetPosition()
	local iDistance = distance_sqr(iPosition, self.previousPosition)
    	self.previousPosition = iPosition
    	if iDistance > 25 or self.squad_ai:IsInCombat() or self.squad_ai:IsCapturing() or self.squad_ai:IsBuilding() then
        	return false
    	end
    	return true
end

function ArchivistTactic:ForceSquadJumpNear(pos)

	-- Try to jump somewhere near, perform 16 checks for a viable position
    	for iLoop1 = 1, 16 do
        	-- Create a jump position
		local vJumpPosition = pos
        	local vDir = cpu_manager:GetDirectionToEnemy(pos)
        	vJumpPosition.x = vJumpPosition.x + vDir.x * math.random(-20, 50)
        	vJumpPosition.z = vJumpPosition.z + vDir.z * math.random(-20, 50)
        	-- Check if target position is in range and if unit is able to jump to target position
        	local iDistance = distance_sqr(vJumpPosition, pos)
        	if iDistance < sqr(self.squad_ai:GetJumpDistance()) and self.squad_ai:CanJumpToPosition(vJumpPosition) then                
            		-- Jump to position
            		self.squad_ai:DoJump(vJumpPosition)
            		self.last_jump = g_iGMT
            		self.m_iLastGatherMove = self.last_jump - 10
            		return
		end
	end
end

function ArchivistTactic:Update()

	if self:IsComplete() then
		return
	end

	if not EngineerTactic.Update( self ) then
		return false
	end

	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end