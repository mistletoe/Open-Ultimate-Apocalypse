----------------------------------------
-- File: 'servitorweapontactic.ai'
-- Created by Thudmeizer @ 20.06.2016

class 'ServitorWeaponTactic' (DaemonhuntInfantryTactic)

ServitorWeapon = {}

function ServitorWeaponTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Servitor Weapon Tactic")

	self.tagged_flag = nil

	self.go_to_post = false
	
	self.m_vDestination = nil
	
	self.m_iValidRange = sqr(35)
	self.m_bBusy = false
end

function ServitorWeaponTactic:IsAttacker()
	return false
end

function ServitorWeaponTactic:IsDefender()
	return true
end

function ServitorWeaponTactic:IsAffectedByMorale()
	return self.squad_ai:IsBuilding() == 0
end

function ServitorWeaponTactic:InitAbilities()

	if (ServitorWeapon.sabotage_id == nil) then
		ServitorWeapon.sabotage_id = cpu_manager.stats:GetAbilityID( "inquisition_sabotage" )	
	end

	if (ServitorWeapon.rammingspeed_id == nil) then
		ServitorWeapon.rammingspeed_id = cpu_manager.stats:GetAbilityID( "all_bumpertank" )	
	end
end

function ServitorWeaponTactic:DoAbilities()

	Ability.DoAbilityTarget( self.squad_ai, ServitorWeapon.sabotage_id, Ability.Filters.CloseVehicleEnemy, 1 )
	Ability.DoAbilityTargetEntity( self.squad_ai, ServitorWeapon.sabotage_id, Ability.EntityFilters.CloseBaseEntityEnemy, 1 )

	-- RAM!!! - The squad will sacrifice combat accuracy in exchange for extra speed and the ability to knock down infantry wherever the vehicle goes.
	-- Squad gains a 60% movement speed increase and will knock down infantry continuously on contact.
	if (self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) then
		if (self.squad_ai:CanDoAbility( ServitorWeapon.rammingspeed_id )) then
			self.squad_ai:DoSpecialAbility( ServitorWeapon.rammingspeed_id )
		end
	end
end

function ServitorWeaponTactic:ValidMove( vDestination )
	
	aitrace("Move ServitorWeapon to "..tostring(vDestination.x)..", "..tostring(vDestination.z))
	
	-- Check distance
	self.m_vDestination = Vector3f(vDestination)
	if (distance_sqr(self.squad_ai:GetPosition(), vDestination) > sqr(50)) then
	
		-- Try to jump	
		if (not cpu_manager:JumpBuilder(self.squad_ai, vDestination)) then
			self.squad_ai:DoMove(vDestination)
		end
	else
		self.squad_ai:DoMove(vDestination)
	end
end

function ServitorWeaponTactic:Upgrade()

	-- If there are no ressources available, don't upgrade!
	if (not Tactic.Options.can_reinforce) then
		return
	end
  
	local class_type = cpu_manager:FindClosestEnemyPlayer():GetMajorityClassType()
		self.squad_ai:DoBestUpgrade( class_type )
end

function ServitorWeaponTactic:Reinforce()

	-- Always try to reinforce
	if (not self.squad_ai:IsReinforcing()) then
			
		if (self.squad_ai:CanReinforce( true, 0 )) then
			self.squad_ai:DoReinforce( true, 0 )
		elseif (self.squad_ai:CanReinforce( false, 0 )) then
			self.squad_ai:DoReinforce( false, 0 )
		end	
	end
end

function ServitorWeaponTactic:Update()
	
	-- Upgrade squads
	self:Upgrade()

	-- Reinforce squads
	self:Reinforce()

	-- Arkhan 01.2006: Check state
	local vSquadPos = self.squad_ai:GetPosition()
	if (self.squad_ai:IsLocked()) then
	
		-- Arkhan 01.2006: Reset destination if squad is locked
   		self.m_vDestination = nil
   		self.m_bBusy = false
   		
		-- Release the flag
		if (self.tagged_flag ~= nil) then
			self.tagged_flag:TagFlagForServitorWeapon( false )
			self.tagged_flag = nil
		end
		return true
   	
   	elseif (self.m_vDestination ~= nil and not self.m_bBusy) then
   	
   		-- Arkhan 01.2006: Make sure that the squad moves to the target position
   		if (self.squad_ai:IsInStateMove()) then
   		
   			if (distance_sqr(cpu_manager.start_pos, vSquadPos) > self.m_iValidRange) then
   			
   				if (cpu_manager.terrain_analyzer:HasThreat(self.m_vDestination, 35)) then
   					self:GoToNextPost()
   				else
   					self.squad_ai:DoMove(self.m_vDestination)
   				end
   				return true
   			end
   		end
   	
   	elseif (distance_sqr(cpu_manager.start_pos, vSquadPos) > self.m_iValidRange and not self.m_bBusy) then
   	
   		-- Arkhan 01.2006: The move command seems invalid and the ServitorWeapon Servitor should therefore return to a safe place
		self:GoToNextPost()
		return true
	end
   	
   	if (self.tagged_flag == nil and not self.squad_ai:IsInStateMove()) then
   	
   		-- Arkhan 01.2006: Get new job
		self:GoToNextPost()
	end	
	return true
end

function ServitorWeaponTactic:GoToNextPost()

	-- Try to reach a save position if HQ is attacked
	self.m_bBusy = false
	local vEngineerPos = self.squad_ai:GetPosition()
	if (cpu_manager:HQThreat() or self.squad_ai:WasRecentlyHurt()) then
		local vBasePos = cpu_manager:FindClosestFriendlyBaseOrStrategicPoint(vEngineerPos, cpu_manager.start_pos, true, true)
		if (vBasePos ~= nil) then
			self:ValidMove(vBasePos)
			self.m_iValidRange = 35
			return
		end
	end

	-- Only attempt vehicle repair if we can
	local iClosestDistance = 0
	if (self.squad_ai:CanRepair()) then

		-- Find the closest vehicle that can be repaired
		local oVehicleToRepair = cpu_manager:GetDamagedVehicleInRange()
		if (oVehicleToRepair ~= nil) then
			aitrace("ServitorWeaponTactic: Repairing vehicle...")
			self.squad_ai:DoRepairSquad(oVehicleToRepair)
			self.m_vDestination = oVehicleToRepair:GetPosition()
			self.m_bBusy = true
			return
		end
	end

	-- Try to help finish a building
	local oBuildingToFinish = cpu_manager:GetUnfinishedBuildingInRange()
	if (oBuildingToFinish ~= nil) then
		aitrace("ServitorWeaponTactic: Help finishing a building...")
		self.squad_ai:DoFinishBuilding(oBuildingToFinish)
		self.m_vDestination = oBuildingToFinish:GetPosition()
		self.m_bBusy = true
		return
	end
				
	-- Only attempt building repair if we can
	if (self.squad_ai:CanRepair()) then
	
		-- Find the closest building that can be repaired
		local oBuildingToRepair = cpu_manager:GetDamagedBuildingInRange()
		if (oBuildingToRepair ~= nil) then
			aitrace("ServitorWeaponTactic: Repairing building...")
			self.squad_ai:DoRepairBase(oBuildingToRepair)
			self.m_vDestination = oBuildingToRepair:GetPosition()
			self.m_bBusy = true
			return
		end
	end

	-- Return to home base
	if (distance_sqr(cpu_manager.start_pos, vEngineerPos) > sqr(35)) then
		aitrace("ServitorWeaponTactic: Return to home base")
		self:ValidMove(cpu_manager.start_pos)
		return
	end
end