----------------------------------------
-- File: 'necroninfantrytactic.ai'
-- Created by Thudmeizer  @ 11.11.2016

class 'NecronInfantryTactic' (InfantryTactic)

function NecronInfantryTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Necron Infantry Tactic")

	-- Necrons don't get cover bonus
	self.m_bTakeCover = false

	-- Elite infantry is able to enter transport vehicles and deepstrike
	local sSquadName = squad_ai:GetSquadName()
	if (sSquadName == "necron_flayed_one_squad" or
		sSquadName == "necron_lychguard_squad" or
		sSquadName == "necron_lord_squad") then

		-- Elite infantry is able to enter large transport vehicles and deepstrike building
		self.m_iTransportable = 2	-- Restored Monolith
		self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID( "monolith" ) or cpu_manager.stats:GetBuildingID( "monolith_super" )

	elseif (sSquadName == "necron_scarab_squad" or
		sSquadName == "necron_basic_warrior_squad" or
		sSquadName == "necron_immortal_squad" or
		sSquadName == "necron_wraith_squad" or
		sSquadName == "necron_deathmark_squad" or
		sSquadName == "necron_pariah_squad" or
		sSquadName == "necron_pariah_deathstrike_squad" or
		sSquadName == "necron_destroyer_squad" or
		sSquadName == "necron_heavy_destroyer_squad" or
		sSquadName == "necron_overseer_squad" or
		sSquadName == "necron_lord_destroyer_squad") then

		-- Infantry is able to enter transports
		self.m_iTransportable = 1	-- Ghost Ark
--[[
	-- Disabled as limited deepstriking/summoning range makes it impractical for the AI to use.
	elseif (sSquadName == "necron_lord_death_squad") then

		-- Commander is able to enter deepstrike building
		self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID( "necron_summoning_core_big" )
]]
	end

	-- Set Stuck Unit Positions
	self.initialPosition = self.squad_ai:GetPosition()
	self.isStuck = false
end

function NecronInfantryTactic:AddCommanders()
	table.insert(self.commander, { "necron_lord_squad", true })
	table.insert(self.commander, { "necron_lord_destroyer_squad", false })
	table.insert(self.commander, { "necron_overseer_squad", false })
	table.insert(self.commander, { "necron_lord_death_squad", false })
end

function NecronInfantryTactic:IsAffectedByMorale()
	return false
end

-- Unstable with Necron units
function NecronInfantryTactic:JumpAttack()

end

function NecronInfantryTactic:DoAbilities()

	-- Jump squads' unstuck code call.
	-- Checks jump-able stuck squads, and force them to jump nearby
   	if self.squad_ai:CanJump() then
        	self:SolveStuckCase()
	end
end

-- Unstuck Code
function NecronInfantryTactic:SolveStuckCase()

	local iPosition = self.squad_ai:GetPosition()
    	if iPosition.x ~= self.initialPosition.x or iPosition.z ~= self.initialPosition.z then
        	self.isStuck = false
    	elseif (self.squad_ai:IsInStateMove() or self.squad_ai:IsInStateAttackMove()) and not self.squad_ai:IsInCombat()
    		and iPosition.x == self.initialPosition.x and iPosition.z == self.initialPosition.z then
        	self.isStuck = true
    	end
    	if self.isStuck then
        	self:ForceSquadJumpNear(iPosition)
	end
    	self.initialPosition = self.squad_ai:GetPosition()
end

function NecronInfantryTactic:ForceSquadJumpNear(pos)

	-- Try to jump somewhere near, perform 16 checks for a viable position
    	local jumpDisSqr = sqr(self.squad_ai:GetJumpDistance())
    	for iLoop1 = 1, 16 do
        	-- Create a jump position
        	local vJumpPosition = pos
        	local vDir = cpu_manager:GetDirectionToEnemy(pos)
        	vJumpPosition.x = vJumpPosition.x + vDir.x * math.random(-20, 50)
        	vJumpPosition.z = vJumpPosition.z + vDir.z * math.random(-20, 50)
        	-- Check if target position is in range and if unit is able to jump to target position
        	local iDistance = distance_sqr(vJumpPosition, pos)
        	if iDistance < jumpDisSqr and self.squad_ai:CanJumpToPosition(vJumpPosition) then
            		-- Jump to position
            		self.squad_ai:DoJump(vJumpPosition)
            		self.last_jump = g_iGMT
            		self.m_iLastGatherMove = self.last_jump - 10
            		return
		end
	end
end

-- Necron infantry has problems with the jump option
function NecronInfantryTactic:MoveToDisengage()
	
	local maxd = 100
	local mind = 40
	local safe_radius = 35
	local squad_pos = self.squad_ai:GetPosition()
	
	-- Broken squad will need bigger safe area than others
	if (self.squad_ai:IsBroken()) then
  		maxd = 140
  		safe_radius = 50
  	end
  	
	-- We are safe
	if (not cpu_manager.terrain_analyzer:HasThreat( squad_pos, safe_radius )) then
		mind = 10
	end
	
	-- Get closest strat to retreat
	local move_pos = nil
	local vBasePos = cpu_manager:FindClosestFriendlyBaseOrStrategicPoint(squad_pos, cpu_manager.start_pos, true, false)
	if (vBasePos ~= nil) then
		move_pos = Vector3f(vBasePos)
	end
	
	-- No SP, check for friendly squad
	if (move_pos == nil) then
	
		local squad_filter = function( squad_ai )
			return not squad_ai:IsBroken() and not squad_ai:IsCapturing() and
				   not squad_ai:IsInStateMove() and not squad_ai:GetTactic():IsInSubState() and
				   not cpu_manager.terrain_analyzer:HasThreat( squad_ai:GetPosition(), 35 )
		end
	
		-- Check for friendly squad
		move_pos = cpu_manager:GetClosestSquadWithin( squad_pos, mind, maxd, squad_filter )
	end
	
	-- We have a valid destination
	if (move_pos ~= nil) then
	
		cpu_manager:DoMove( self.squad_ai, move_pos, false, "Disengage", false )
		self.safe_point = Vector3f( move_pos )
		return true
	end
	return false
end

-- Necron infantry doesn't dance
function NecronInfantryTactic:CheckForDance()

end

-- Necron infantry doesn't dance
function NecronInfantryTactic:CheckForDeath()
	
end