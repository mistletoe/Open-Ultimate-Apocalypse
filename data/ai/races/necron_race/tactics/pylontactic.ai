----------------------------------------
-- File: 'pylontactic.ai'
-- Edited by Thudmeizer	@ 12.03.2016

class 'PylonTactic' (NecronVehicleTactic)

Pylon = {}

function PylonTactic:__init( squad_ai ) super( squad_ai )
	
	self:SetName("Pylon Tactic")

	self.m_oTimedSpecialAbilities = Timer( PylonTactic.DoTimedSpecialAbilities, self, 7 )
end

-- Pylon is allowed to retreat even directly after a jump
function PylonTactic:SetTarget( target, variant_type )

	self.variant_type = variant_type
	self.target = Vector3f(target)
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

function PylonTactic:InitAbilities()

	if (Pylon.resurrection_id == nil) then
		Pylon.resurrection_id = cpu_manager.stats:GetAbilityID( "necron_mass_resurrection_monolith" )
	end
	if (Pylon.shifter_id == nil) then
		Pylon.shifter_id = cpu_manager.stats:GetAbilityID( "necron_pylon_shift" )
	end
	if (Pylon.pulse_id == nil) then
		Pylon.pulse_id = cpu_manager.stats:GetAbilityID( "necron_solar_pulse_monolith" )
	end
	if (Pylon.shield_id == nil) then
		Pylon.shield_id = cpu_manager.stats:GetAbilityID( "necron_shield_spike_improved" )
	end
	if (Pylon.truegauss_id == nil) then
		Pylon.truegauss_id = cpu_manager.stats:GetAbilityID( "necron_truegauss" )
	end	
end

function PylonTactic:DoAbilities()

	--Shadow Shifter: Cloaks and disables the pylon for several seconds, enabling quick regeneration and recovery from battle.
	-- Infiltrated squad will also receive no damage from incoming attacks (if at all revealed), but cannot attack either.
	if (self.squad_ai:IsInCombat() and self.squad_ai:CanDoAbility(Pylon.shifter_id)) then
		if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.4) then
			self.squad_ai:DoSpecialAbility(Pylon.shifter_id)
		end
	end

	-- Try to activate the Solar Pulse
	if (self.squad_ai:CanDoAbility(Pylon.pulse_id)) then
		Ability.DoAbilityPos(self.squad_ai, Pylon.pulse_id, Ability.Filters.CloseInfiltratedEnemy, 1)
		Ability.DoAbilityPos(self.squad_ai, Pylon.pulse_id, Ability.Filters.CloseEnemy, 5)
	end

	if (self.squad_ai:CanDoAbility(Pylon.shield_id)) then
	
		if (self.squad_ai:GetHealthPercentage() < 0.9 and not self.squad_ai:IsUsingAbility(Pylon.shield_id)) then

			-- Activate the Base Battery
			self.squad_ai:DoSpecialAbility(Pylon.shield_id)
			
		elseif (not self.squad_ai:IsInCombat() and self.squad_ai:IsUsingAbility(Pylon.shield_id)) then

			-- Deactivate the Base Battery
			self.squad_ai:DoSpecialAbility(Pylon.shield_id)
		end
	end

	-- Gauss Weapon Overcharge: the squad will receive a boost in maximum damage, but a critical reduction in movement speed for a duration.
	if (self.squad_ai:IsInCombat() and self.squad_ai:GetHealthPercentage() > 0.5) then
		if self.squad_ai:CanDoAbility( Pylon.truegauss_id ) then
			Ability.DoAbilityArea( self.squad_ai, Pylon.truegauss_id, Ability.Filters.CloseEnemy, 20, 5 )
		end
	end

	-- Try to use mass resurrection ability
	if (self.m_oTimedSpecialAbilities ~= nil) then
		self.m_oTimedSpecialAbilities:Call()
	else
		PylonTactic.DoTimedSpecialAbilities(self)
	end	
end

function PylonTactic:DoTimedSpecialAbilities()

	-- Try to use mass resurrection ability
	Ability.DoAbility(self.squad_ai, Pylon.resurrection_id, Ability.PredicateFilters.HasUsableBodies, { ability_id = Pylon.resurrection_id, min_bodies = 5 })
end

function PylonTactic:JumpAttackRanged()

	-- Call standard method
	if (Tactic.JumpAttackRanged(self)) then
		return true
	end
	
	-- Get position and jump range
	local vPylonPosition = self.squad_ai:GetPosition()
	local iJumpRange = sqr(self.squad_ai:GetJumpDistance())
	
	-- Check if we can jump directly to the target
	local iClosestDistance = distance_sqr(vPylonPosition, self.target)
	local vTargetPos = nil
	if (iClosestDistance < iJumpRange) then
		vTargetPos = self.target
	else
	
		-- Get closest squad to target position
		for oSquad in military_manager:GetSquads() do
	
			-- Check if squad is valid
			if (oSquad:IsValid()) then
			
				-- Check distance
				local vPosition = oSquad:GetPosition()
				local iDistanceToPylon = distance_sqr(vPosition, vPylonPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToPylon < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
		
		-- Get closest building to target position
		for oBuilding in military_manager:GetBases() do
		
			-- Check if building is valid
			if (oBuilding:IsValid()) then
			
				-- Check distance
				local vPosition = oBuilding:GetPosition()
				local iDistanceToPylon = distance_sqr(vPosition, vPylonPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToPylon < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
	end
	
	-- Don't jump if we didn't find a target
	if (vTargetPos == nil or distance_sqr(vPylonPosition, vTargetPos) < sqr(50)) then
		return false
	end
	
	-- Try to jump to target
	for iLoop1 = 1, 5 do
	
		-- Create a jump position
		local vJumpPosition = vTargetPos
		vJumpPosition.x = vJumpPosition.x + math.random(-15, 15)
		vJumpPosition.z = vJumpPosition.z + math.random(-15, 15)
			
		-- Check if target position is in range and if unit is able to jump to target position
		local iDistance = distance_sqr(vJumpPosition, vPylonPosition)
		if (iDistance <= iJumpRange and self.squad_ai:GetHealthPercentage() > 0.8 and self.squad_ai:CanJumpToPosition(vJumpPosition)) then
							
			-- Jump to position
			self.squad_ai:DoJump(vJumpPosition)
			self.last_jump = g_iGMT
			self.m_iLastGatherMove = self.last_jump - 10
			return true
		end
	end
	return false
end

function PylonTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not VehicleTactic.Update(self)) then
		return
	end

	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end
