----------------------------------------
-- File: 'necroncoretactic.ai'
-- Edited by Krronus @ 17.09.2010
-- Edited by Cylarne @ 2014
-- Edited by Thudmeizer	@ 02.10.2016

class 'NecronCoreTactic' (BaseTactic)

NecronCore = {}

function NecronCoreTactic:__init( base_ai ) super( base_ai )

	self:SetName("Necron Core Tactic")

	self.iHQ_Name = "monolith"

	-- Re-calculate starting position or race's AI re-initiation
	local oStats = cpu_manager.stats:GetPlayerStatsFromID(cpu_manager.player_id)
	for oBase in oStats:GetBases() do
		if oBase:IsValid() then
			if oBase:GetBaseName() == "monolith" then
				cpu_manager.start_pos = oBase:GetEntity():GetPosition()
				break
			end
		end
	end
end
--[[
function NecronCoreTactic:CanDeepStrikeTroops()
	return true
end
]]
function NecronCoreTactic:InitAbilities()

	-- Init ability ID's
	if (NecronCore.portal_id == nil) then
		NecronCore.portal_id = cpu_manager.stats:GetAbilityID( "necron_homeworld_portal" )
	end
	if (NecronCore.repair_id == nil) then
		NecronCore.repair_id = cpu_manager.stats:GetAbilityID( "all_autorepair" )
	end
end

function NecronCoreTactic:DoAbilities()

	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	
	-- Try for the Homeworld Portal
    	if (self.base_ai:CanDoAbility(NecronCore.portal_id)) then
    
		local oTarget = Ability.Filters.CloseEnemy(self.base_ai:GetPosition(), 1000, 6)
		if (oTarget ~= nil and iPower >= 1000) then

        		-- Get distance to enemy unit
			local vSquadPos = self.base_ai:GetPosition()
			local vEnemyPos = oTarget:GetPosition()
			local iDistance = distance(vSquadPos, vEnemyPos)
            
            		-- If target is too far away launch the portal in range
			local vTargetPos = Vector3f(vSquadPos)
            		local iRange = self.base_ai:GetAbilityRange(NecronCore.portal_id)
            		if (iDistance > iRange) then
               			local fThrowFactor = iRange / iDistance
                		vTargetPos.x = vTargetPos.x + (vEnemyPos.x - vSquadPos.x) * fThrowFactor
                		vTargetPos.z = vTargetPos.z + (vEnemyPos.z - vSquadPos.z) * fThrowFactor
           		else
                	vTargetPos = Vector3f(vEnemyPos)
            		end

		-- Cast the Homeworld Portal
		self.base_ai:DoSpecialAbilityPos(NecronCore.portal_id, vTargetPos)

		end
    	end

	-- Base Repair!
	if (self.base_ai:WasRecentlyHurt() and self.base_ai:GetHealthPercentage() < 0.6) then

		if (self.base_ai:CanDoAbility( NecronCore.repair_id )) then
			self.base_ai:DoSpecialAbility( NecronCore.repair_id )
		end
	end

	local build_channel = build_manager:GetBuildChannelFromID(self.base_ai:GetEntity():GetID())
    	if build_channel ~= nil then
        	if (build_channel:CanDeepStrike() and not build_channel:CanOnlyDeepStrikeToEntity() and cpu_manager:MilitaryDeepStrike(build_channel:GetBlueprintID())) then
            		local selfPos = self.base_ai:GetPosition()
            		-- First, try to deepstrike defensively, to a close-by friendly HQ.
            		local deepStrikingPosition = self:DoDefensiveHQDeepStriking()
            		if deepStrikingPosition ~= nil then
                		if distance_sqr(selfPos,deepStrikingPosition) < 40000 then
                    			build_channel:DoDeepStrikeToPos(deepStrikingPosition)
                    		return
                	end
            	end
		-- Else, to deepstrike offensively, to a friendly SPs that is unthreatened and with a built LP.
            	deepStrikingPosition = self:DoOffensiveLPDeepStriking()
            	if deepStrikingPosition ~= nil then
                	if distance_sqr(selfPos,deepStrikingPosition) < 40000 then
                    		build_channel:DoDeepStrikeToPos(deepStrikingPosition)
                    		return
                	end
            	end
            		-- Previous two methods didn't find a suitable place. DS at the place of the building.
			build_channel:DoDeepStrikeToPos(selfPos)
        	end
	end
end

function NecronCoreTactic:HQDeepStrikeImmediately(pos)
	local buildChannelHQ = build_manager:GetBuildChannelFromID(self.base_ai:GetEntity():GetID())
	local id = buildChannelHQ:GetBlueprintID()
	if buildChannelHQ ~= nil then
		if (buildChannelHQ:CanDeepStrike() and cpu_manager:MilitaryDeepStrike(id)) then
			buildChannelHQ:DoDeepStrikeToPos(pos)
		end
	end
end

-- DS offensively, to a friendly SPs that is unthreatened and with a built LP, NEAR the enemy.
function NecronCoreTactic:DoOffensiveLPDeepStriking()
	local mapPositions = {}
    	local closestEnemy = cpu_manager:GetFirstEnemyPlayer()
    	-- If closest player is dead, then a random alive enemy will do
    	if closestEnemy:IsPlayerDead() then
        	for oPlayer in cpu_manager.stats:GetPlayerStats() do
            		if (cpu_manager.player_stats:IsEnemy(oPlayer) and not oPlayer:IsPlayerDead()) then
               			closestEnemy = oPlayer
                		break
            		end
       		end
	end
		local closestEnemyPosition = closestEnemy:GetStartingPosition()
    		for oStrategicPoint in resource_manager:GetStrategicPointAIs() do
        		local oStrategicPointPosition = oStrategicPoint:GetPosition()
       		if cpu_manager:IsFriendly(oStrategicPoint:Owner()) and oStrategicPoint:HasListeningPost() and
        		not cpu_manager.terrain_analyzer:HasThreat(oStrategicPointPosition, 35) then
            		oClosestEnemyDistance = distance_sqr(closestEnemyPosition, oStrategicPointPosition)
            		table.insert(mapPositions, {oStrategicPointPosition, oClosestEnemyDistance})
        	end
	end
    	if table.getn(mapPositions) > 0 then
        	table.sort(mapPositions, function(oItem1, oItem2) return oItem1[2] < oItem2[2] end)
        	local vDir = cpu_manager:GetDirectionToEnemy(mapPositions[1][1])
        	local iDeviationX = math.random(-10, 10)
        	local iDeviationZ = math.random(-10, 10)
        	local iOffset = math.random(5, 14)
        	mapPositions[1][1].x = mapPositions[1][1].x - vDir.x * (iOffset + iDeviationX)
        	mapPositions[1][1].z = mapPositions[1][1].z - vDir.z * (iOffset + iDeviationZ)
        	return mapPositions[1][1]
    	else
		return nil
	end
end

-- DS defensively, to any of the current HQs.
function NecronCoreTactic:DoDefensiveHQDeepStriking()
	for oBuilding in cpu_manager.player_stats:GetBases() do
        	if oBuilding:IsValid() then
            		if oBuilding:GetBaseName() == self.iHQ_Name and oBuilding:IsConstructionDone() then
                	local iPos = oBuilding:GetPosition()
                	local vDir = cpu_manager:GetDirectionToEnemy(iPos)
                	local iDeviationX = math.random(5, 25)
                	local iDeviationZ = math.random(5, 25)
                	iPos.x = iPos.x + vDir.x * iDeviationX
                	iPos.z = iPos.z + vDir.z * iDeviationZ
                	return(iPos)
            		end
        	end
    	end
	return nil
end
