----------------------------------------
-- File: 'nidbuildbuildingplan.ai'
-- Edited by Gambit @	 02.09.2016

class 'NidBuildBuildingPlan' (BuildBuildingPlan)

function NidBuildBuildingPlan:__init( building_id, build_pos, wait_on_builder) super( CpuPlayer.CT_BuildBuildings )

	self.bestPosition = nil

	-- Nil if you want to automatically quit out on failure
	self.wait_on_builder = nil
	
	-- Scarabs do need extra attention
	self.shift_move = 0
	self.shifted = false

	-- The building i'm trying to build
	BuildPlan.SetItemID( self, building_id )
	BuildPlan.SetItemName( self, cpu_manager.stats:GetBuildingName( building_id ) )

	dbAssert( self.item_name ~= nil )
	
	Plan.SetNeeds( self, "Asking for builder", NidBuildBuildingPlan.ObtainBuilder )
	Plan.SetState( self, "Wanting to build: "..self.item_name, NidBuildBuildingPlan.BuildBuilding )
	Plan.SetName( self, "Build Building Plan" )
	
	-- Init build position
	if (build_pos ~= nil) then
		self.build_pos = Vector2f()
		self.build_pos.x = build_pos.x
		self.build_pos.y = build_pos.z
		self.copy_build_pos = Vector3f( build_pos )
	end
	
	-- Check for unfinished building
	local oBuilding = build_manager:FindUnfinishedBuilding( self.item_id )	
	if (oBuilding) then
		aitrace("BuildBuildingPlan: Finish building...")
		self.started_building = true
		self.copy_build_pos = Vector3f(oBuilding:GetPosition())
		self.bestPosition = Vector3f(oBuilding:GetPosition())
		self.build_pos = Vector2f()
		self.build_pos.x = self.bestPosition.x
		self.build_pos.z = self.bestPosition.z
		Plan.SetNeeds( self, "Fixing building...", NidBuildBuildingPlan.ObtainNewBuilder )
		Plan.SetState( self, "Try to fix building: "..self.item_name, BuildBuildingPlan.FixState )
	end
	
	-- Force HQ rebuilds
	self.m_bEmergencyHQ = false
	if (cpu_manager:IsHQ(building_id)) then
		self.m_bEmergencyHQ = true
	end
end


function NidBuildBuildingPlan:ObtainBuilder()

	-- See if builder is available
	local engineer = cpu_manager.stats:GetSquadID("auto_builder_squad")
	if engineer:IsLocked() or not engineer:CanBuild(self.item_id) == SquadAI.CANBUILD_Ok then
		engineer = nil
	end	

	-- Check if we have a build pos
	if (self.build_pos == nil) then
		if (engineer == nil) then
			aitrace("BuildBuildingPlan: Builder unavailable for: "..self.item_name)
			return
		end
	end
	
	-- Check for best building position
	if (self.bestPosition == nil and not self:InitBestBuildingPosition()) then
		return
	end

	-- Lock and save it!
	BuildPlan.SetBuilder(self, engineer)

	-- No needs
	Plan.SetNeeds( self, "No needs", Plan.NeedsFulfilled )
end


function NidBuildBuildingPlan:ObtainNewBuilder()

    aitrace("BuildBuildingPlan: Reclaim builder for "..self.item_name)
    self.building = nil
    
    -- Find the half-built building
    self.building = build_manager:FindUnfinishedBuilding( self.item_id )
    
    -- Both the builder and the building died -- just quit
    if (self.building == nil) then
    	aitrace("BuildBuildingPlan: Can't find the building. Abort "..self.item_name)
        self:SetComplete( true )
        return
    end

    -- Send the engineer if available
	local engineer = cpu_manager.stats:GetSquadID("auto_builder_squad")
	if not engineer:IsLocked() then
		BuildPlan.SetBuilder( engineer, squad_ai )
		-- No needs
		Plan.SetNeeds( self, "No needs", Plan.NeedsFulfilled )
	end	
end


function NidBuildBuildingPlan:BuildBuilding()

	-- Check for builder
	if (self.builder == nil) then
		
		-- Shall we wait for a builder?
		if (self.wait_on_builder == nil) then	
			aitrace( "BuildBuildingPlan: No builder found. Abort "..self.item_name )
			Plan.SetComplete( self, true )
		else
			aitrace( "BuildBuildingPlan: Search builder for "..self.item_name )	
		end
		return
	end
	
	-- Don't build under threat
	if (cpu_manager.terrain_analyzer:HasThreat(self.bestPosition, 35)) then
	
		-- Try to find a save build position
		if (not self:SetSaveBuildPosition(self.builder)) then
			aitrace("BuildBuildingPlan: Cannot build under threat : "..self.item_name)
			return
		end
	end

	-- No assertion for bigger generators !!!
	if (cpu_manager:IsBiggerGenerator(self.item_id)) then
		if (not self.builder:CanBuildAt(self.item_id, self.bestPosition) or self.builder:CanBuild(self.item_id) ~= SquadAI.CANBUILD_Ok) then
			return
		end
	end
	
	-- Check if building can be built
	if (not self.builder:CanBuildAt(self.item_id, self.bestPosition)) then
		aitrace("BuildBuildingPlan: Can't build building for unknown reasons. Try to get another build position..", true)
		self.build_pos = nil
		self:InitBestBuildingPosition()
		return
	end
	
	-- Try to build
	self.builder:DoBuildBuilding(self.item_id, self.bestPosition)

	-- Change state
	Plan.SetState( self, "Building a "..self.item_name, NidBuildBuildingPlan.BuildingState )
	return
end


function NidBuildBuildingPlan:SetSaveBuildPosition(oEngineer)

	-- Check build position
	if (self.build_pos == nil) then
		return
	end

	-- Check threat at build position
	local vBuildPos = self.copy_build_pos
	if (not cpu_manager.terrain_analyzer:HasThreat(vBuildPos, 35)) then
		return
	end
	
	-- Set close position to engineer
	local vEngineerPosition = cpu_manager.start_pos
	if (oEngineer ~= nil) then
		vEngineerPosition = oEngineer:GetPosition()
	end
	
	-- Get a save position as new build position
	local vBasePos = cpu_manager:FindClosestFriendlyBaseOrStrategicPoint(vEngineerPosition, vBuildPos, true, true)
	if (vBasePos == nil) then
		vBasePos = cpu_manager:FindClosestFriendlyBaseOrStrategicPoint(vEngineerPosition, vBuildPos, true, false)
	end
	if (vBasePos ~= nil) then
		vBuildPos = Vector3f(vBasePos)
	end
	
	-- Set new build position
	self.build_pos.x = vBuildPos.x
	self.build_pos.y = vBuildPos.z
	
	-- Update best build position
	self.bestPosition = nil
	return self:InitBestBuildingPosition()
end


function NidBuildBuildingPlan:Retry()

	-- Work around for invalid build position with heavy network lag or time out
	if (g_iGMT > self.m_iPlanStart + 120) then

		-- Stop building, and let an available builder take over when available
		aitrace("BuildBuildingPlan: Time out! Abort building "..self.item_name)
		Plan.UnlockResource( self, self.builder )
		self.builder = nil
		Plan.SetComplete( self, true )
		return
	end

	-- Check if we have a build position
	if (self.build_pos == nil) then
		self.build_pos = Vector2f()
		self.build_pos.x = cpu_manager.start_pos.x
		self.build_pos.y = cpu_manager.start_pos.z
	end
	
	-- Find a place to build it
	if (cpu_manager:IsBiggerGenerator(self.item_id)) then
		
		-- Try to build
		self.bestPosition = Vector3f(self.copy_build_pos)
		if (self.builder:CanBuild( self.item_id ) == SquadAI.CANBUILD_Ok) then
			self.builder:DoBuildBuilding( self.item_id, self.bestPosition )
		end			 		
	else
	
		-- Get closest enemy
		local oEnemy = cpu_manager:FindClosestEnemyPlayer()
		if (oEnemy == nil) then
			return
		end
		local vEnemyPos = oEnemy:GetStartingPosition()
		
		-- Arkhan 12.2005: Retry with deviation to fix build bug
		if (math.random(1, 2) == 1) then
			
			-- Get strategic point positions
			local aBuildPositions = {}
			for oStrategicPoint in resource_manager:GetStrategicPointAIs() do
			
				-- Check owner
				if (oStrategicPoint:Owner() == cpu_manager.player_id) then
					table.insert(aBuildPositions, oStrategicPoint:GetPosition())
				end
			end
			local iBuildPosCount = table.getn(aBuildPositions)
			if (iBuildPosCount > 0) then
				
				-- Choose a random strat position
				local vBuildPos = aBuildPositions[math.random(1, iBuildPosCount)]
				self.build_pos.x = vBuildPos.x
				self.build_pos.y = vBuildPos.z
			end
		end
		local bias_pos = Vector2f()
		bias_pos.x = self.build_pos.x + math.random( -10, 10)
		bias_pos.y = self.build_pos.y + math.random( -10, 10)
		self.bestPosition = Vector3f()
		local bSuccess = cpu_manager.terrain_analyzer:FindClosestFreePosition( self.item_id, bias_pos, vEnemyPos, self.bestPosition )
		if (bSuccess and self.builder:CanBuild(self.item_id) == SquadAI.CANBUILD_Ok) then
			self.builder:DoBuildBuilding( self.item_id, self.bestPosition )
		end
	end
end



function NidBuildBuildingPlan:BuildingState()

	aitrace("BuildBuildingPlan: Building State...")
		
	-- Compute basic building state method
	BuildPlan.BuildingState(self)

	-- Check if building was started
	if (not self.started_building) then
		return
	end
	
	-- Search unfinished building
	local oBuilding = build_manager:FindUnfinishedBuilding(self.item_id)
	if (oBuilding ~= nil and distance_sqr(oBuilding:GetPosition(), self.bestPosition) < 100) then
	
		-- Try to jump if possible
		if (distance_sqr(self.builder:GetPosition(), self.bestPosition) > sqr(40) and cpu_manager:JumpBuilder(self.builder, self.bestPosition)) then
			return
		end
	end
	
	-- Check if builder is building
	if (self.builder:IsBuilding() ~= self.item_id) then
		
		-- Check for building
		if (oBuilding ~= nil) then
		
			-- Get building AI
			local oBuildingAI = military_manager:GetBaseFromID(oBuilding:GetID())
			if (oBuildingAI ~= nil) then

				-- Check for auto-construct buildings
				if (not cpu_manager:AutoConstructBuildings() or oBuildingAI:GetHealthPercentage() <= 0.3) then
					self.builder:DoFinishBuilding(oBuilding)
					return
				else
				
					-- Job finished
					aitrace("BuildBuildingPlan: Job finished...")
					Plan.UnlockResource(self, self.builder)
					self.builder = nil
					Plan.SetComplete(self, true)
					return
				end
			end
		end
		
	elseif (oBuilding == nil) then

		-- Builder got stuck and wasn't able to finish building => Choose another builder
		local oNewBuilder = nil
		local iBuilderID = self.builder:GetID()
		for oSquad in military_manager:GetUnlockedSquads() do
		
			-- Get a valid engineer
			if (oSquad:IsValid() and oSquad:IsEngineer() and oSquad:CanBuild(self.item_id) == SquadAI.CANBUILD_Ok and oSquad:GetID() ~= iBuilderID) then
				oNewBuilder = oSquad
				break
			end
		end
		
		-- Set new builder
		if (oNewBuilder ~= nil) then
			self.builder:DoMove(cpu_manager.start_pos)
			Plan.UnlockResource(self, self.builder)
			BuildPlan.SetBuilder(self, oNewBuilder)
			self.started_building = false
		end
	end
end

