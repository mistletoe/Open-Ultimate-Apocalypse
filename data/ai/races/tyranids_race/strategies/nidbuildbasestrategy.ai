----------------------------------------
-- File: 'tyranidbuildbasestrategy.ai'
-- Edited by Thudmeizer @ 17.11.2016

class 'TyranidBuildBaseStrategy' (BuildBaseStrategy)

function TyranidBuildBaseStrategy:__init( baseinfo ) super( baseinfo )

	-- Add detector units (Best first, worst last)
	self:AddDetectorUnit("tyranids_squad_woth")
	self:AddDetectorUnit("tyranids_squad_lictor")
	
	-- Phases of attacks. If army is decreased substantially, or build only titans: modify.
	self.m_iArmyBuild = math.random(0, 4) -- 4 phases total. If 4 armies was defeated, stop creating armies as it is pointless. Build titans and focus on build order strategy.
	self.m_iArmyHighestStrength = 0 -- Maximum possible army strength I ever had.

	-- Build first HQ at start pos
	self.m_iNumHQAtStartPos = 1
end

function TyranidBuildBaseStrategy:ChooseBuildProgram()

	-- Check build program count
	if (table.getn(self.info.BuildPrograms) ~= 4) then
		return BuildBaseStrategy.ChooseBuildProgram(self)
	end
	return 1
end

function TyranidBuildBaseStrategy:EvaluateSquadCap()

	-- Check squad cap
	if (self:CheckSquadCap(300, 0)) then
		
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Research
		
		if (not cpu_manager.cpu_player:IsResearchComplete( "tyranids_caps_research" )) then
			tBuildType.name = "tyranids_caps_research"
		elseif (not cpu_manager.cpu_player:IsResearchComplete( "tyranids_caps_research_1" )) then
			tBuildType.name = "tyranids_caps_research_1"
		elseif (not cpu_manager.cpu_player:IsResearchComplete( "tyranids_caps_research_2" )) then
			tBuildType.name = "tyranids_caps_research_2"
		else
			return
		end
		
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic research of "..tBuildType.name)
		end
	end

	-- Check support cap
	if (self:CheckSupportCap(150, 300)) then
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Research
		
		if (not cpu_manager.cpu_player:IsResearchComplete( "tyranids_caps_research_3" )) then
			tBuildType.name = "tyranids_caps_research_3"
		elseif (not cpu_manager.cpu_player:IsResearchComplete( "tyranids_caps_research_4" )) then
			tBuildType.name = "tyranids_caps_research_4"
		else
			return
		end
		
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic research of "..tBuildType.name)
		end
	end
end

function TyranidBuildBaseStrategy:GetBuildingName( sType )

	if (sType == "HQ") then
		return "tyranids_hq"

	elseif (sType == "Generator") then
		return "tyranids_digest_pool"
		
	elseif (sType == "BiggerGenerator") then
		return "tyranids_adv_magma_vent"
		
	elseif (sType == "VehicleBuilding") then
		return "tyranids_carnifex_hive"
		
	elseif (sType == "ListeningPost") then
		return "tyranids_spore_chimney"
		
	elseif (sType == "Turret") then
		return "tyranids_turret"

	elseif (sType == "Mine") then
		return "tyranids_mines"
	end
	return nil
end

function TyranidBuildBaseStrategy:GetAddonBuilding( sType )

	if (sType == "tyranids_hq_addon_1") then
		return "tyranids_hq"
		
	elseif (sType == "tyranids_hq_addon_2") then
		return "tyranids_hq"
		
	elseif (sType == "tyranids_list_post_addon_1") then
		return "tyranids_spore_chimney"

	elseif (sType == "tyranids_list_post_addon_2") then
		return "tyranids_spore_chimney"
		
	elseif (sType == "tyranids_structure_shield_addon") then
		return "tyranids_adv_magma_vent"

	elseif (sType == "tyranids_structure_shield_addon") then
		return "tyranids_capillary_vein"
		
	elseif (sType == "tyranids_structure_production_addon") then
		return "tyranids_capillary_vein"
		
	elseif (sType == "tyranids_structure_regeneration_addon") then
		return "tyranids_capillary_vein"
		
	elseif (sType == "tyranids_structure_sight_addon") then
		return "tyranids_capillary_vein"
		
	elseif (sType == "tyranids_turret_bioacid_addon") then
		return "tyranids_turret"
		
	elseif (sType == "tyranids_turret_launcher_addon") then
		return "tyranids_turret"
		
	elseif (sType == "tyranids_turret_production_addon") then
		return "tyranids_turret"

	elseif (sType == "tyranids_turret_launcher_addon") then
		return "tyranids_turret_bioacid"

	elseif (sType == "tyranids_turret_production_addon") then
		return "tyranids_turret_bioacid"

	elseif (sType == "tyranids_titanchamber_addon_1") then
		return "tyranids_biotitan_hive"

	elseif (sType == "tyranids_titanchamber_addon_2") then
		return "tyranids_biotitan_hive"

	elseif (sType == "addon_superweapon") then
		return "tyranids_capillary_tower"
	end
	return nil
end

-- Arkhan 11.2005: Returns the squad cap and support cap of the given squad
function TyranidBuildBaseStrategy:GetUnitStats(sSquadName)

	if (sSquadName == "tyranids_squad_termagant") then
		return 2, 0
	elseif (sSquadName == "tyranids_squad_termagant_max") then
		return 2, 0
	elseif (sSquadName == "tyranids_squad_hormagaunt") then
		return 2, 0
	elseif (sSquadName == "tyranids_squad_hormagaunt_max") then
		return 2, 0
	elseif (sSquadName == "tyranids_squad_genestealer") then
		return 3, 0
	elseif (sSquadName == "tyranids_squad_genestealer_max") then
		return 3, 0
	elseif (sSquadName == "tyranids_squad_spore_cluster") then
		return 2, 0
	elseif (sSquadName == "tyranids_squad_spore_cluster_max") then
		return 2, 0
	elseif (sSquadName == "tyranids_squad_lictor") then
		return 1, 0
	elseif (sSquadName == "tyranids_squad_ravener") then
		return 2, 0
	elseif (sSquadName == "tyranids_squad_gargoyle") then
		return 2, 0
	elseif (sSquadName == "tyranids_squad_biovores") then
		return 3, 0
	elseif (sSquadName == "tyranids_squad_warrior") then
		return 3, 0
	elseif (sSquadName == "tyranids_squad_zoanthropes") then
		return 5, 0
	elseif (sSquadName == "tyranids_squad_broodlord") then
		return 6, 0
	elseif (sSquadName == "tyranids_squad_tyrant_guard") then
		return 0, 2
	elseif (sSquadName == "tyranids_squad_carnifex_khazi") then
		return 0, 2
	elseif (sSquadName == "tyranids_squad_carnifex_skiller") then
		return 0, 2
	elseif (sSquadName == "tyranids_squad_carnifex") then
		return 0, 4
	end
	return 0, 0
end

-- Arkhan 01.2006: Inherited method to check if an addon is a tier addon
function TyranidBuildBaseStrategy:IsTierAddon( sName, iTargetTier )

	-- Check addon name and target tier
	if (sName == "tyranids_hq_addon_1" and iTargetTier == 2) then
		return true
	elseif (sName == "tyranids_hq_addon_2" and iTargetTier == 3) then
		return true
	end
	return false
end

function TyranidBuildBaseStrategy:UpdateTierLevel()

	-- Reset tier level
	self.tierLevel = 1
	
	-- Prepare
	local iHQAddon1ID = cpu_manager.stats:GetAddOnID("tyranids_hq_addon_1")
	local iHQAddon2ID = cpu_manager.stats:GetAddOnID("tyranids_hq_addon_2")
	local oStats = cpu_manager.stats:GetPlayerStatsFromID( cpu_manager.player_id )
	
	-- Check HQ's for addons
	for oBase in oStats:GetBases() do

		-- Check for valid building
		if (oBase:IsValid() and not oBase:IsListeningPost()) then

			-- We still have the proper research or add-on
			if (cpu_manager.cpu_player:IsResearchComplete("tyranids_apocalypse_research")) then
				self.tierLevel = 6
				return
			elseif (cpu_manager.cpu_player:IsResearchComplete("tyranids_assimilation_research")) then
				self.tierLevel = 5
				return
			elseif (cpu_manager.cpu_player:IsResearchComplete("tyranids_arrival3_research")) then
				self.tierLevel = 4
				return

			-- Check for HQ addon 2
			elseif (oBase:HasAddOn(iHQAddon2ID)) then
				self.tierLevel = 3
				return
	
			-- Check for HQ addon 1
			elseif (oBase:HasAddOn(iHQAddon1ID)) then
				self.tierLevel = 2
				return
			end
		end
	end
end

function TyranidBuildBaseStrategy:BuildFlexible()

	-- Locales
	local iArmyStrength = cpu_manager:GetArmyStrength()
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	
	if (iRequisition >= 1000 and iPower >= 500) then
		
		-- Dynamic research
		local num_gaunt_squads = self:CountSquads("tyranids_squad_spinegaunt")+ self:CountSquads("tyranids_squad_termagant")+ self:CountSquads("tyranids_squad_hormagaunt") or self:CountSquads("tyranids_squad_spinegaunt_max")+ self:CountSquads("tyranids_squad_termagant_max")+ self:CountSquads("tyranids_squad_hormagaunt_max")
		local num_genestealer_squads = self:CountSquads("tyranids_squad_genestealer")+ self:CountSquads("tyranids_squad_genestealer_max")
		local num_lictor_squads =  self:CountSquads("tyranids_squad_lictor") + self:CountSquads("tyranids_squad_lictor_alpha")
		local num_warrior_squads =  self:CountSquads("tyranids_squad_warrior") + self:CountSquads("tyranids_squad_ravener") + self:CountSquads("tyranids_squad_biovores") + self:CountSquads("tyranids_squad_broodlord") + self:CountSquads("tyranids_squad_zoanthropes") 
		local num_carnifex_squads = self:CountSquads("tyranids_squad_carnifex_skiller") + self:CountSquads("tyranids_squad_carnifex_khazi")+ self:CountSquads("tyranids_squad_carnifex") + self:CountSquads("tyranids_squad_carnifex_uber") + self:CountSquads("tyranids_squad_tyrant_guard")
		local num_broodlord_squads = self:CountSquads("tyranids_squad_broodlord")
		local num_ripper_squads = self:CountSquads("tyranids_squad_ripperswarm")
		local num_titans = self:CountSquads("tyranids_squad_trygon") + self:CountSquads("tyranids_squad_hierophant") + self:CountSquads("tyranids_squad_hierophant_max")

		-- Item-Syntax: ResearchName, MinTier, RequisitionCost, PowerCost, MinSquadCap, MinSupportCap, SquadName, SquadMinCount

		-- Compute tier 1 researches
		if (self.tierLevel >= 1) then

			-- Compute Gaunt Researches
			if (num_gaunt_squads >= 3) then
				self:DynamicResearch("tyranids_gaunt_upgrade_research_1", 1, 0, 100, 0, 0, nil, 0)
			end

			-- Compute Genestealer Researches
			if (num_genestealer_squads >= 2) then
				self:DynamicResearch("tyranids_genestealer_senses_research", 1, 0, 30, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_genestealer_upgrade_research_1", 1, 0, 100, 0, 0, nil, 0)
			end

			-- Compute Lictor Researches
			if (num_lictor_squads >= 2) then
				self:DynamicResearch("tyranids_lictor_upgrade_research_1", 1, 0, 75, 0, 0, nil, 0)
			end
		end

		-- Compute tier 2 researches
		if (self.tierLevel >= 2) then

			-- Compute Resource Researches
			self:DynamicResearch("tyranids_power_research", 2, 200, 20, 0, 0, nil, 0)
			self:DynamicResearch("tyranids_requisition_research_1", 2, 75, 250, 0, 0, nil, 0)

			-- Compute Hormagaunt Researches
			if (self:CountSquads("tyranids_squad_hormagaunt") >= 2) then
				self:DynamicResearch("tyranids_hormagaunt_adrenal_glands_research", 2, 0, 60, 0, 0, nil, 0)
			end

			-- Compute Gaunt Researches
			if (num_gaunt_squads >= 3) then
				self:DynamicResearch("tyranids_gaunt_devourer_research", 2, 0, 100, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_gaunt_upgrade_research_2", 2, 0, 120, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_gaunt_upgrade_research_3", 2, 0, 140, 0, 0, nil, 0)
			end

			-- Compute Ripper Researches
			if (num_ripper_squads >= 1) then
				self:DynamicResearch("tyranids_ripper_leaping_research", 2, 0, 50, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_ripper_toxin_sacs_research", 2, 0, 35, 0, 0, nil, 0)
			end

			-- Compute Genestealer Researches
			if (num_genestealer_squads >= 2) then
				self:DynamicResearch("tyranids_genestealer_upgrade_research_2", 2, 0, 120, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_genestealer_implant_research", 2, 0, 170, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_genestealer_tendrils_research", 2, 0, 80, 0, 0, nil, 0)
			end

			-- Compute Lictor Researches
			if (num_lictor_squads >= 2) then
				self:DynamicResearch("tyranids_lictor_upgrade_research_2", 2, 0, 95, 0, 0, nil, 0)
			end

			-- Compute Warrior Researches
			if (num_warrior_squads >= 1) then
				self:DynamicResearch("tyranids_warrior_weapons_research", 2, 0, 75, 0, 0, nil, 0)
			end

			-- Compute Carnifex Researches
			if (num_carnifex_squads >= 2) then
				self:DynamicResearch("tyranids_carnifex_ext_carapace_research", 2, 0, 200, 0, 0, nil, 0)
			end

			-- Compute HQ Tier2 Addons for future HQs
			if (self:GetBuildingCountByName("tyranids_hq") > 1) and (iRequisition >= 1000 and iPower >= 500) then
				self:DynamicAddon("tyranids_hq_addon_1", 100, 2, 250, 130, 0, 0, nil, nil, false)
			end
		end

		-- Compute tier 3 researches
		if (self.tierLevel >= 3) then

			-- Compute Resource Researches
			self:DynamicResearch("tyranids_power_research_2", 3, 350, 40, 0, 0, nil, 0)
			self:DynamicResearch("tyranids_requisition_research_2", 3, 100, 350, 0, 0, nil, 0)

			-- Compute Building Researches
			if (num_gaunt_squads >= 3) or (num_genestealer_squads >= 2) or (num_warrior_squads >= 2) then
				self:DynamicResearch("tyranids_building_miasmax2_research", 3, 0, 250, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_building_synapse_aurax2_research", 3, 0, 250, 0, 0, nil, 0)
			end

			-- Compute Genestealer Researches
			if (num_genestealer_squads >= 2) then
				self:DynamicResearch("tyranids_genestealer_upgrade_research_3", 3, 0, 140, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_genestealer_scyth_research", 3, 0, 190, 0, 0, nil, 0)
			end

			-- Compute Lictor Researches
			if (num_lictor_squads >= 2) then
				self:DynamicResearch("tyranids_lictor_upgrade_research_3", 3, 0, 115, 0, 0, nil, 0)
			end

			-- Compute Warrior Researches
			if (num_warrior_squads >= 1) then
				self:DynamicResearch("tyranids_warrior_leaping_research", 3, 0, 100, 0, 0, nil, 0)
			end

			-- Compute Carnifex Researches
			if (num_carnifex_squads >= 2) then
				self:DynamicResearch("tyranids_carnifex_toxic_miasma_research", 3, 0, 80, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_carnifex_implant_research", 3, 0, 125, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_carnifex_regeneration_research", 3, 0, 170, 0, 0, nil, 0)
			end

			-- Compute HQ Tier3 Addons for future HQs
			if (self:GetBuildingCountByName("tyranids_hq") > 1) and (iRequisition >= 3000 and iPower >= 1500) then
				self:DynamicAddon("tyranids_hq_addon_2", 50, 3, 600, 400, 0, 0, nil, nil, false)
			end

			-- Compute Tier III
			self:DynamicResearch("tyranids_arrival3_research", 3, 1200, 800, 0, 0, nil, 0)
		end

		-- Compute tier 4 researches
		if (self.tierLevel >= 4) then

			-- Compute Resource Researches
			self:DynamicResearch("tyranids_power_research_3", 4, 500, 60, 0, 0, nil, 0)
			self:DynamicResearch("tyranids_requisition_research_3", 4, 125, 450, 0, 0, nil, 0)

			-- Compute Broodlord Researches
			if (num_broodlord_squads >= 1) then
				self:DynamicResearch("tyranids_genestealer_bl_infiltration_research", 4, 0, 300, 0, 0, nil, 0)
			end

			-- Compute Warrior Researches
			if (num_warrior_squads >= 1) then
				self:DynamicResearch("tyranids_warrior_adrenal_glands_research", 4, 0, 300, 0, 0, nil, 0)
			end

			-- Compute Carnifex Researches
			if (num_carnifex_squads >= 2) then
				self:DynamicResearch("tyranids_carnifex_thorned_carapace_research", 4, 0, 300, 0, 0, nil, 0)
			end

			-- Compute Relic Research
			self:DynamicResearch("tyranids_relic_research_1", 4, 0, 1500, 0, 0, nil, 0)

			-- Compute Tier V Research
			self:DynamicResearch("tyranids_assimilation_research", 4, 1800, 1200, 0, 0, nil, 0)
		end

		-- Compute tier 5 researches
		if (self.tierLevel >= 5) then

			-- Compute Resource Researches
			self:DynamicResearch("tyranids_power_research_4", 5, 650, 80, 0, 0, nil, 0)
			self:DynamicResearch("tyranids_requisition_research_4", 5, 150, 550, 0, 0, nil, 0)

			-- Compute Trygon Researches
			if (self:CountSquads("tyranids_squad_trygon") >= 1) then
				self:DynamicResearch("tyranids_titan_bioplasma_research", 5, 0, 200, 0, 0, nil, 0)
			end

			-- Compute Titan Researches
			if (num_titans >= 1) then
				self:DynamicResearch("tyranids_titan_regen_research", 5, 0, 350, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_titan_melee_research", 5, 0, 350, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_titan_armor_research", 5, 0, 450, 0, 0, nil, 0)
				self:DynamicResearch("tyranids_titan_armor2_research", 5, 0, 600, 0, 0, nil, 0)
			end

			-- Compute Relic Research
			self:DynamicResearch("tyranids_relic_research_2", 5, 0, 3000, 0, 0, nil, 0)

			-- Compute Apocalypse Research
			if self:HasCriticalLocation() then
				self:DynamicResearch("tyranids_apocalypse_research", 5, 8000, 4000, 0, 0, nil, 0)
			end
 		end

		-- Compute tier 6 researches
		if (self.tierLevel >= 6) then

			-- Compute Resource Researches
			self:DynamicResearch("tyranids_power_research_5", 6, 800, 100, 0, 0, nil, 0)
			self:DynamicResearch("tyranids_requisition_research_5", 6, 300, 1100, 0, 0, nil, 0)

			-- Compute Swarmlord Research
			if (self:CountSquads("tyranids_squad_swarmlord") >= 1) then
				self:DynamicResearch("tyranids_biobomb_research", 6, 0, 2000, 0, 0, nil, 0)
			end

			-- Compute Final Researches
			self:DynamicResearch("tyranids_errection_research", 6, 0, 5000, 0, 0, nil, 0)
			self:DynamicResearch("tyranids_hivefleet_research", 6, 0, 10000, 0, 0, nil, 0) 
			self:DynamicResearch("tyranids_eatworld_research", 6, 0, 30000, 0, 0, nil, 0) 
		end	
	end
	
	-- Restrict dynamic builds to hard difficulty or higher
	if (CpuManager.AISettings.bMultiBuildings) then
	
		-- Dynamic buildings
		-- Item-Syntax: BuildingName, BuildingCount, MinTier, MinRequisition, MinPower, MinSquadCap, MinSupportCap
		self:DynamicBuild("tyranids_hq", 2, 1, 1000, 0, 0, 0)
		self:DynamicBuild("tyranids_digest_pool", 6 * self:GetBuildingCountByName("tyranids_hq"), 3, 500, 0, 0, 0)

		-- Dynamically regulate quantity of defensive buildings based on how many strats/crits/relics we have through the tiers so we avoid cluttering/bottlenecking on maps with limited points
		if (self.tierLevel >= 2 and (iRequisition >= 1500 and iPower >= 1500)) then
    			if (resource_manager:GetNumOwnedStrategicPoints() < 4) or (resource_manager:GetNumOwnedStrategicPoints() < 3 and self:HasCriticalLocation()) or (resource_manager:GetNumOwnedStrategicPoints() < 3 and self:HasRelic()) then
				self:DynamicBuild("tyranids_turret", 2, 2, 200, 0, 0, 0)
				self:DynamicBuild("tyranids_mines", 2, 2, 300, 0, 0, 0)
				self:DynamicBuild("tyranids_turret", 4, 3, 200, 0, 0, 0)
				self:DynamicBuild("tyranids_mines", 4, 3, 300, 0, 0, 0)
   			end
		else
   			if (resource_manager:GetNumOwnedStrategicPoints() > 3) or (resource_manager:GetNumOwnedStrategicPoints() > 2 and self:HasCriticalLocation()) or (resource_manager:GetNumOwnedStrategicPoints() > 2 and self:HasRelic()) then
				self:DynamicBuild("tyranids_turret", 3, 2, 200, 0, 0, 0)
				self:DynamicBuild("tyranids_mines", 3, 2, 300, 0, 0, 0)
				self:DynamicBuild("tyranids_turret", 6, 3, 200, 0, 0, 0)
				self:DynamicBuild("tyranids_mines", 6, 3, 300, 0, 0, 0)
			end
		end

		if (self.tierLevel >= 4 and (iRequisition >= 2500 and iPower >= 2500)) then
    			if (resource_manager:GetNumOwnedStrategicPoints() > 4) or (resource_manager:GetNumOwnedStrategicPoints() > 3 and self:HasCriticalLocation()) or (resource_manager:GetNumOwnedStrategicPoints() > 3 and self:HasRelic()) then
				self:DynamicBuild("tyranids_turret_bioacid", 1, 4, 600, 0, 0, 0)
				self:DynamicBuild("tyranids_turret", 8, 4, 200, 0, 0, 0)
				self:DynamicBuild("tyranids_mines", 8, 4, 300, 0, 0, 0)
				self:DynamicBuild("tyranids_turret_bioacid", 2, 4, 700, 0, 0, 0)
				self:DynamicBuild("tyranids_turret", 10, 5, 200, 0, 0, 0)
				self:DynamicBuild("tyranids_mines", 10, 5, 300, 0, 0, 0)
				self:DynamicBuild("tyranids_turret_bioacid", 3, 5, 800, 0, 0, 0)
				self:DynamicBuild("tyranids_turret", 12, 6, 200, 0, 0, 0)
				self:DynamicBuild("tyranids_mines", 12, 6, 300, 0, 0, 0)
				self:DynamicBuild("tyranids_turret_bioacid", 4, 6, 900, 0, 0, 0)
				self:DynamicBuild("tyranids_turret_bioacid", 6, 6, 1500, 0, 0, 0)
			end
		end

		-- Build additional support buildings as tiers progress
		if (self.tierLevel >= 2) then
			if (iRequisition >= 2000 and iPower >= 2000) then
				self:DynamicBuild("tyranids_gaunt_hive", 2, 2, 900, 0, 0, 0)
				self:DynamicBuild("tyranids_warrior_hive", 2, 2, 1000, 0, 0, 0)
				self:DynamicBuild("tyranids_carnifex_hive", 2, 3, 1500, 0, 0, 0)
				self:DynamicBuild("tyranids_hq", 3, 3, 1500, 0, 0, 0)
				self:DynamicBuild("tyranids_capillary_vein", 1, 3, 300, 500, 0, 0)
				self:DynamicBuild("tyranids_capillary_vein", 2, 3, 500, 700, 0, 0)
				self:DynamicBuild("tyranids_capillary_vein", 3, 4, 700, 900, 0, 0)
				self:DynamicBuild("tyranids_capillary_vein", 4, 4, 800, 1000, 0, 0)
				self:DynamicBuild("tyranids_hq", 4, 5, 2000, 0, 0, 0)
				self:DynamicBuild("tyranids_capillary_tower", 2, 5, 4000, 0, 0, 0)
				self:DynamicBuild("tyranids_relic_hive", 2, 5, 3000, 0, 0, 0)
				self:DynamicBuild("tyranids_biotitan_hive", 2, 5, 4000, 0, 0, 0)
			end
		end

		-- Build additional uber buildings in later tiers
		if (self.tierLevel >= 6) then
			if (iRequisition >= 3000 and iPower >= 3000) then
				self:DynamicBuild("tyranids_gaunt_hive", 3, 6, 900, 0, 0, 0)
				self:DynamicBuild("tyranids_warrior_hive", 3, 6, 1000, 0, 0, 0)
				self:DynamicBuild("tyranids_carnifex_hive", 3, 6, 1500, 0, 0, 0)
				self:DynamicBuild("tyranids_relic_hive", 3, 6, 3000, 0, 0, 0)
				self:DynamicBuild("tyranids_biotitan_hive", 3, 6, 4000, 0, 0, 0)
				self:DynamicBuild("tyranids_capillary_vein", 5, 6, 300, 500, 0, 0)
				self:DynamicBuild("tyranids_capillary_vein", 6, 6, 500, 700, 0, 0)
				self:DynamicBuild("tyranids_capillary_vein", 7, 6, 700, 900, 0, 0)
				self:DynamicBuild("tyranids_capillary_vein", 8, 6, 900, 1000, 0, 0)
				self:DynamicBuild("tyranids_capillary_tower", 3, 6, 6000, 0, 0, 0)
			end
		end

		-- Build additional Superweapons if we have excess resources
		if (iRequisition >= 14000) then
			self:DynamicBuild("tyranids_capillary_tower", 4, 6, 14000, 0, 0, 0)
			self:DynamicBuild("tyranids_capillary_tower", 5, 6, 16000, 0, 0, 0)
			self:DynamicBuild("tyranids_capillary_tower", 6, 6, 20000, 0, 0, 0)
		end
	end
end

-- Arkhan 01.2006: Method to check if force tech should be computed
function TyranidBuildBaseStrategy:ForceTech()

	-- Check time
	if (g_iGMT < 60 * CpuManager.ForceTech.StartTier1) then
		return false
	end
	
	-- Check resources
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )

	-- Check tier
	local iTierLevel = self:GetTierLevel()
	if (iTierLevel == 1) then
	
		-- Check resources
		if (iRequisition > 600 and iPower > 200) then
			return false
		end
	
		-- Check for warrior hive
		if (self:GetBuildingCountByName("tyranids_warrior_hive", false) >= 1) then
			return false
		end
		return true
		
	elseif (iTierLevel == 2) then

		-- Check for large hive
		if (self:GetBuildingCountByName("tyranids_carnifex_hive", false) < 1) then
			return true
		end
		
		-- Check time
		if (g_iGMT > 60 * CpuManager.ForceTech.StartTier2 and (iRequisition < 700 or iPower < 500)) then
			return true
		end
		
	elseif (iTierLevel == 3) then	

		-- Check time
		if (g_iGMT > 60 * CpuManager.ForceTech.StartTier3 and (iRequisition < 1300 or iPower < 900)) then
			return true
		end
	end
	return false
end

-- Arkhan 03.2006: Return placement type for buildings
function TyranidBuildBaseStrategy:GetPlacementType(iBuildingID)
	
	-- Check building
	if (iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_hq")) then
        	local count = self:GetBuildingCountByName("tyranids_hq", false)
		local friend = cpu_manager:FindClosestFriendPlayer()
		if friend == nil then
			-- Lone Player
                	if count == 0 and not cpu_manager:HQThreat() then
                    		return "HQ"
                	else
                    		return "Safeplace"
                	end
        	else
        		-- Has allies
                	if count > 2 or cpu_manager:HQThreat() then
 				return "HQ"
                	else
				return "Safeplace"
                	end
		end
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_gaunt_hive") or 
		iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_warrior_hive") or
		iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_carnifex_hive") or
		iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_biotitan_hive") or
		iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_relic_hive") or
		iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_digest_pool") or
		iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_capillary_tower")) then
		return "Military"
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_turret_bioacid") or
		iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_turret")) then
		return "Front2"   
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_mines")) then
		return "Mine"  
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_capillary_vein") or
		iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_xeno_hive") or
		iBuildingID == cpu_manager.stats:GetBuildingID("tyranids_biomorph_hive")) then
        	return "Baseback"	
	end
	return "Basic"
end

-- Arkhan 11.2006: Check if we have enough resources for a bigger generator
function TyranidBuildBaseStrategy:HasResourcesForBiggerGenerator(iRequisition, iPower)

	-- Check requisition
	if (iRequisition < 500) then
		return false
	end
	return true
end

function TyranidBuildBaseStrategy:HQEmergency()

	-- Check HQ count
	local iHQCount = self:GetBuildingCountByName("tyranids_hq")
	if (iHQCount >= 2) then
		return false
	end

	-- Build a second HQ if first one is severly damaged
	local bHQDamaged = false
	for oBuilding in military_manager:GetBases() do
	
		-- Check for valid building
		if (oBuilding:IsValid() and not oBuilding:IsListeningPost() and oBuilding:GetBaseName() == "tyranids_hq") then
	  
			-- Check health
			if (oBuilding:GetHealthPercentage() < 0.6) then

				-- Adjust current build program
				for iLoop1 = 1, table.getn(self.info.BuildPrograms[self.m_iCurrentBuildProgram]) do
				
					-- Search HQ entry and set build count to two
					if (self.info.BuildPrograms[self.m_iCurrentBuildProgram][iLoop1][7] == "tyranids_hq") then
						self.info.BuildPrograms[self.m_iCurrentBuildProgram][iLoop1][5] = 2
						return true
					end
				end
			end
		end
	end
	return false
end

-- Arkhan 11.2006: Virtual method for checking out relic units
function TyranidBuildBaseStrategy:RelicRequired(sName)

	-- Check name
	if (sName == "tyranids_squad_carnifex_uber") or 
		(sName == "tyranids_squad_trygon") or 
		(sName == "tyranids_squad_hierophant") or
		(sName == "tyranids_squad_hierophant_max")then
		return true
	end
	return false
end

