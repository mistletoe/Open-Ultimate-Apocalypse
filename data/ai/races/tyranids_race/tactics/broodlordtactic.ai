----------------------------------------
-- File: 'Broodlordtactic.ai'
-- Edited by Thudmeizer @ 25.05.2007

class 'BroodLordTactic' (TyranidInfantryTactic)

BroodLord = {}

function BroodLordTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Brood Lord Tactic")
end

function BroodLordTactic:InitAbilities()

	 if BroodLord.gaze_id == nil then
		BroodLord.gaze_id = cpu_manager.stats:GetAbilityID( "tyranids_hypnotic_gaze" )
	 end
end

-- Assassinate win condition -- never attack
function BroodLordTactic:IsAttacker()
	return (not cpu_manager.assassinate and self:IsCommanderAttacker())
end

-- Assassinate win condition -- never defend
function BroodLordTactic:IsDefender()
	return (not cpu_manager.assassinate and self:IsCommanderDefender())
end


function BroodLordTactic:DoAbilities()

	-- Do not perform the abilities if we need to reserve Influence
	-- if TyranidsReserveFaithResource then return end

	Ability.DoAbilityTarget( self.squad_ai, BroodLord.gaze_id, Ability.Filters.CloseSquadEnemy, 1 )

end


function BroodLordTactic:Reinforce()

        -- always try for the actual leader first
	if not self.squad_ai:IsReinforcing() then
		if self.squad_ai:CanReinforce( false, 0 ) then
		   self.squad_ai:DoReinforce( false, 0 )
		end
	end

	if not self.squad_ai:IsReinforcing() then

		-- try for different types of squad members
		local guardIndex = 0
	
		local numGuards = self.squad_ai:GetLeaderCount( guardIndex )

		-- Desired number of each leader type
		local desiredGuards = 5 
		
		local squadMax = self.squad_ai:GetMaxLeaderCount()
		if squadMax > 4 then
			-- research done - we want 9 Guards
                        desiredGuards = 9
		end

		-- Desired order of reinforcing
		if numGuards < desiredGuards then
			if self.squad_ai:CanReinforce( true, guardIndex ) then
				self.squad_ai:DoReinforce( true, guardIndex )
			end
		end
	end
end

function BroodLordTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update( self )) then
		return
	end
end