----------------------------------------
-- File: 'sistersinquisitortactic.ai'
-- Edited by Thudmeizer @ 10.08.2016

class 'SistersInquisitorTactic' (SistersInfantryTactic)

SistersInquisitor = {}

function SistersInquisitorTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Sisters Inquisitor Tactic")
end

function SistersInquisitorTactic:AutoBuildAddOn( addonSlot )
	for e in self.squad_ai:GetEntities() do
		local buildChannelSistersInquisitor = build_manager:GetBuildChannelFromID(e:GetID())
		if (buildChannelSistersInquisitor ~= nil) then
			local addOnID = buildChannelSistersInquisitor:GetItemIDAt(BuildChannelAI.PQ_AddOn, addonSlot)
			if (buildChannelSistersInquisitor:IsBuilding() == 0 and buildChannelSistersInquisitor:CanAddToQueue(BuildChannelAI.PQ_AddOn, addOnID) == BuildChannelAI.CANBUILD_Ok) then
				buildChannelSistersInquisitor:BuildAddOn(addOnID)
				return
			end
		end
	end
	return
end

function SistersInquisitorTactic:IsAttacker()
	return self:IsCommanderAttacker()
end

function SistersInquisitorTactic:IsDefender()
	return self:IsCommanderDefender()
end

-- Inquisitor is allowed to retreat even directly after a jump
function SistersInquisitorTactic:SetTarget( target, variant_type )

	self.variant_type = variant_type
	self.target = Vector3f(target)
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

function SistersInquisitorTactic:JumpAttack()
	Tactic.JumpAttack(self)
end
--[[
function SistersInquisitorTactic:CanJumpAttached()
	return true
end
]]
function SistersInquisitorTactic:InitAbilities()

	-- Init ability ID's
	if (SistersInquisitor.ascension_id == nil) then
		SistersInquisitor.ascension_id = cpu_manager.stats:GetAbilityID( "sisters_act_of_faith_ascension" )
	end

	if (SistersInquisitor.touch_id == nil) then
		SistersInquisitor.touch_id = cpu_manager.stats:GetAbilityID( "sisters_act_of_faith_an_emperors_touch" )
	end

	if (SistersInquisitor.retribution_id == nil) then
		SistersInquisitor.retribution_id = cpu_manager.stats:GetAbilityID( "sisters_act_of_faith_divine_retribution" )
	end

	if (SistersInquisitor.passion_id == nil) then
		SistersInquisitor.passion_id = cpu_manager.stats:GetAbilityID( "sisters_act_of_faith_holy_passion" )
	end

	if (SistersInquisitor.medics_id == nil) then
		SistersInquisitor.medics_id = cpu_manager.stats:GetAbilityID( "sisters_battlefield_medics" )
	end

	if (SistersInquisitor.flashbang_id == nil) then
		SistersInquisitor.flashbang_id = cpu_manager.stats:GetAbilityID( "sisters_flashbang_grenades" )
	end

	if (SistersInquisitor.krak_id == nil) then
		SistersInquisitor.krak_id = cpu_manager.stats:GetAbilityID( "sisters_krak_grenades" )
	end

	if (SistersInquisitor.phosphor_id == nil) then
		SistersInquisitor.phosphor_id = cpu_manager.stats:GetAbilityID( "sisters_phosphor_grenades" )
	end

	if (SistersInquisitor.smoke_id == nil) then
		SistersInquisitor.smoke_id = cpu_manager.stats:GetAbilityID( "sisters_smoke_grenades" )
	end

	if (SistersInquisitor.run_id == nil) then
		SistersInquisitor.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function SistersInquisitorTactic:DoAbilities()

	-- We are dying, lower requisites for attacks
	if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.4) then

		-- Act of Faith - Ascension: Summons non-player controlled angels to fight for a short period (Faith cost: 200)
		Ability.DoAbilityArea( self.squad_ai, SistersInquisitor.ascension_id, Ability.Filters.CloseEnemy, 10, 5 )
	else
		Ability.DoAbilityArea( self.squad_ai, SistersInquisitor.ascension_id, Ability.Filters.CloseEnemy, 10, 10 )
	end

	-- Ranged squads do extra damage (Faith cost: 165) 
	if (self.squad_ai:IsInCombat() and self.squad_ai:IsAttacking()) then

		if (self.squad_ai:CanDoAbility(SistersInquisitor.touch_id)) then
			self.squad_ai:DoSpecialAbility(SistersInquisitor.touch_id) 
		end
	end

	-- Enemies take additional damage when they attack the squad (Faith cost: 120)
	if (self.squad_ai:IsUnderAttack()) then

		if (self.squad_ai:CanDoAbility(SistersInquisitor.retribution_id)) then
			self.squad_ai:DoSpecialAbility(SistersInquisitor.retribution_id) 
		end
	end

	-- Recover morale immediately (Faith cost: 60)
	if (self.squad_ai:IsBroken()) then

		 if (self.squad_ai:CanDoAbility(SistersInquisitor.passion_id)) then
			self.squad_ai:DoSpecialAbility(SistersInquisitor.passion_id) 
		end
	end

	-- Heals squad (Faith cost: 50)
	if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.4) then
	
		if (self.squad_ai:CanDoAbility(SistersInquisitor.medics_id)) then
			self.squad_ai:DoSpecialAbility(SistersInquisitor.medics_id) 
		end
	end

	-- Throw flashbang grenades!
	if (self.squad_ai:CanDoAbility( SistersInquisitor.flashbang_id )) then
		Ability.DoAbilityPos( self.squad_ai, SistersInquisitor.flashbang_id, Ability.Filters.CloseSquadEnemy, 4 )
		Ability.DoAbilityPos( self.squad_ai, SistersInquisitor.flashbang_id, Ability.Filters.CloseCommanderEnemy, 1 )
		Ability.DoAbilityPos( self.squad_ai, SistersInquisitor.flashbang_id, Ability.Filters.CloseMonsterEnemy, 2 )
	end

	-- Throw krak grenades!
	if (self.squad_ai:CanDoAbility( SistersInquisitor.krak_id )) then
		Ability.DoAbilityTarget( self.squad_ai, SistersInquisitor.krak_id, Ability.Filters.CloseVehicleEnemy, 1 )
		Ability.DoAbilityTargetEntity( self.squad_ai, SistersInquisitor.krak_id, Ability.EntityFilters.CloseBaseEntityEnemy, 1 )
	end

	-- Throw phosphor grenades!
	if (self.squad_ai:CanDoAbility( SistersInquisitor.phosphor_id )) then
		Ability.DoAbilityPos( self.squad_ai, SistersInquisitor.phosphor_id, Ability.EntityFilters.CloseBaseEntityEnemy, 1 )
		Ability.DoAbilityPos( self.squad_ai, SistersInquisitor.phosphor_id, Ability.Filters.CloseMonsterEnemy, 2 )
		Ability.DoAbilityPos( self.squad_ai, SistersInquisitor.phosphor_id, Ability.Filters.CloseInfantryEnemy, 4 )
	end

	-- Check if we can launch smoke
	if (self.squad_ai:CanDoAbility( SistersInquisitor.smoke_id )) then
	
		-- Search a squad
		local iRange = self.squad_ai:GetAbilityRange( SistersInquisitor.smoke_id )
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
			self.squad_ai:DoSpecialAbilitySquad( SistersInquisitor.smoke_id, oUnit:GetSquad() )
		end
	end

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( SistersInquisitor.run_id )) then
			self.squad_ai:DoSpecialAbility( SistersInquisitor.run_id )
		end
	end
end

function SistersInquisitorTactic:Upgrade()

--	self:AutoBuildAddOn(0)	--	[addon_01] addon_commanders_cap_squad			4/1
--	self:AutoBuildAddOn(1)	-- 	[addon_02] addon_commanders_cap_support			5/1
--	self:AutoBuildAddOn(2)	-- 	[addon_03] addon_commanders_cap_faith			6/1
--	self:AutoBuildAddOn(3)	-- 	[addon_04] addon_commanders_increase_production		5/1
--	self:AutoBuildAddOn(4)	-- 	[addon_05] addon_commanders_increase_health		6/1
--	self:AutoBuildAddOn(5)	-- 	[addon_06] addon_commanders_increase_morale		6/1
--	self:AutoBuildAddOn(6)	-- 	[addon_07] addon_commanders_cap_squad_2			6
--	self:AutoBuildAddOn(7)	-- 	[addon_08] addon_commanders_cap_support_2		8
--	self:AutoBuildAddOn(8)	-- 	[addon_09] addon_commanders_increase_production_2	8

   	if (cpu_manager:GetTierLevel() <= 4) then 
		local addon_random_commander_upgrades = math.random( 0,8 )	-- Randomize these addons
		self:AutoBuildAddOn(addon_random_commander_upgrades)
	end

   	if (cpu_manager:GetTierLevel() > 4) then 
		self:AutoBuildAddOn(2)		-- Always build in late tiers to support the construction of Titans and late game ubers.
	end
end

function SistersInquisitorTactic:Reinforce()

	if not self.squad_ai:IsReinforcing() then

		-- Always try for the actual leader first
		if (self.squad_ai:CanReinforce( false, 0 )) then
			self.squad_ai:DoReinforce( false, 0 )
			return
		end

		-- Try for different types of squad members
		local crusaderIndex = 0
		local cherubIndex = 1
		local curiaIndex = 2
		local missionaryIndex = 3
	
		-- Get current leader count
		local numCrusaders = self.squad_ai:GetLeaderCount( crusaderIndex )
		local numCherubs = self.squad_ai:GetLeaderCount( cherubIndex)
		local numCurias = self.squad_ai:GetLeaderCount( curiaIndex )
		local numMissionaries = self.squad_ai:GetLeaderCount( missionaryIndex )

		-- Desired number of each leader type
		local desiredCrusaders = math.random(0,1)
		local desiredCherubs = math.random(0,1)
		local desiredCurias = math.random(0,1)
		local desiredMissionaries = math.random(0,1)

		-- Desired order of reinforcing
		if (numCrusaders < desiredCrusaders) then
			if self.squad_ai:CanReinforce( true, crusaderIndex ) then
				self.squad_ai:DoReinforce( true, crusaderIndex )
			end
		elseif (numCherubs < desiredCherubs) then
			if self.squad_ai:CanReinforce( true, cherubIndex ) then
				self.squad_ai:DoReinforce( true, cherubIndex )
			end
		elseif (numCurias < desiredCurias) then
			if self.squad_ai:CanReinforce( true, curiaIndex ) then
				self.squad_ai:DoReinforce( true, curiaIndex )
			end
		elseif (numMissionaries < desiredMissionaries) then
			if self.squad_ai:CanReinforce( true, missionaryIndex ) then
				self.squad_ai:DoReinforce( true, missionaryIndex )
			end
		end
	end
end

function SistersInquisitorTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update( self )) then
		return
	end
--[[			
	-- Attach to melee in tier3+
	if (cpu_manager:GetTierLevel() > 2) then
		
		if (self:TryAttachSquad(true, true, 50, 100, nil) ~= nil) then
			return
		end
	end

	if (self:TryAttachSquad(false, true, 50, 100, self.m_fCommanderAttachHealth) == nil) then
		self:TryAttachSquadMelee()
	end
]]
	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end
