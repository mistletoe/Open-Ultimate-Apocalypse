----------------------------------------
-- File: 'sisterscapitoltactic.ai'
-- Edited by Thudmeizer @ 20.10.2016

class 'SistersCapitolTactic' (SistersVehicleTactic)

SistersCapitol = {}

function SistersCapitolTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Sisters Capitol Tactic")
	
	-- Vehicle is a light transport
	self.m_iTransportVehicle = 2
	self.m_iTransportSlots = 6

	SistersCapitol.detectDelay = -1
end

function SistersCapitolTactic:AlwaysAttack()
	return true
end

function SistersCapitolTactic:InitAbilities()

	-- Init ability ID's
	if (SistersCapitol.repair_id == nil) then
		SistersCapitol.repair_id = cpu_manager.stats:GetAbilityID( "all_autorepair" )
	end
	if (SistersCapitol.deploy_id == nil) then
		SistersCapitol.deploy_id = cpu_manager.stats:GetAbilityID( "sisters_capitol_imperialis_deploy" )
	end
	if (SistersCapitol.detection_id == nil) then
		SistersCapitol.detection_id = cpu_manager.stats:GetAbilityID( "sisters_detection_field_capitol_imperialis" )
	end
end

function SistersCapitolTactic:DoAbilities()
	
	-- Built vehicle are deployed immediately
	if (self.squad_ai:GetHealthPercentage() > 0.5 and self.squad_ai:CanDoAbility(SistersCapitol.deploy_id)) then
            	for e in self.squad_ai:GetEntities() do
               	local buildChannel = build_manager:GetBuildChannelFromID(e:GetID())
                	if (buildChannel ~= nil) then
                		 if buildChannel:IsBuilding() ~= 0 then
					-- Unload newly built vehicle
                       			self.squad_ai:DoSpecialAbility(SistersCapitol.deploy_id)
                        		break
                    		end
                	end
            	end
	end

	-- Try to activate detection field
	if (self.squad_ai:CanDoAbility(SistersCapitol.detection_id)) then
	
		local iRange = self.squad_ai:GetAbilityRange(SistersCapitol.detection_id)
		local oSquad = Ability.Filters.CloseInfiltratedEnemy(self.squad_ai:GetPosition(), iRange, 1)
		
		if (oSquad ~= nil) then
			if(SistersCapitol.detectDelay == -1) then
				SistersCapitol.detectDelay = math.max(0, 30)
				SistersCapitol.detectTime = g_iGMT + SistersCapitol.detectDelay
			end	
			
			-- Don't detect for a random time between 0 and 30 seconds
			if(g_iGMT < SistersCapitol.detectTime) then
				return
			end

			-- Only try to detect if the infiltrated unit is attacking
			if (oSquad:IsAttacking()) then
				local pos = Vector3f( oSquad:GetPosition() )
				pos.x = pos.x + math.random(-15,15)
				pos.z = pos.z + math.random(-15,15)
				
				-- Do the ability on a general area and not on directly top of the unit
				self.squad_ai:DoSpecialAbilityPos( SistersCapitol.detection_id, pos )

				SistersCapitol.detectDelay = -1
			end
		else 
			--if no infiltrated units within range, scan other enemies
			local oSquad = Ability.Filters.CloseEnemy(self.squad_ai:GetPosition(), iRange, 1)
			if(SistersCapitol.detectDelay == -1) then
				SistersCapitol.detectDelay = math.max(0, 30)
				SistersCapitol.detectTime = g_iGMT + SistersCapitol.detectDelay
			end	
			
			-- Don't detect for a random time between 0 and 30 seconds
			if(g_iGMT < SistersCapitol.detectTime) then
				return
			end

			if (oSquad ~= nil) then
				local pos = Vector3f( oSquad:GetPosition() )
				pos.x = pos.x + math.random(-15,15)
				pos.z = pos.z + math.random(-15,15)
				
				-- Do the ability on a general area and not on directly top of the unit
				self.squad_ai:DoSpecialAbilityPos( SistersCapitol.detection_id, pos )

				SistersCapitol.detectDelay = -1
			end
		end
	end

	-- Vehicle Repair!
	if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.4) then

		if (self.squad_ai:CanDoAbility( SistersCapitol.repair_id )) then
			self.squad_ai:DoSpecialAbility( SistersCapitol.repair_id )
		end
	end

	-- Call standard method
	SistersVehicleTactic.DoAbilities(self)
end

function SistersCapitolTactic:Update()

	-- Choose specific target for attacking
	local squadPosition = self.squad_ai:GetPosition()
    	-- First, perform a check to see if we DO have a reason to use it, to avoid unnecessary function callings
    	if cpu_manager.terrain_analyzer:HasThreat(squadPosition, 200) then
        	-- OK, now find a potential target building within desired range
        	local targetBuilding = self:FindClosestEnemyBuildingToAttack(squadPosition, 200)
        	if targetBuilding ~= nil then
       			self:DoAttackBase(targetBuilding)
        	else 
			-- However, if no enemy building is in range, hunt down all other enemy types instead!
			local targetSquad = self:FindClosestEnemySquadPriority( self.squad_ai:GetPosition(), 100, {UnitStatsAI.UC_VehicleHigh, UnitStatsAI.UC_HeavyInfantryHigh, UnitStatsAI.UC_MonsterHigh, UnitStatsAI.UC_Commander, UnitStatsAI.UC_HeavyInfantryMed, UnitStatsAI.UC_VehicleMed, UnitStatsAI.UC_MonsterMed, UnitStatsAI.UC_LightInfantryHigh})
                   	if targetSquad ~= nil then
                         	self:DoAttackSquad(targetSquad)
            		end
       		end
	end
end

function SistersCapitolTactic:DoAttackSquad( enemySquadAI )

	dbAssert( enemySquadAI ~= nil )
    
    	for entity in enemySquadAI:GetEntities() do
        	self.squad_ai:DoDefault(entity)
        	break
    	end
    	aitrace("   DoAttackSquad "..enemySquadAI:GetSquadName().."_"..tostring(enemySquadAI:GetID()))
end

function SistersCapitolTactic:DoAttackBase( enemyBaseAI )

    	dbAssert( enemyBaseAI ~= nil )
    
    	self.squad_ai:DoDefault( enemyBaseAI:GetEntity() )
    	aitrace("   DoAttackBase "..enemyBaseAI:GetBaseName().."_"..tostring(enemyBaseAI:GetID()))
end

-- Returns a non-infiltrating enemy squad near "from_pos" within "min_displacement". Priority array include the AI-defined armour types. If no priority_array defined, returns closest squad REGARDLESS armour type.
-- NOTE: NOT used for buildings! Only for squads.
function SistersCapitolTactic:FindClosestEnemySquadPriority( from_pos, min_displacement, priority_array )
	local min_displacement_sqr = min_displacement * min_displacement
    	local candidate_squads = {}
    	-- First, store all enemy squads on the map that fulfil the requirements, their armour type, and their distance form the from_pos
    	for player in cpu_manager.stats:GetPlayerStats() do
        	if cpu_manager.player_stats:IsEnemy(player) and not player:IsPlayerDead() then
            		-- Get candidate enemy squads
            		for oSquad in player:GetSquads() do
                		if oSquad ~= nil and oSquad:IsValid() then
                    			if not oSquad:IsInfiltrating() then
                       				local squad_pos = oSquad:GetPosition()
                        			local squad_dis = distance_sqr( squad_pos, from_pos )
                        			if (squad_dis <= min_displacement_sqr) then
                            				local squad_tp = oSquad:GetStats():GetClass()
                            				table.insert(candidate_squads,{oSquad,squad_tp,squad_dis})
                        			end
                   			end
                		end
            		end
        	end
    	end
    	-- If no squads found, return nil
    	local squads_number = table.getn(candidate_squads)
    	if squads_number == 0 then
        	return nil
    	end
    	-- Sort the array, so that we get from closest to most remote.
   	 table.sort(candidate_squads, function(oItem1, oItem2) return oItem1[3] < oItem2[3] end)
	-- If there is no priority array, return the closest squad
    	if priority_array == nil or priority_array == {} then
        	return candidate_squads[1][1]
    	end
    	for armour_types = 1, table.getn(priority_array) do
        	for i = 1, squads_number do
            		if priority_array[armour_types] == candidate_squads[i][2] then
                		return candidate_squads[i][1]
            		end
        	end
    	end
    	-- No squad of the predesignated types found. Return nil
	return nil
end

-- Returns a non-infiltrating enemy building at "from_pos" within "min_displacement". Priority is lowest to highest distance. Finished buildings have priority over unbuilt ones. If no built/unbuilt found, will return nil.
function SistersCapitolTactic:FindClosestEnemyBuildingToAttack( from_pos, min_displacement )
	local min_displacement_sqr = min_displacement * min_displacement
    	local candidate_bases = {}
    		for player in cpu_manager.stats:GetPlayerStats() do
        		if cpu_manager.player_stats:IsEnemy(player) and not player:IsPlayerDead() then
            		-- Get candidate enemy buildings
            			for oBase in player:GetBases() do
                			if oBase ~= nil and oBase:IsValid() then
                    				if not oBase:IsInfiltrating() then
                        			local base_pos = oBase:GetPosition()
                        			local base_dis = distance_sqr( base_pos, from_pos )
                        				if ( base_dis <= min_displacement_sqr) then
                            					table.insert(candidate_bases,{oBase,base_dis,oBase:IsConstructionDone()})
                        			end
                    			end
                		end
            		end
        	end
	end
	-- If no bases found, return nil
    	local bases_number = table.getn(candidate_bases)
    	if bases_number == 0 then
        	return nil
   	end
	-- Sort the array, so that we get from closest to most remote.
    	table.sort(candidate_bases, function(oItem1, oItem2) return oItem1[2] < oItem2[2] end)
    	-- First search for already constructed buildings, return the closest
    	for i = 1, bases_number do
        	if candidate_bases[i][3] then
            		return candidate_bases[i][1]
        	end
    	end
    	-- All buildings are under construction, none is built. Return the closest unbuilt
    	return candidate_bases[1][1]
end