----------------------------------------
-- File: 'specialweaponstactic.ai'
-- Edited by Thudmeizer	@ 29.02.2016

class 'SpecialWeaponsTactic' (GuardInfantryTactic)

SpecialWeapons = {}

function SpecialWeaponsTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Special Weapons Tactic")
	
	-- Squad is able to occupy bunkers
	self.m_bBunkerSquad = true
end

function SpecialWeaponsTactic:InitAbilities()

	-- Init ability ID's
	if (SpecialWeapons.demo_id == nil) then
		SpecialWeapons.demo_id = cpu_manager.stats:GetAbilityID( "guard_demo_charge" )	
	end
	if (SpecialWeapons.detonate_id == nil) then
		SpecialWeapons.detonate_id = cpu_manager.stats:GetAbilityID( "guard_demo_charge_detonate" )	
	end
	if (SpecialWeapons.flashbang_id == nil) then
		SpecialWeapons.flashbang_id = cpu_manager.stats:GetAbilityID( "guard_flashbang_grenades" )	
	end
	if (SpecialWeapons.frag_id == nil) then
		SpecialWeapons.frag_id = cpu_manager.stats:GetAbilityID( "guard_frag_grenades" )	
	end
	if (SpecialWeapons.krak_id == nil) then
		SpecialWeapons.krak_id = cpu_manager.stats:GetAbilityID( "guard_krak_grenades" )	
	end
	if (SpecialWeapons.smoke_id == nil) then
		SpecialWeapons.smoke_id = cpu_manager.stats:GetAbilityID( "guard_smoke_grenades" )	
	end
	if (SpecialWeapons.bolster_id == nil) then
		SpecialWeapons.bolster_id = cpu_manager.stats:GetAbilityID( "guard_bolster_defenses" )	
	end
	if (SpecialWeapons.run_id == nil) then
		SpecialWeapons.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function SpecialWeaponsTactic:DoAbilities()

	-- Place Demo Charge
	if (self.squad_ai:CanDoAbility(SpecialWeapons.demo_id)) then 
		Ability.DoAbilityPos( self.squad_ai, SpecialWeapons.demo_id, Ability.Filters.CloseVehicleEnemy, 1 )
		Ability.DoAbilityPos( self.squad_ai, SpecialWeapons.demo_id, Ability.Filters.CloseSquadEnemy, 4 )
		Ability.DoAbilityPos( self.squad_ai, SpecialWeapons.demo_id, Ability.EntityFilters.CloseBaseEntityEnemy, 2)
	end

	-- Detonate Charge!
	if (self.squad_ai:CanDoAbility(SpecialWeapons.detonate_id)) then 
		Ability.DoAbilityPos( self.squad_ai, SpecialWeapons.detonate_id, Ability.Filters.CloseVehicleEnemy, 1 )
		Ability.DoAbilityPos( self.squad_ai, SpecialWeapons.detonate_id, Ability.Filters.CloseSquadEnemy, 4 )
		Ability.DoAbilityPos( self.squad_ai, SpecialWeapons.detonate_id, Ability.EntityFilters.CloseBaseEntityEnemy, 2)
	end

	-- Throw flashbang grenades!
	Ability.DoAbilityTarget(self.squad_ai, SpecialWeapons.flashbang_id, Ability.Filters.CloseSquadEnemy, 6)

	-- Throw frag grenades!
	Ability.DoAbilityTarget(self.squad_ai, SpecialWeapons.frag_id, Ability.Filters.CloseInfantryEnemy, 4)

	-- Throw melta grenades!
	Ability.DoAbilityTarget(self.squad_ai, SpecialWeapons.krak_id, Ability.Filters.CloseVehicleEnemy, 1)

	-- Check if we can launch smoke
	if (self.squad_ai:CanDoAbility(SpecialWeapons.smoke_id)) then
	
		-- Search a squad
		local iRange = self.squad_ai:GetAbilityRange(SpecialWeapons.smoke_id)
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
			self.squad_ai:DoSpecialAbilitySquad(SpecialWeapons.smoke_id, oUnit:GetSquad())
		end
	end

	-- Check if we can Bolster Defenses
	if (self.squad_ai:CanDoAbility(SpecialWeapons.bolster_id)) then
	
		-- Search a squad
		local iRange = self.squad_ai:GetAbilityRange(SpecialWeapons.bolster_id)
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
			self.squad_ai:DoSpecialAbilitySquad(SpecialWeapons.bolster_id, oUnit:GetSquad())
		end
	end

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( SpecialWeapons.run_id )) then
			self.squad_ai:DoSpecialAbility( SpecialWeapons.run_id )
		end
	end
end

function SpecialWeaponsTactic:Reinforce()

	if not self.squad_ai:IsReinforcing() then

		-- Always try for the actual leader first
		if (self.squad_ai:CanReinforce( false, 0 )) then
			self.squad_ai:DoReinforce( false, 0 )
			return
		end

		-- Try for different types of squad members
		local heavyweaponIndex = 0
		local guardsmanIndex = 1
		local bannerIndex = 2
		local medicIndex = 3
	
		-- Get current leader count
		local numHeavyweapons = self.squad_ai:GetLeaderCount( heavyweaponIndex )
		local numGuardsmen = self.squad_ai:GetLeaderCount( guardsmanIndex)
		local numBanners = self.squad_ai:GetLeaderCount( bannerIndex )
		local numMedics = self.squad_ai:GetLeaderCount( medicIndex )

		-- Desired number of each leader type
		local desiredHeavyweapons = math.random(0,1)
		local desiredGuardsmen = math.random(0,1)
		local desiredBanners = math.random(0,1)
		local desiredMedics = math.random(0,1)

		-- Desired order of reinforcing
		if (numHeavyweapons < desiredHeavyweapons) then
			if self.squad_ai:CanReinforce( true, heavyweaponIndex ) then
				self.squad_ai:DoReinforce( true, heavyweaponIndex )
			end
		elseif (numGuardsmen < desiredGuardsmen) then
			if self.squad_ai:CanReinforce( true, guardsmanIndex ) then
				self.squad_ai:DoReinforce( true, guardsmanIndex )
			end
		elseif (numBanners < desiredBanners) then
			if self.squad_ai:CanReinforce( true, bannerIndex ) then
				self.squad_ai:DoReinforce( true, bannerIndex )
			end
		elseif (numMedics < desiredMedics) then
			if self.squad_ai:CanReinforce( true, medicIndex ) then
				self.squad_ai:DoReinforce( true, medicIndex )
			end
		end
	end
end
