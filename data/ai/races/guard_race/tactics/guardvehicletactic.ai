----------------------------------------
-- File: 'guardvehicletactic.ai'
-- Edited by Thudmeizer		@ 11.11.2016

class 'GuardVehicleTactic' (VehicleTactic)

function GuardVehicleTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Guard Vehicle Tactic")
	
	local sSquadName = squad_ai:GetSquadName()
	if (sSquadName == "guard_squad_baneblade" or 
		sSquadName == "guard_squad_firesword" or
		sSquadName == "guard_squad_shadowsword" or
		sSquadName == "guard_squad_stormlord" or
		sSquadName == "guard_squad_stormsword" or
		sSquadName == "guard_squad_stormhammer" or
		sSquadName == "guard_squad_stormblade") then

		-- Vehicles can deepstrike
		self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID( "guard_mars_pattern" )
	end

	-- Set Stuck Unit Positions
	self.initialPosition = self.squad_ai:GetPosition()
	self.isStuck = false
end

-- Check if the vehicle should dance away in melee
function GuardVehicleTactic:CheckVehicleDance(sName)

	if (sName == "guard_squad_sentinel" or
		sName == "guard_squad_hellhound" or
		sName == "guard_squad_chimera" or
		sName == "guard_squad_chimera_kronus" or
		sName == "guard_squad_basilisk" or
		sName == "guard_squad_hydra_aa_tank" or
		sName == "guard_squad_griffon_mortar" or
		sName == "guard_squad_laser_destroyer" or
		sName == "guard_squad_deathstrike_missile_launcher" or
		sName == "guard_squad_lemanruss" or
		sName == "guard_squad_lemanruss_annihilator" or
		sName == "guard_squad_lemanruss_conqueror" or
		sName == "guard_squad_lemanruss_exterminator" or
		sName == "guard_squad_lemanruss_executioner" or
		sName == "guard_squad_lemanruss_eradicator" or
		sName == "guard_squad_lemanruss_demolisher" or
		sName == "guard_squad_lemanruss_inferno" or
		sName == "guard_squad_lemanruss_punisher" or
		sName == "guard_squad_lemanruss_murderer" or
		sName == "guard_squad_lemanruss_vanquisher" or
		sName == "guard_squad_lemanruss_vanquisher_command") then
		return true
	end
	return false
end

function GuardVehicleTactic:DoAbilities()

	-- Check if we can launch smoke
	local smoke_id = cpu_manager.stats:GetAbilityID( "guard_smoke_launchers" )
	if (self.squad_ai:CanDoAbility(smoke_id)) then
	
		-- Search a squad
		local iRange = self.squad_ai:GetAbilityRange(smoke_id)
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
			self.squad_ai:DoSpecialAbilitySquad(smoke_id, oUnit:GetSquad())
		end
	end

	-- Check if we can use Nervegas Launchers
	local teargas_id = cpu_manager.stats:GetAbilityID( "guard_nervegas_launchers" )	
	if (self.squad_ai:CanDoAbility(teargas_id)) then
	
		local iRange = self.squad_ai:GetAbilityRange(teargas_id)
		local oSquad = Ability.Filters.CloseEnemy(self.squad_ai:GetPosition(), iRange, 6)
		if (oSquad ~= nil) then		
			if (oSquad:IsInCombat() or oSquad:IsCapturing()) then
				self.squad_ai:DoSpecialAbilitySquad(teargas_id, oSquad:GetSquad())
			end
		end
	end

	-- RAM!!! - The vehicle will sacrifice combat accuracy in exchange for extra speed and the ability to knock down infantry wherever the vehicle goes.
	-- Vehicle gains a 60% movement speed increase and will knock down infantry continuously on contact.
	local rammingspeed_id = cpu_manager.stats:GetAbilityID( "all_bumpertank" )
	if (self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) then
		if (self.squad_ai:CanDoAbility( rammingspeed_id )) then
			self.squad_ai:DoSpecialAbility( rammingspeed_id )
		end
	end	
	
	-- Jump squads' unstuck code call.
	-- Checks jump-able stuck squads, and force them to jump nearby
   	if self.squad_ai:CanJump() then
        	self:SolveStuckCase()
	end

	-- Call standard method
	VehicleTactic.DoAbilities(self)
end

-- Unstuck Code
function GuardVehicleTactic:SolveStuckCase()

	local iPosition = self.squad_ai:GetPosition()
    	if iPosition.x ~= self.initialPosition.x or iPosition.z ~= self.initialPosition.z then
        	self.isStuck = false
    	elseif (self.squad_ai:IsInStateMove() or self.squad_ai:IsInStateAttackMove()) and not self.squad_ai:IsInCombat()
    		and iPosition.x == self.initialPosition.x and iPosition.z == self.initialPosition.z then
        	self.isStuck = true
    	end
    	if self.isStuck then
        	self:ForceSquadJumpNear(iPosition)
	end
    	self.initialPosition = self.squad_ai:GetPosition()
end

function GuardVehicleTactic:ForceSquadJumpNear(pos)

	-- Try to jump somewhere near, perform 16 checks for a viable position
    	local jumpDisSqr = sqr(self.squad_ai:GetJumpDistance())
    	for iLoop1 = 1, 16 do
        	-- Create a jump position
        	local vJumpPosition = pos
        	local vDir = cpu_manager:GetDirectionToEnemy(pos)
        	vJumpPosition.x = vJumpPosition.x + vDir.x * math.random(-20, 50)
        	vJumpPosition.z = vJumpPosition.z + vDir.z * math.random(-20, 50)
        	-- Check if target position is in range and if unit is able to jump to target position
        	local iDistance = distance_sqr(vJumpPosition, pos)
        	if iDistance < jumpDisSqr and self.squad_ai:CanJumpToPosition(vJumpPosition) then
            		-- Jump to position
            		self.squad_ai:DoJump(vJumpPosition)
            		self.last_jump = g_iGMT
            		self.m_iLastGatherMove = self.last_jump - 10
            		return
		end
	end
end
