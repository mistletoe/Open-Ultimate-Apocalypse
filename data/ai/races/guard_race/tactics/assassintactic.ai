----------------------------------------
-- File: 'assassintactic.ai'
-- Edited by Thudmeizer @ 29.02.2016

class 'AssassinTactic' (GuardInfantryTactic)

Assassin = {}

function AssassinTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Assassin Tactic")

	-- Squad is able to occupy bunkers
	self.m_bBunkerSquad = true
end

function AssassinTactic:IsAttacker()	
	return self:IsCommanderAttacker()
end

function AssassinTactic:IsDefender()
	return self:IsCommanderDefender()
end

function AssassinTactic:InitAbilities()

	-- Init ability ID's
	if (Assassin.assassinate_id == nil) then
		Assassin.assassinate_id = cpu_manager.stats:GetAbilityID( "guard_assassin_assassinate" )
	end
	if (Assassin.auspex_id == nil) then
		Assassin.auspex_id = cpu_manager.stats:GetAbilityID( "guard_auspex" )	
	end
	if (Assassin.demo_id == nil) then
		Assassin.demo_id = cpu_manager.stats:GetAbilityID( "guard_demo_charge" )	
	end
	if (Assassin.detonate_id == nil) then
		Assassin.detonate_id = cpu_manager.stats:GetAbilityID( "guard_demo_charge_detonate" )	
	end
	if (Assassin.frag_id == nil) then
		Assassin.frag_id = cpu_manager.stats:GetAbilityID( "guard_frag_grenades" )	
	end
	if (Assassin.nervegas_id == nil) then
		Assassin.nervegas_id = cpu_manager.stats:GetAbilityID( "guard_nervegas_grenades" )	
	end
	if (Assassin.smoke_id == nil) then
		Assassin.smoke_id = cpu_manager.stats:GetAbilityID( "guard_smoke_grenades" )	
	end
	if (Assassin.run_id == nil) then
		Assassin.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function AssassinTactic:DoAbilities()

	-- Check if I can assassinate
	Ability.DoAbility( self.squad_ai, Assassin.assassinate_id, Ability.Filters.IsInCombat )

	-- Execuate auspex to detect infiltrators!
	Ability.DoAbilityArea(self.squad_ai, Assassin.auspex_id, Ability.Filters.CloseInfiltrator, 40, 2)

	-- Place Demo Charge
	if (self.squad_ai:CanDoAbility(Assassin.demo_id)) then 
		Ability.DoAbilityPos( self.squad_ai, Assassin.demo_id, Ability.Filters.CloseVehicleEnemy, 1 )
		Ability.DoAbilityPos( self.squad_ai, Assassin.demo_id, Ability.Filters.CloseSquadEnemy, 4 )
		Ability.DoAbilityPos( self.squad_ai, Assassin.demo_id, Ability.EntityFilters.CloseBaseEntityEnemy, 2)
	end

	-- Detonate Charge!
	if (self.squad_ai:CanDoAbility(Assassin.detonate_id)) then 
		Ability.DoAbilityPos( self.squad_ai, Assassin.detonate_id, Ability.Filters.CloseVehicleEnemy, 1 )
		Ability.DoAbilityPos( self.squad_ai, Assassin.detonate_id, Ability.Filters.CloseSquadEnemy, 4 )
		Ability.DoAbilityPos( self.squad_ai, Assassin.detonate_id, Ability.EntityFilters.CloseBaseEntityEnemy, 2)
	end

	-- Throw frag grenades!
	Ability.DoAbilityTarget(self.squad_ai, Assassin.frag_id, Ability.Filters.CloseInfantryEnemy, 4)

	-- Throw nerve gas grenades!
	Ability.DoAbilityTarget(self.squad_ai, Assassin.nervegas_id, Ability.Filters.CloseSquadEnemy, 9)

	-- Check if we can launch smoke
	if (self.squad_ai:CanDoAbility(Assassin.smoke_id)) then
	
		-- Search a squad
		local iRange = self.squad_ai:GetAbilityRange(Assassin.smoke_id)
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
			self.squad_ai:DoSpecialAbilitySquad(Assassin.smoke_id, oUnit:GetSquad())
		end
	end

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( Assassin.run_id )) then
			self.squad_ai:DoSpecialAbility( Assassin.run_id )
		end
	end
end

function AssassinTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update(self)) then
		return
	end
	
	-- Attach to melee in tier3+
	if (cpu_manager:GetTierLevel() > 2) then
	
		if (self:TryAttachSquad(true, true, 50, 100, nil) ~= nil) then
			return
		end
	end
	if (self:TryAttachSquad(false, true, 50, 100, self.m_fCommanderAttachHealth) == nil) then
		self:TryAttachSquadMelee()
	end
end
