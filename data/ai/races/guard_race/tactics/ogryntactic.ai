----------------------------------------
-- File: 'ogryntactic.ai'
-- Edited by Thudmeizer	@ 15.09.2016

class 'OgrynTactic' (GuardInfantryTactic)

Ogryn = {}

function OgrynTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Ogryn Tactic")

	-- Squad is able to occupy bunkers
	self.m_bBunkerSquad = true
end

function OgrynTactic:InitAbilities()

	-- Init ability ID's
	if (Ogryn.bolster_id == nil) then
		Ogryn.bolster_id = cpu_manager.stats:GetAbilityID( "guard_bolster_defenses" )	
	end
--[[
	if (Ogryn.fanatical_id == nil) then
		Ogryn.fanatical_id = cpu_manager.stats:GetAbilityID( "guard_priest_fanatical" )	
	end
]]
	if (Ogryn.run_id == nil) then
		Ogryn.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function OgrynTactic:DoAbilities()

	-- Check if we can Bolster Defenses
	if (self.squad_ai:CanDoAbility(Ogryn.bolster_id)) then
	
		-- Search a squad
		local iRange = self.squad_ai:GetAbilityRange(Ogryn.bolster_id)
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 150) then
			self.squad_ai:DoSpecialAbilitySquad(Ogryn.bolster_id, oUnit:GetSquad())
		end
	end
--[[
	-- No fanatism while retreating
	if (not self:IsMoving() and self.squad_ai:IsInCombat()) then
		Ability.DoAbility( self.squad_ai, Ogryn.fanatical_id, Ability.Filters.IsInCombat ) 
	end
]]
	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( Ogryn.run_id )) then
			self.squad_ai:DoSpecialAbility( Ogryn.run_id )
		end
	end
	
	-- Call basic DoAbilities methods
	GuardInfantryTactic.DoAbilities(self)
end

function OgrynTactic:Upgrade()

	-- If I am broken, don't upgrade!
	if (self:IsAffectedByMorale() and self.squad_ai:IsBroken()) then
		return
	end
	
	-- If there are no ressources available, don't upgrade!
	if (not Tactic.Options.can_reinforce) then
		return
	end
  
	-- Only upgrade if not reinforcing
	if (not self.squad_ai:IsReinforcing()) then
	
		if (self.squad_ai:HasUpgradableTrooper()) then
			local class_type = cpu_manager:FindClosestEnemyPlayer():GetMajorityClassType()
			self.squad_ai:DoBestUpgrade( class_type )
		end
	end
end
--[[
function OgrynTactic:Reinforce()

	--always try for the actual leader first
	if not self.squad_ai:IsReinforcing() then
		if self.squad_ai:CanReinforce( false, 0 ) then
		   self.squad_ai:DoReinforce( false, 0 )
		end
	end

	if not self.squad_ai:IsReinforcing() then

		-- try for different types of squad members
		local iSergeantIndex = 0
        	local iPriestIndex = 1
		
		local iNumSergeant = self.squad_ai:GetLeaderCount( iSergeantIndex )
		local iNumPriest = self.squad_ai:GetLeaderCount( iPriestIndex )

		-- Desired number of each leader type
		local iDesiredSergeant = 1
		local iDesiredPriest = 1
		
		-- Desired order of reinforcing
		if iNumSergeant < iDesiredSergeant then
			if self.squad_ai:CanReinforce( true, iSergeantIndex ) then
				self.squad_ai:DoReinforce( true, iSergeantIndex )
			end
		elseif iNumPriest < iDesiredPriest then
			if self.squad_ai:CanReinforce( true, iPriestIndex ) then
				self.squad_ai:DoReinforce( true, iPriestIndex )
			end
		end
	end
end
]]
