----------------------------------------
-- File: 'chaoslordstactic.ai'
-- Edited by Thudmeizer @ 03.03.2016

class 'ChaosLordsTactic' (ChaosMarineInfantryTactic)

ChaosLords = {}

function ChaosLordsTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Chaos Lords Tactic")

	self.m_oTimedSpecialAbilities = Timer( ChaosLordsTactic.DoTimedSpecialAbilities, self, 7 )
end

function ChaosLordsTactic:AutoBuildAddOn( addonSlot )
	for e in self.squad_ai:GetEntities() do
		local buildChannelChaosLords = build_manager:GetBuildChannelFromID(e:GetID())
		if (buildChannelChaosLords ~= nil) then
			local addOnID = buildChannelChaosLords:GetItemIDAt(BuildChannelAI.PQ_AddOn, addonSlot)
			if (buildChannelChaosLords:IsBuilding() == 0 and buildChannelChaosLords:CanAddToQueue(BuildChannelAI.PQ_AddOn, addOnID) == BuildChannelAI.CANBUILD_Ok) then
				buildChannelChaosLords:BuildAddOn(addOnID)
				return
			end
		end
	end
	return
end

function ChaosLordsTactic:IsAttacker()
	return self:IsCommanderAttacker()
end

function ChaosLordsTactic:IsDefender()
	return self:IsCommanderDefender()
end

function ChaosLordsTactic:InitAbilities()

	-- Init ability ID's
	if (ChaosLords.strength_id == nil) then
		ChaosLords.strength_id = cpu_manager.stats:GetAbilityID( "chaos_daemon_strength" )	
	end
	if (ChaosLords.detector_id == nil) then
		ChaosLords.detector_id = cpu_manager.stats:GetAbilityID( "chaos_detector" )	
	end
	if (ChaosLords.siren_id == nil) then
		ChaosLords.siren_id = cpu_manager.stats:GetAbilityID( "chaos_doom_siren" )
	end
	if (ChaosLords.berserk_id == nil) then
		ChaosLords.berserk_id = cpu_manager.stats:GetAbilityID( "chaos_furious_rage" )
	end
	if (ChaosLords.run_id == nil) then
		ChaosLords.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function ChaosLordsTactic:DoAbilities()

	Ability.DoAbility( self.squad_ai, ChaosLords.strength_id, Ability.Filters.IsInCombat )
	
	-- Use Doom Siren
	Ability.DoAbilityPos(self.squad_ai, ChaosLords.siren_id, Ability.Filters.CloseSquadEnemy, 4)
	Ability.DoAbilityPos(self.squad_ai, ChaosLords.siren_id, Ability.Filters.CloseVehicleEnemy, 1)

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( ChaosLords.run_id )) then
			self.squad_ai:DoSpecialAbility( ChaosLords.run_id )
		end

		-- Check if I can go berserk while stationary
		if (not self:IsMoving()) then
			if (self.squad_ai:CanDoAbility( ChaosLords.berserk_id )) then
				self.squad_ai:DoSpecialAbility( ChaosLords.berserk_id )
			end	
		end
	end

	if (self.m_oTimedSpecialAbilities ~= nil) then
		self.m_oTimedSpecialAbilities:Call()
	else
		ChaosLordsTactic.DoTimedSpecialAbilities(self)
	end

	-- Check if we can possess
	if (self.squad_ai:CanPossess()) then
	
		-- Check if we are in combat
		if (self.squad_ai:IsInCombat() or cpu_manager.terrain_analyzer:HasThreat(self.squad_ai:GetPosition(), 35)) then
			self.squad_ai:DoPossess()
		end
	end
end

function ChaosLordsTactic:DoTimedSpecialAbilities()

	-- Try to use detection ability
    if (self.squad_ai:CanDoAbility(ChaosLords.detector_id)) then
    
    	-- Check for infiltrated enemy
        local oEnemy = Ability.Filters.CloseInfiltratedEnemy(self.squad_ai:GetPosition(), 35, 1)
        if (oEnemy ~= nil) then

        	-- Get distance to enemy unit
            local vSquadPos = self.squad_ai:GetPosition()
            local vEnemyPos = oEnemy:GetPosition()
            local iDistance = distance(vSquadPos, vEnemyPos)
            
            -- If target is too far away launch auspex in range
            local vTargetPos = Vector3f(vSquadPos)
            local iRange = self.squad_ai:GetAbilityRange(ChaosLords.detector_id)
            if (iDistance > iRange) then
                local fThrowFactor = iRange / iDistance
                vTargetPos.x = vTargetPos.x + (vEnemyPos.x - vSquadPos.x) * fThrowFactor
                vTargetPos.z = vTargetPos.z + (vEnemyPos.z - vSquadPos.z) * fThrowFactor
            else
                vTargetPos = Vector3f(vEnemyPos)
            end
            self.squad_ai:DoSpecialAbilityPos(ChaosLords.detector_id, vTargetPos)
        end
    end
end

function ChaosLordsTactic:Upgrade()

--	self:AutoBuildAddOn(0)	--	[addon_01] addon_commanders_cap_squad			4/1
--	self:AutoBuildAddOn(1)	-- 	[addon_02] addon_commanders_cap_support			5/1
--	self:AutoBuildAddOn(2)	-- 	[addon_03] addon_commanders_cap_relic			6/1
--	self:AutoBuildAddOn(3)	-- 	[addon_04] addon_commanders_increase_production		5/1
--	self:AutoBuildAddOn(4)	-- 	[addon_05] addon_commanders_increase_health		6/1
--	self:AutoBuildAddOn(5)	-- 	[addon_06] addon_commanders_increase_morale		6/1
--	self:AutoBuildAddOn(6)	-- 	[addon_07] addon_commanders_cap_squad_2			6
--	self:AutoBuildAddOn(7)	-- 	[addon_08] addon_commanders_cap_support_2		8
--	self:AutoBuildAddOn(8)	-- 	[addon_09] addon_commanders_increase_production_2	8

   	if (cpu_manager:GetTierLevel() <= 4) then 
		local addon_random_commander_upgrades = math.random( 0,8 )	-- Randomize these addons
		self:AutoBuildAddOn(addon_random_commander_upgrades) 
	end

   	if (cpu_manager:GetTierLevel() > 4) then 
		self:AutoBuildAddOn(2)	-- Always build in late tiers to support the construction of Titans and late game ubers.
	end
end

function ChaosLordsTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update( self )) then
		return
	end
		
	-- Attach to melee in tier2+
	if (cpu_manager:GetTierLevel() > 1) then
		
		if (self:TryAttachSquad(true, true, 50, 150, nil) ~= nil) then
			return
		end
	end
	if (self:TryAttachSquad(false, true, 50, nil, self.m_fCommanderAttachHealth) == nil) then
		self:TryAttachSquadMelee()
	end
end
