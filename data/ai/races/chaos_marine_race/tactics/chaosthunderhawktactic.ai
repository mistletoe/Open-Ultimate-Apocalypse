----------------------------------------
-- File: 'chaosthunderhawkttactic.ai'
-- Edited by Thudmeizer     @ 23.04.2016

class 'ChaosThunderhawkTactic' (ChaosMarineVehicleTactic)

ChaosThunderhawk = {}

function ChaosThunderhawkTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Chaos Thunderhawk Tactic")
	
	-- Vehicle is a heavy transport
	self.m_iTransportVehicle = 1
	self.m_iTransportSlots = 4
end

-- Chaos Thunderhawk is allowed to retreat even directly after a jump
function ChaosThunderhawkTactic:SetTarget( target, variant_type )

	self.variant_type = variant_type
	self.target = Vector3f(target)
	self.m_iMoveDelay = 0
	self.last_jump = 0
end

function ChaosThunderhawkTactic:InitAbilities()

end

function ChaosThunderhawkTactic:DoAbilities()
	
	-- Call standard method
	ChaosMarineVehicleTactic.DoAbilities(self)
end

function ChaosThunderhawkTactic:JumpAttackRanged()

	-- Call standard method
	if (Tactic.JumpAttackRanged(self)) then
		return true
	end
	
	-- Get position and jump range
	local vChaosThunderhawkPosition = self.squad_ai:GetPosition()
	local iJumpRange = sqr(self.squad_ai:GetJumpDistance())
	
	-- Check if we can jump directly to the target
	local iClosestDistance = distance_sqr(vChaosThunderhawkPosition, self.target)
	local vTargetPos = nil
	if (iClosestDistance < iJumpRange) then
		vTargetPos = self.target
	else
	
		-- Get closest squad to target position
		for oSquad in military_manager:GetSquads() do
	
			-- Check if squad is valid
			if (oSquad:IsValid()) then
			
				-- Check distance
				local vPosition = oSquad:GetPosition()
				local iDistanceToChaosThunderhawk = distance_sqr(vPosition, vChaosThunderhawkPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToChaosThunderhawk < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
		
		-- Get closest building to target position
		for oBuilding in military_manager:GetBases() do
		
			-- Check if building is valid
			if (oBuilding:IsValid()) then
			
				-- Check distance
				local vPosition = oBuilding:GetPosition()
				local iDistanceToChaosThunderhawk = distance_sqr(vPosition, vChaosThunderhawkPosition)
				local iDistanceToTarget = distance_sqr(vPosition, self.target)
				if (iDistanceToChaosThunderhawk < iJumpRange and iDistanceToTarget < iClosestDistance) then
					iClosestDistance = iDistanceToTarget
					vTargetPos = vPosition
				end
			end
		end
	end
	
	-- Don't jump if we didn't find a target
	if (vTargetPos == nil or distance_sqr(vChaosThunderhawkPosition, vTargetPos) < sqr(50)) then
		return false
	end
	
	-- Try to jump to target
	for iLoop1 = 1, 5 do
	
		-- Create a jump position
		local vJumpPosition = vTargetPos
		vJumpPosition.x = vJumpPosition.x + math.random(-15, 15)
		vJumpPosition.z = vJumpPosition.z + math.random(-15, 15)
			
		-- Check if target position is in range and if unit is able to jump to target position
		local iDistance = distance_sqr(vJumpPosition, vChaosThunderhawkPosition)
		if (iDistance <= iJumpRange and self.squad_ai:CanJumpToPosition(vJumpPosition)) then
							
			-- Jump to position
			self.squad_ai:DoJump(vJumpPosition)
			self.last_jump = g_iGMT
			self.m_iLastGatherMove = self.last_jump - 10
			return true
		end
	end
	return false
end
--[[
function ChaosThunderhawkTactic:UnloadTroops()

	local vSquadPos = self.squad_ai:GetPosition()
	if (cpu_manager.terrain_analyzer:HasThreat(vSquadPos, 100) and self.squad_ai:CanUnload()) then

		-- Unload all troops when enemy is in the distance
		self.squad_ai:DoUnload()
	end
end
]]
function ChaosThunderhawkTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not VehicleTactic.Update(self)) then
		return
	end

	-- Check if we are in serious trouble
	self:EmergencyRetreat()
end

