----------------------------------------
-- File: 'cultistactic.ai'
-- Edited by LarkinVB	@ 19.08.2005
-- Edited by Arkhan	@ 12.01.2006
-- Edited by Thudmeizer	@ 03.05.2016

class 'CultistTactic' (ChaosMarineInfantryTactic)

Cultist = {}

function CultistTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Cultist Tactic")
end

function CultistTactic:IsAttacker()
	return (cpu_manager:GetTierLevel() >= 2)
end

function CultistTactic:InitAbilities()

	-- Init ability ID's
	if (Cultist.explode_id == nil) then
		Cultist.explode_id = cpu_manager.stats:GetAbilityID( "chaos_cultist_explode" )	
	end

	if (Cultist.worshipkhorne_id == nil) then
		Cultist.worshipkhorne_id = cpu_manager.stats:GetAbilityID( "chaos_cultist_worship_khorne" )	
	end

	if (Cultist.worshipnurgle_id == nil) then
		Cultist.worshipnurgle_id = cpu_manager.stats:GetAbilityID( "chaos_cultist_worship_nurgle" )	
	end

	if (Cultist.worshipslaanesh_id == nil) then
		Cultist.worshipslaanesh_id = cpu_manager.stats:GetAbilityID( "chaos_cultist_worship_slaanesh" )	
	end

	if (Cultist.worshiptzeentch_id == nil) then
		Cultist.worshiptzeentch_id = cpu_manager.stats:GetAbilityID( "chaos_cultist_worship_tzeentch" )	
	end
end

--Basic infantry tactics for Chaos squads. Includes all_run!
import ("Races/Chaos_Marine_Race/aaa_chaos_infantry_basetactic.ai")
--Basic infantry tactics, universal.
import ("Core/Tactics/infantryCoreAbilities.ai")

function CultistTactic:DoAbilities()

	if (self.squad_ai:GetHealthPercentage() >= 0.6) then

		-- Search a squad
		local oUnit = Ability.Filters.CloseHurt(self.squad_ai:GetPosition(), 20, 2)
		if (oUnit ~= nil and oUnit:IsInCombat() and cpu_manager:GetUnitStrength(oUnit) > 60) then

			if (self.squad_ai:CanDoAbility(Cultist.worshipkhorne_id)) then
				self.squad_ai:DoSpecialAbility(Cultist.worshipkhorne_id)
			end

			if (self.squad_ai:CanDoAbility(Cultist.worshipnurgle_id)) then
				self.squad_ai:DoSpecialAbility(Cultist.worshipnurgle_id)
			end

			if (self.squad_ai:CanDoAbility(Cultist.worshipslaanesh_id)) then
				self.squad_ai:DoSpecialAbility(Cultist.worshipslaanesh_id)
			end

			if (self.squad_ai:CanDoAbility(Cultist.worshiptzeentch_id)) then
				self.squad_ai:DoSpecialAbility(Cultist.worshiptzeentch_id)
			end
		end
	end

	-- Sacrifice a cultist to reduce nearby enemy morale
	if (self.squad_ai:CanDoAbility(Cultist.explode_id)) then
		Ability.DoAbilityArea(self.squad_ai, Cultist.explode_id, Ability.Filters.CloseInfantryEnemy, 10, 2)
	end

	--No references to overridden classes here!
	ChaosInfantryBaseTactic(self)
	DoCoreAbilities(self)
end

function CultistTactic:Upgrade()

 	-- If I am broken, don't upgrade!
	if (self:IsAffectedByMorale() and self.squad_ai:IsBroken()) then
		return
	end
	
	-- If there are no ressources available, don't upgrade!
	if (not Tactic.Options.can_reinforce) then
		return
	end
   
	if (not self.squad_ai:IsReinforcing() and cpu_manager:GetTierLevel() >= 2) then
		-- Try for upgrade if we've a leader and more than 6 troopers
		if (self.squad_ai:HasUpgradableTrooper() and self.squad_ai:GetNumTroopers() > 6 and self.squad_ai:HasLeader()) then
			local class_type = cpu_manager:FindClosestEnemyPlayer():GetMajorityClassType()
			self.squad_ai:DoBestUpgrade( class_type )
		end
	end
end

function CultistTactic:Reinforce()

	-- If I am broken, don't upgrade/reinforce!
	if (self:IsAffectedByMorale() and self.squad_ai:IsBroken()) then
	   return
	end
	
	-- Don't reinforce squads in critical condition
	if (self.squad_ai:GetNumTroopers() <= self.squad_ai:GetMaxTroopers() / 3 and self.squad_ai:IsUnderAttack()) then
		return
	end

	-- Check resources
	local iRequisition = resource_manager:GetResourceAmount():Get(ResourceAmount.RT_Requisition)
	if ((iRequisition < 900) and not Tactic.Options.can_reinforce) then
		return
	end	

	--If we can, Reinforce leaders first.
	if not self.squad_ai:IsReinforcing() then

		-- try for different types of squad members
		local iChampionIndex = 0
        	local iIconBearerIndex = 1
		
		local iNumChampion = self.squad_ai:GetLeaderCount( iChampionIndex )
		local iNumIconBearer = self.squad_ai:GetLeaderCount( iIconBearerIndex )

		-- Desired number of each leader type
		local iDesiredChampion = 1
		local iDesiredIconBearer = 1
		
		-- Desired order of reinforcing
		if iNumChampion < iDesiredChampion then
			if self.squad_ai:CanReinforce( true, iChampionIndex ) then
				self.squad_ai:DoReinforce( true, iChampionIndex )
			end
		elseif iNumIconBearer < iDesiredIconBearer then
			if self.squad_ai:CanReinforce( true, iIconBearerIndex ) then
				self.squad_ai:DoReinforce( true, iIconBearerIndex )
			end
		end
	end

	-- Don't reinforce more than 12 squad members -- they both get stuck or don't capture points properly
	if (not self.squad_ai:IsReinforcing() and self.squad_ai:GetNumTroopers() < 12) then
		if (self.squad_ai:CanReinforce(false, 0)) then
			self.squad_ai:DoReinforce(false, 0)
		end
	end
end

function CultistTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update( self )) then
		return
	end
	
    -- Set unit on ranged stance in tier 3+
    if (cpu_manager:GetTierLevel() >= 3 and self.squad_ai:GetMeleeStance() ~= SquadAI.MSTANCE_Ranged) then
    	self.squad_ai:DoSetMeleeStance(SquadAI.MSTANCE_Ranged)
    end
end