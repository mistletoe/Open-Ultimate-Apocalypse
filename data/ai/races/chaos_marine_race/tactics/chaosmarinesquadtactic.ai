----------------------------------------
-- File: 'chaosmarinesquadtactic.ai'
-- Edited by Thudmeizer	@ 28.02.2016

class 'ChaosMarineSquadTactic' (ChaosMarineInfantryTactic)

ChaosMarineSquad = {}

function ChaosMarineSquadTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Chaos Marine Squad Tactic")
end

function ChaosMarineSquadTactic:InitAbilities()

	-- Init ability ID's
	if (ChaosMarineSquad.flashbang_id == nil) then
		ChaosMarineSquad.flashbang_id = cpu_manager.stats:GetAbilityID( "chaos_flashbang_grenades" )	
	end

	if (ChaosMarineSquad.frag_id == nil) then
		ChaosMarineSquad.frag_id = cpu_manager.stats:GetAbilityID( "chaos_frag_grenades" )	
	end

	if (ChaosMarineSquad.inferno_id == nil) then
		ChaosMarineSquad.inferno_id = cpu_manager.stats:GetAbilityID( "chaos_inferno_grenades" )	
	end

	if (ChaosMarineSquad.krak_id == nil) then
		ChaosMarineSquad.krak_id = cpu_manager.stats:GetAbilityID( "chaos_krak_grenades" )	
	end

	if (ChaosMarineSquad.melta_id == nil) then
		ChaosMarineSquad.melta_id = cpu_manager.stats:GetAbilityID( "chaos_melta_bombs_havoc" )	
	end

	if (ChaosMarineSquad.run_id == nil) then
		ChaosMarineSquad.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end

	if (ChaosMarineSquad.rage_id == nil) then
		ChaosMarineSquad.rage_id = cpu_manager.stats:GetAbilityID( "chaos_furious_rage" )	
	end
	
	if (ChaosMarineSquad.smoke_id == nil) then
		ChaosMarineSquad.smoke_id = cpu_manager.stats:GetAbilityID( "chaos_smoke_grenades" )	
	end		
end

--Basic infantry tactics for Chaos squads. Includes all_run!
import ("Races/Chaos_Marine_Race/aaa_chaos_infantry_basetactic.ai")
--Basic infantry tactics, universal.
import ("Core/Tactics/infantryCoreAbilities.ai")


function ChaosMarineSquadTactic:DoAbilities()

	-- Activate various targetted abilities
	Ability.DoAbilityTarget( self.squad_ai, ChaosMarineSquad.flashbang_id, Ability.Filters.CloseSquadEnemy, 4)
	Ability.DoAbilityTarget( self.squad_ai, ChaosMarineSquad.frag_id, Ability.Filters.CloseEnemy, 4)
	Ability.DoAbilityTarget( self.squad_ai, ChaosMarineSquad.inferno_id, Ability.Filters.CloseInfantryEnemy, 3)
	Ability.DoAbilityTarget( self.squad_ai, ChaosMarineSquad.krak_id, Ability.Filters.CloseVehicleEnemy, 1)
	Ability.DoAbilityTarget( self.squad_ai, ChaosMarineSquad.melta_id, Ability.Filters.CloseVehicleEnemy, 1)
	Ability.DoAbilityTarget( self.squad_ai, ChaosMarineSquad.smoke_id, Ability.Filters.CloseEnemy, 4)
	
	if (self.squad_ai:IsInCombat() and not self.squad_ai:IsCapturing() and not self.squad_ai:IsBroken()) then 
		-- Check if I can go berserk while stationary
		if (not self:IsMoving()) then
			if (self.squad_ai:CanDoAbility( ChaosMarineSquad.rage_id )) then
				self.squad_ai:DoSpecialAbility( ChaosMarineSquad.rage_id )
			end
		end		
	end
	
	--No references to overridden classes here!
	ChaosInfantryBaseTactic(self)
	DoCoreAbilities(self)
end

function ChaosMarineSquadTactic:Upgrade()

	-- If I am broken, don't upgrade!
	if (self:IsAffectedByMorale() and self.squad_ai:IsBroken()) then
		return
	end
	
	-- If there are no ressources available, don't upgrade!
	if (not Tactic.Options.can_reinforce) then
		return
	end
  
	-- Only upgrade if not reinforcing
	if (not self.squad_ai:IsReinforcing()) then
	
		if (self.squad_ai:HasUpgradableTrooper()) then
			local class_type = cpu_manager:FindClosestEnemyPlayer():GetMajorityClassType()
			self.squad_ai:DoBestUpgrade( class_type )
		end
	end
end

function ChaosMarineSquadTactic:Reinforce()

	-- Don't reinforce squads in critical condition
	if (self.squad_ai:GetNumTroopers() <= self.squad_ai:GetMaxTroopers() / 3 and self.squad_ai:IsUnderAttack()) then
		return
	end

	-- Check resources
	local iRequisition = resource_manager:GetResourceAmount():Get(ResourceAmount.RT_Requisition)
	if ((iRequisition < 900) and not Tactic.Options.can_reinforce) then
		return
	end

	--If we can, Reinforce leaders first.
 	if not self.squad_ai:IsReinforcing() then

		-- try for different types of squad members
		local iChampionIndex = 0
		local iIconBearerIndex = 1
		
		local iNumChampion = self.squad_ai:GetLeaderCount( iChampionIndex )
		local iNumIconBearer = self.squad_ai:GetLeaderCount( iIconBearerIndex )

		-- Desired number of each leader type
		local iDesiredChampion = 1
		local iDesiredIconBearer = 1
		
		-- Desired order of reinforcing
		if iNumChampion < iDesiredChampion then
			if self.squad_ai:CanReinforce( true, iChampionIndex ) then
				self.squad_ai:DoReinforce( true, iChampionIndex )
			end
		elseif iNumIconBearer < iDesiredIconBearer then
			if self.squad_ai:CanReinforce( true, iIconBearerIndex ) then
				self.squad_ai:DoReinforce( true, iIconBearerIndex )
			end
		end
	end 
  
	if not self.squad_ai:IsReinforcing() then
		if self.squad_ai:CanReinforce( false, 0 ) then
		   self.squad_ai:DoReinforce( false, 0 )
		end
	end
end

