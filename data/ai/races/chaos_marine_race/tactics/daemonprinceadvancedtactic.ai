----------------------------------------
-- File: 'daemonprinceadvancedtactic.ai'
-- Edited by Thudmeizer @ 12.02.2016

class 'DaemonPrinceAdvancedTactic' (ChaosMarineInfantryTactic)

DaemonPrinceAdvanced = {}

function DaemonPrinceAdvancedTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Daemon Prince Advanced Tactic")
	
	self.m_oTimedSpecialAbilities = Timer( DaemonPrinceAdvancedTactic.DoTimedSpecialAbilities, self, 7 )
end

function DaemonPrinceAdvancedTactic:InitAbilities()

	-- Init ability ID's
	if (DaemonPrinceAdvanced.strength_id == nil) then
		DaemonPrinceAdvanced.strength_id = cpu_manager.stats:GetAbilityID( "chaos_daemon_strength" )	
	end

	if (DaemonPrinceAdvanced.roar_id == nil) then
		DaemonPrinceAdvanced.roar_id = cpu_manager.stats:GetAbilityID( "chaos_fear_roar" )	
	end

	if (DaemonPrinceAdvanced.detector_id == nil) then
		DaemonPrinceAdvanced.detector_id = cpu_manager.stats:GetAbilityID( "chaos_detector" )	
	end	
end

--Basic infantry tactics for Chaos squads. Includes all_run!
import ("Races/Chaos_Marine_Race/aaa_chaos_infantry_basetactic.ai")
--Basic infantry tactics, universal.
import ("Core/Tactics/infantryCoreAbilities.ai")
function DaemonPrinceAdvancedTactic:DoAbilities()

	Ability.DoAbility( self.squad_ai, DaemonPrinceAdvanced.strength_id, Ability.Filters.IsInCombat )
	Ability.DoAbilityArea(self.squad_ai, DaemonPrinceAdvanced.roar_id, Ability.Filters.CloseSquadEnemy, 10, 4)

	if (self.m_oTimedSpecialAbilities ~= nil) then
		self.m_oTimedSpecialAbilities:Call()
	else
		DaemonPrinceAdvancedTactic.DoTimedSpecialAbilities(self)
	end
	
	--No references to overridden classes here!
	ChaosInfantryBaseTactic(self)
	DoCoreAbilities(self)
end

function DaemonPrinceAdvancedTactic:DoTimedSpecialAbilities()

	-- Try to use detection ability
	if (self.squad_ai:CanDoAbility(DaemonPrinceAdvanced.detector_id)) then
	
		local oSquad = Ability.Filters.CloseInfiltratedEnemy(self.squad_ai:GetPosition(), 35, 1)
		if (oSquad ~= nil) then
			self.squad_ai:DoSpecialAbility(DaemonPrinceAdvanced.detector_id)
		end
	end
end