----------------------------------------
-- File: 'darkeldarvehicletactic.ai'
-- Edited by Thudmeizer         @ 11.11.2016

class 'DarkEldarVehicleTactic' (VehicleTactic)

function DarkEldarVehicleTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Dark Eldar Vehicle Tactic")

	-- Set vehicle options
	local sSquadName = squad_ai:GetSquadName()
	if (sSquadName == "dark_eldar_squad_reaver") then
		
		-- Squads are transportable and can deepstrike
		self.m_iTransportable = 1	-- Raider / Rampage

		if (cpu_manager:GetTierLevel() < 4) then 
			self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID( "dark_eldar_hq" )

		elseif (cpu_manager:GetTierLevel() > 3) then 
			self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID( "dark_eldar_hq_sp_dxp3" )
		end
	end

	-- Set Stuck Unit Positions
	self.initialPosition = self.squad_ai:GetPosition()
	self.isStuck = false

	-- Set FoF range
	--self.m_iFoFRange = 35
end

-- Check if the vehicle should dance away in melee
function DarkEldarVehicleTactic:CheckVehicleDance(sName)

	if (sName == "dark_eldar_squad_reaver" or
	    sName == "dark_eldar_squad_raider" or
	    sName == "dark_eldar_squad_ravager" or
	    sName == "dark_eldar_squad_reaper" or
	    sName == "dark_eldar_squad_rampage" or
	    sName == "dark_eldar_squad_shadow" or
	    sName == "dark_eldar_squad_dais_of_destruction") then
		return true
	end
	return false
end

function DarkEldarVehicleTactic:DoAbilities()

	-- RAM!!! - The vehicle will sacrifice combat accuracy in exchange for extra speed and the ability to knock down infantry wherever the vehicle goes.
	-- Vehicle gains a 60% movement speed increase and will knock down infantry continuously on contact.
	local rammingspeed_id = cpu_manager.stats:GetAbilityID( "all_bumpertank" )
	if (self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) then
		if (self.squad_ai:CanDoAbility( rammingspeed_id )) then
			self.squad_ai:DoSpecialAbility( rammingspeed_id )
		end
	end

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		local foot_id = cpu_manager.stats:GetAbilityID( "dark_eldar_footonfire" )
		if (self.squad_ai:CanDoAbility( foot_id )) then
			self.squad_ai:DoSpecialAbility( foot_id )
		end
	end

	-- Jump squads' unstuck code call.
	-- Checks jump-able stuck squads, and force them to jump nearby
   	if self.squad_ai:CanJump() then
        	self:SolveStuckCase()
	end

	-- I might have these attached
	if (self.squad_ai:IsAttached()) then

		if (self.squad_ai:HasSquadAttached("dark_eldar_squad_araspida")) then
			DarkEldarMobileShieldTactic.InitAbilities( self )
			DarkEldarMobileShieldTactic.DoAbilities( self )
		end
	end

	-- Check if I should enable/disable fire on foot
	--self:DoAbilityFoF()
end

-- Unstuck Code
function DarkEldarVehicleTactic:SolveStuckCase()

	local iPosition = self.squad_ai:GetPosition()
    	if iPosition.x ~= self.initialPosition.x or iPosition.z ~= self.initialPosition.z then
        	self.isStuck = false
    	elseif (self.squad_ai:IsInStateMove() or self.squad_ai:IsInStateAttackMove()) and not self.squad_ai:IsInCombat()
    		and iPosition.x == self.initialPosition.x and iPosition.z == self.initialPosition.z then
        	self.isStuck = true
    	end
    	if self.isStuck then
        	self:ForceSquadJumpNear(iPosition)
	end
    	self.initialPosition = self.squad_ai:GetPosition()
end

function DarkEldarVehicleTactic:ForceSquadJumpNear(pos)

	-- Try to jump somewhere near, perform 16 checks for a viable position
    	local jumpDisSqr = sqr(self.squad_ai:GetJumpDistance())
    	for iLoop1 = 1, 16 do
        	-- Create a jump position
        	local vJumpPosition = pos
        	local vDir = cpu_manager:GetDirectionToEnemy(pos)
        	vJumpPosition.x = vJumpPosition.x + vDir.x * math.random(-20, 50)
        	vJumpPosition.z = vJumpPosition.z + vDir.z * math.random(-20, 50)
        	-- Check if target position is in range and if unit is able to jump to target position
        	local iDistance = distance_sqr(vJumpPosition, pos)
        	if iDistance < jumpDisSqr and self.squad_ai:CanJumpToPosition(vJumpPosition) then
            		-- Jump to position
            		self.squad_ai:DoJump(vJumpPosition)
            		self.last_jump = g_iGMT
            		self.m_iLastGatherMove = self.last_jump - 10
            		return
		end
	end
end

function DarkEldarVehicleTactic:ToggleFoF( squad_ai, state )

	-- Check if the squad can handle foot on fire
	local id = cpu_manager.stats:GetAbilityID( "dark_eldar_footonfire" )
	if (not squad_ai:CanDoAbility(id)) then
		return
	end
	
	-- Check if it's already in desired state
	if (squad_ai:IsUsingAbility(id) == state) then
		return 
	end
	
	-- Activate fleet of foot
	squad_ai:DoSpecialAbility(id)
end

-- Dreddnott edit (April 16th)
function DarkEldarVehicleTactic:DoAbilityFoF()

	-- Check if we should toggle FoF
    	local iFoFID = cpu_manager.stats:GetAbilityID( "dark_eldar_footonfire" )
    	local bToggleFoF = false

    	-- Check whether we're using the ability
    	local bIsUsing = self.squad_ai:IsUsingAbility(iFoFID)

    	-- Check if we're attacking
    	local bIsAttacking = self.squad_ai:IsInStateAttackMove()
    
    	-- Check if we are shooting or fighting in melee
    	local bIsFighting = self.squad_ai:IsAttacking()
    
   	-- Check if we're moving normally
    	local bIsMoving = (self.squad_ai:IsInStateMove() and not bIsAttacking)

    	-- Check if we're in a state that should FoF regardless of enemy presence
    	local bAvoidCombat = (self.squad_ai:IsBroken() or self:IsInSubState() or self.squad_ai:IsCapturing() or bIsMoving)

    	-- Check if we should slow down for enemies nearing range
    	local vSquadPos = self.squad_ai:GetPosition()
    	local oEnemy = cpu_manager.cpu_player:FindFirstEnemy(vSquadPos, self.m_iFoFRange, 1)
    	local bCloseEnemy = (oEnemy ~= nil)
    
    	-- Helper flags
    	local bIsCharging = (bIsAttacking and bCloseEnemy)
    	local bIsDefending = (not bIsMoving and bCloseEnemy)
    	local bIsInCombat = (bIsFighting or bIsCharging or bIsDefending)

    	-- Check if FoF should be toggled
    	if ((bIsUsing and bIsInCombat and not bAvoidCombat) or (not bIsUsing and (not bIsInCombat or bAvoidCombat))) then        
        	bToggleFoF = true
    	end

    	-- Toggle FoF
    	if (bToggleFoF and self.squad_ai:CanDoAbility(iFoFID)) then
        	self.squad_ai:DoSpecialAbility(iFoFID)
	end
end