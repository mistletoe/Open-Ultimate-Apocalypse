----------------------------------------
-- File: 'darkeldarhelliontactic.ai'
-- Edited by Thudmeizer @ 06.04.2016

class 'DarkEldarHellionTactic' (DarkEldarInfantryTactic)

DarkEldarHellion = {}

function DarkEldarHellionTactic:__init( squad_ai ) super( squad_ai )
	
	self:SetName("Dark Eldar Hellion Tactic")
end

function DarkEldarHellionTactic:JumpAttack()
	Tactic.JumpAttack(self)
end

function DarkEldarHellionTactic:InitAbilities()

	-- Init ability ID's
	if (DarkEldarHellion.gravitic_id == nil) then
		DarkEldarHellion.gravitic_id = cpu_manager.stats:GetAbilityID( "dark_eldar_gravitic_grenade" )	
	end
	if (DarkEldarHellion.haywire_id == nil) then
		DarkEldarHellion.haywire_id = cpu_manager.stats:GetAbilityID( "dark_eldar_haywire_bombs" )	
	end
	if (DarkEldarHellion.horrorfex_id == nil) then
		DarkEldarHellion.horrorfex_id = cpu_manager.stats:GetAbilityID( "dark_eldar_horrorfex_grenade" )	
	end
	if (DarkEldarHellion.leach_id == nil) then
		DarkEldarHellion.leach_id = cpu_manager.stats:GetAbilityID( "dark_eldar_soul_leach" )
	end
	if (DarkEldarHellion.terrorfex_id == nil) then
		DarkEldarHellion.terrorfex_id = cpu_manager.stats:GetAbilityID( "dark_eldar_terrorfex_grenade" )	
	end
	if (DarkEldarHellion.trackingdevice_id == nil) then
		DarkEldarHellion.trackingdevice_id = cpu_manager.stats:GetAbilityID( "dark_eldar_tracking_device" )	
	end
	if (DarkEldarHellion.run_id == nil) then
		DarkEldarHellion.run_id = cpu_manager.stats:GetAbilityID( "all_run!" )	
	end
end

function DarkEldarHellionTactic:DoAbilities()

	if (self.squad_ai:IsInCombat()) then

		if (self.squad_ai:CanDoAbility(DarkEldarHellion.gravitic_id)) then

			-- Send grenade against enemy infantry
			Ability.DoAbilityPos( self.squad_ai, DarkEldarHellion.gravitic_id, Ability.Filters.CloseSquadEnemy, 3 ) 
		end

		if (self.squad_ai:CanDoAbility(DarkEldarHellion.haywire_id)) then

			-- Send grenade against enemy infantry
			Ability.DoAbilityPos( self.squad_ai, DarkEldarHellion.haywire_id, Ability.Filters.CloseVehicleEnemy, 1 ) 
		end
--[[
		if (self.squad_ai:CanDoAbility(DarkEldarHellion.horrorfex_id)) then

			-- Bugged: will cause crash when Horrorfex ability is used. Reason undetermined.
			-- Send grenade against enemy infantry
			--Ability.DoAbilityPos( self.squad_ai, DarkEldarHellion.horrorfex_id, Ability.Filters.CloseSquadEnemy, 2 ) 
		end
]]
		if (self.squad_ai:CanDoAbility(DarkEldarHellion.terrorfex_id)) then

			-- Send bomb against enemy infantry
			Ability.DoAbilityPos( self.squad_ai, DarkEldarHellion.terrorfex_id, Ability.Filters.CloseInfantryEnemy, 4 ) 
		end
	end

	-- Luster of Souls: Restore the strength of your squad by concealing them and regaining their health. Exchange this great ritual in exchange for souls.
	if (self.squad_ai:WasRecentlyHurt() and self.squad_ai:GetHealthPercentage() < 0.4) then

		if (self.squad_ai:CanDoAbility(DarkEldarHellion.leach_id)) then
			Ability.DoAbilityArea(self.squad_ai, DarkEldarHellion.leach_id, Ability.Filters.CloseSquadEnemy, 15, 4)
			Ability.DoAbilityArea(self.squad_ai, DarkEldarHellion.leach_id, Ability.Filters.CloseCommanderEnemy, 15, 1)
		end
	end

	-- Run if safe
	if ((not self.squad_ai:IsInCombat() and self.squad_ai:IsInStateMove()) or self.stateID ~= Tactic.StateID.NoState) then

		-- If I am safe I can run
		if (self.squad_ai:CanDoAbility( DarkEldarHellion.run_id )) then
			self.squad_ai:DoSpecialAbility( DarkEldarHellion.run_id )
		end
	end

	-- Call basic DoAbilities methods
	DarkEldarInfantryTactic.DoAbilities(self)
--[[
	Ability.DoAbilityTarget( self.squad_ai, DarkEldarHellion.trackingdevice_id, Ability.Filters.CloseEnemy, 1 )

	-- Deploy tracking device to enemy infantry/vehicles -- SS 1.10: Still crashes the game
	if (self.squad_ai:CanDoAbility(DarkEldarHellion.trackingdevice_id)) then
	
		-- Search a squad
		local iRange = self.squad_ai:GetAbilityRange(DarkEldarHellion.trackingdevice_id)
		local oUnit = Ability.Filters.CloseEnemy(self.squad_ai:GetPosition(), iRange, 1)
		if (oUnit ~= nil) then
			self.squad_ai:DoSpecialAbilitySquad(DarkEldarHellion.trackingdevice_id, oUnit:GetSquad())
		end
	end
]]
end

function DarkEldarHellionTactic:Update()

	if (self:IsComplete()) then
		return
	end
	
	-- State machine
	if (not InfantryTactic.Update( self )) then
		return
	end
end