----------------------------------------
-- File: 'darkeldarhqtactic.ai'
-- Edited by Thudmeizer		@ 20.11.2016

class 'DarkEldarHQTactic' (BaseTactic)

DarkEldarHQ = {}

function DarkEldarHQTactic:__init( base_ai ) super( base_ai )

	self:SetName("Dark Eldar HQ Tactic")

	-- Building can deepstrike troops
	self.m_bCanDeepStrikeTroops = true
end

function DarkEldarHQTactic:CanDeepStrikeTroops()
	return true
end

function DarkEldarHQTactic:InitAbilities()

	-- Init abilities
	if (DarkEldarHQ.vision_id == nil) then
		DarkEldarHQ.vision_id = cpu_manager.stats:GetAbilityID( "dark_eldar_annihilation_beam" )
	end
	if (DarkEldarHQ.rage_id == nil) then
		DarkEldarHQ.rage_id = cpu_manager.stats:GetAbilityID( "dark_eldar_corrosive_cloud" )
	end
	if (DarkEldarHQ.scream_id == nil) then
		DarkEldarHQ.scream_id = cpu_manager.stats:GetAbilityID( "dark_eldar_piercing_vision" ) 
	end
	if (DarkEldarHQ.soulstorm_id == nil) then
		DarkEldarHQ.soulstorm_id = cpu_manager.stats:GetAbilityID( "dark_eldar_rekindle_rage" )
	end
	if (DarkEldarHQ.frenzy_id == nil) then
		DarkEldarHQ.frenzy_id = cpu_manager.stats:GetAbilityID( "dark_eldar_rend_soul" )
	end
	if (DarkEldarHQ.speed_id == nil) then
		DarkEldarHQ.speed_id = cpu_manager.stats:GetAbilityID( "dark_eldar_screams_of_the_damned" ) 
	end
	if (DarkEldarHQ.beam_id == nil) then
		DarkEldarHQ.beam_id = cpu_manager.stats:GetAbilityID( "dark_eldar_soulstorm" )
	end
	if (DarkEldarHQ.rendsoul_id == nil) then
		DarkEldarHQ.rendsoul_id = cpu_manager.stats:GetAbilityID( "dark_eldar_speed_frenzy" ) 
	end
	if (DarkEldarHQ.corrosive_id == nil) then
		DarkEldarHQ.corrosive_id = cpu_manager.stats:GetAbilityID( "dark_eldar_veil_of_shadows" ) 
	end
	if (DarkEldarHQ.repair_id == nil) then
		DarkEldarHQ.repair_id = cpu_manager.stats:GetAbilityID( "all_autorepair" )
	end
end

function DarkEldarHQTactic:DoAbilities()

	aitrace("DarkEldarHQTactic: Do abilities...")

	-- Base Repair!
	if (self.base_ai:WasRecentlyHurt() and self.base_ai:GetHealthPercentage() < 0.6) then

		if (self.base_ai:CanDoAbility( DarkEldarHQ.repair_id )) then
			self.base_ai:DoSpecialAbility( DarkEldarHQ.repair_id )
		end
	end

	-- Rend Soul: ability against enemy commanders (disables enemy abilities and causes damage - Soul cost: 80)
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	if (self.base_ai:CanDoAbility(DarkEldarHQ.rendsoul_id)) then -- and (iRequisition > 2500 and iPower > 2500)) then
	
		-- Only activate if enemy unit is attacking
		local iRange = self.base_ai:GetAbilityRange(DarkEldarHQ.rendsoul_id)
		local oSquad = Ability.Filters.CloseCommanderEnemy(self.base_ai:GetPosition(), iRange, 1)
		if (oSquad ~= nil and oSquad:IsAttacking()) then
			self.base_ai:DoSpecialAbilitySquad(DarkEldarHQ.rendsoul_id, oSquad:GetSquad())
		end
	end

	-- Corrosive Cloud: ability against the enemy (eats enemy armour - Soul cost: 80)
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	if (self.base_ai:CanDoAbility(DarkEldarHQ.corrosive_id)) then --and (iRequisition > 2500 and iPower > 2500)) then
	
		-- Only activate if enemy unit is attacking
		local iRange = self.base_ai:GetAbilityRange(DarkEldarHQ.corrosive_id)
		local oSquad = Ability.Filters.CloseEnemy(self.base_ai:GetPosition(), iRange, 12)
		if (oSquad ~= nil and oSquad:IsAttacking()) then
			self.base_ai:DoSpecialAbilitySquad(DarkEldarHQ.corrosive_id, oSquad:GetSquad())
		end
	end
-- Disabled as DE AI now gets sufficient Soul bonuses via tweak!
--[[
	-- Don't use major soul-expensive HQ abilities as we need souls to get to Tier6!
   	if (cpu_manager:GetTierLevel() < 6) then
		return
	end
]]
	-- Piercing Vision: Temporarily increases the sight and keen sight radiuses of all HQs that is meant for spying on nearbye enemy bases and detecting enemy threats or infiltrators. (Soul Cost: 200)
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	local visionChance = math.random (1,100)
	if (visionChance < 20) then --and (iRequisition > 4000 and iPower > 4000) then
		Ability.DoAbilityArea(self.base_ai, DarkEldarHQ.vision_id, Ability.Filters.CloseInfiltratedEnemy, 60, 1)
	end

	-- Rekindle Rage: All abilities, health, and morale of target regenerate instantly and the target becomes invulnerable for a duration. (Soul Cost: 800)
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	local rageChance = math.random (1,100)
	if (rageChance < 5) then --and (iRequisition > 6000 and iPower > 6000) then
		if (self.base_ai:CanDoAbility(DarkEldarHQ.rage_id)) then
			local range = self.base_ai:GetAbilityRange( DarkEldarHQ.rage_id )	
			local squad_filter = function( squad_ai )		
				return squad_ai:IsInCombat() and squad_ai:GetNumTroopers() >= 4 and not squad_ai:IsCapturing()
			end	
   			local target_squad = cpu_manager:GetClosestSquad( self.base_ai:GetPosition(), range, squad_filter )
			if (target_squad ~= nil) then
				self.base_ai:DoSpecialAbilitySquad( DarkEldarHQ.rage_id, target_squad:GetSquad() )
 			end
		end
	end

	--[[ Screams of the damned: Fills the battlefield with the horrifying wails of the victims of Dark Eldar torturers. Temporarily reduces morale of all enemy units. (Soul Cost: 200)
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	local screamChance = math.random (1,100)
	if (screamChance < 15) then --and (iRequisition > 4500 and iPower > 4500) then
		if (self.base_ai:CanDoAbility(DarkEldarHQ.scream_id)) then
			Ability.DoAbilityArea( self.base_ai, DarkEldarHQ.scream_id, Ability.Filters.CloseInfantryEnemy, 70, 6)
		end
	end]]

	-- Soul Storm: Moveable aura that causes all nearby to take damage (Soul Cost: 1000)
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	local soulstormChance = math.random (1,100)
	if (self.base_ai:CanDoAbility(DarkEldarHQ.soulstorm_id)) then --and (iRequisition > 8000 and iPower > 8000)) then
		if ( (cpu_manager.terrain_analyzer:HasThreat( self.base_ai:GetPosition(), 30 ) and soulstormChance > 25)
		or (cpu_manager.terrain_analyzer:HasThreat( self.base_ai:GetPosition(), 50 ) and soulstormChance > 50) ) then
			
			-- Only activate if enemy unit is attacking
			local iRange = self.base_ai:GetAbilityRange(DarkEldarHQ.soulstorm_id)
			local oSquad = Ability.Filters.CloseEnemy(self.base_ai:GetPosition(), iRange, 24)
			if (oSquad ~= nil and oSquad:IsAttacking()) then
				self.base_ai:DoSpecialAbilitySquad(DarkEldarHQ.soulstorm_id, oSquad:GetSquad())
			end
		end
	end

	-- War Frenzy: Force Labors the Dark Eldar slaves to do your will. Increases the construction, repair, and production rates of all slaves and structures for a duration. (Soul Cost: 300)
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	local frenzyChance = math.random (1,100)
	if (frenzyChance < 10) then
		if (self.base_ai:CanDoAbility(DarkEldarHQ.frenzy_id)) then -- and (iRequisition > 5000 and iPower > 5000)) then
			self.base_ai:DoSpecialAbility(DarkEldarHQ.frenzy_id)
		end
	end

	-- Speed Frenzy: Hastens the agility and stamina of all units with powerful dark energies. Temporarily boosts the movement speed of all units. (Soul Cost: 200)
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	local speedChance = math.random (1,100)
	if (speedChance < 15) then
		if (self.base_ai:CanDoAbility(DarkEldarHQ.speed_id)) then --and (iRequisition > 5500 and iPower > 5500)) then
			self.base_ai:DoSpecialAbility(DarkEldarHQ.speed_id)
		end
	end

	-- Annihilation Beam: Focuses a devastating soul beam at the designated target, dealing critical damage to all nearby enemy units and structures within a 7m radius. 
	-- Not mobile, but can further harass enemy lines with secondary soul attacks. (Soul Cost: 1500)
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	local beamChance = math.random (1,100)
	if (beamChance < 5) then --and (iRequisition > 9000 and iPower > 9000) then

		if (self.base_ai:CanDoAbility(DarkEldarHQ.beam_id)) then
	
			-- Get closest squad in range
			local iRange = self.base_ai:GetAbilityRange(DarkEldarHQ.beam_id)
			local oSquad = cpu_manager.cpu_player:FindFirstEnemy(self.base_ai:GetPosition(), iRange, 1)
			if (oSquad ~= nil and oSquad:IsAttacking()) then
		
				-- Get stats
				local oStats = oSquad:GetStats()
				if (oStats ~= nil) then
			
					-- Check unit type
					local eClass = oStats:GetClass()
					if (eClass == UnitStatsAI.UC_VehicleHigh or eClass == UnitStatsAI.UC_Commander or
						eClass == UnitStatsAI.UC_MonsterHigh or oSquad:GetNumTroopers() >= 8) then
					
						-- Use annihilation beam ability on squad
						self.base_ai:DoSpecialAbilitySquad(DarkEldarHQ.beam_id, oSquad:GetSquad())
					end
				end	
			end
		end
	end
end

