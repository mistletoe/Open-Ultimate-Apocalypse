----------------------------------------
-- File: 'darkeldarbuildbasestrategy.ai'
-- Edited by Thudmeizer @ 16.11.2016

class 'DarkEldarBuildBaseStrategy' (BuildBaseStrategy)

function DarkEldarBuildBaseStrategy:__init( baseinfo ) super( baseinfo )

	-- Add detector units (Best first, worst last)
	self:AddDetectorUnit("dark_eldar_squad_wych")
	self:AddDetectorUnit("dark_eldar_squad_haemonculus")
	
	-- Phases of attacks. If army is decreased substantially, or build only titans: modify.
	self.m_iArmyBuild = math.random(0, 4) -- 4 phases total. If 4 armies was defeated, stop creating armies as it is pointless. Build titans and focus on build order strategy.
	self.m_iArmyHighestStrength = 0 -- Maximum possible army strength I ever had.

	-- Build first HQ at start pos
	self.m_iNumHQAtStartPos = 1
end

function DarkEldarBuildBaseStrategy:ChooseBuildProgram()

	-- Check build program count
	if (table.getn(self.info.BuildPrograms) ~= 2) then
		return BuildBaseStrategy.ChooseBuildProgram(self)
	end
	-- Set probabilities of the strategies according to the map size
	local iBuildProgram1	-- Normal
	return 1
end

function DarkEldarBuildBaseStrategy:EvaluateSquadCap()
	
	-- Check if any caravels are in production
	local iBuildingID = cpu_manager.stats:GetBuildingID("dark_eldar_slave_caravel")
	if (self:PlanExists("Build Building Plan", iBuildingID)) then
		return
	end

	-- Check squad and support cap
	if (self:CheckSquadCap(300, 0) or self:CheckSupportCap(150, 300)) and (self:GetBuildingCountByName("dark_eldar_slave_caravel") <= 8)  then
		
		-- Build a caravel
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Building
		tBuildType.name = "dark_eldar_slave_caravel"
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic build of "..tBuildType.name)
		end
		return
	end
end

function DarkEldarBuildBaseStrategy:GetBuildingName( sType )

	-- Return race specific object string
	if (sType == "HQ") then
		return "dark_eldar_hq"
		
	elseif (sType == "Generator") then
		return "dark_eldar_plasma_generator"
		
	elseif (sType == "BiggerGenerator") then
		return "dark_eldar_thermo_plasma"
		
	elseif (sType == "VehicleBuilding") then
		return "dark_eldar_skimmer_shop" 
		
	elseif (sType == "ListeningPost") then
		return "dark_eldar_listening_post"
		
	elseif (sType == "Turret") then
		return "dark_eldar_turret"
		
	elseif (sType == "Mine") then
		return "dark_eldar_mine_field"
	end
	return nil
end

function DarkEldarBuildBaseStrategy:GetAddonBuilding( sType )

	if (sType == "addon_dark_eldar_gruesome_display") then
		return "dark_eldar_slave_caravel"

	elseif (sType == "addon_dark_eldar_slave_graveyard") then
		return "dark_eldar_slave_caravel"
		
	elseif (sType == "addon_dark_eldar_list_post_1") then
		return "dark_eldar_listening_post"
		
	elseif (sType == "addon_dark_eldar_list_post_2") then
		return "dark_eldar_listening_post"

	elseif (sType == "addon_dark_eldar_list_post_dark_lance") then
		return "dark_eldar_listening_post"
		
	elseif (sType == "addon_dark_eldar_turret") then
		return "dark_eldar_turret"
		
	elseif (sType == "addon_dark_eldar_gruesome_display_building") then
		return "dark_eldar_haemonculus_laboratory"

	elseif (sType == "addon_dark_eldar_gruesome_display_building") then
		return "dark_eldar_hall_of_blood"

	elseif (sType == "addon_dark_eldar_gruesome_display_building") then
		return "dark_eldar_skimmer_shop"

	elseif (sType == "addon_dark_eldar_gruesome_display_building") then
		return "dark_eldar_soul_cage"

	elseif (sType == "addon_dark_eldar_gruesome_display_building") then
		return "dark_eldar_wych_cult_arena"

	elseif (sType == "addon_dark_eldar_hq_1") then
		return "dark_eldar_hq"
		
	elseif (sType == "addon_dark_eldar_hq_2") then
		return "dark_eldar_hq"
	end
	return nil
end

-- Inherited method to check if an addon is a tier addon
function DarkEldarBuildBaseStrategy:IsTierAddon( sName, iTargetTier )

	-- Check addon name and target tier
	if (sName == "addon_dark_eldar_hq_1" and iTargetTier == 2) then
		return true
	elseif (sName == "addon_dark_eldar_hq_2" and iTargetTier == 3) then
		return true
	end
	return false
end

-- Returns the squad cap and support cap of the given squad
function DarkEldarBuildBaseStrategy:GetUnitStats(sSquadName)

	if (sSquadName == "dark_eldar_squad_mandrake") then
		return 2, 0
	elseif (sSquadName == "dark_eldar_squad_warrior") then
		return 2, 0
	elseif (sSquadName == "dark_eldar_squad_hellion") then
		return 2, 0
	elseif (sSquadName == "dark_eldar_squad_scourge") then
		return 2, 0
	elseif (sSquadName == "dark_eldar_squad_wych") then
		return 2, 0
	elseif (sSquadName == "dark_eldar_squad_warrior_trueborn") then
		return 5, 0
	elseif (sSquadName == "dark_eldar_squad_wrack") then
		return 5, 0
	elseif (sSquadName == "dark_eldar_squad_warp_beast") then
		return 6, 0
	elseif (sSquadName == "dark_eldar_squad_clawed_warp_beast") then
		return 6, 0
	elseif (sSquadName == "dark_eldar_squad_reaver") then
		return 1, 1
	elseif (sSquadName == "dark_eldar_squad_raven") then
		return 0, 2
	elseif (sSquadName == "dark_eldar_squad_ravager") then
		return 0, 4
	elseif (sSquadName == "dark_eldar_squad_raider") then
		return 0, 2
	elseif (sSquadName == "dark_eldar_squad_reaper") then
		return 0, 3
	elseif (sSquadName == "dark_eldar_squad_talos") then
		return 0, 3
	elseif (sSquadName == "dark_eldar_squad_araspida") then
		return 0, 3
	elseif (sSquadName == "dark_eldar_squad_tormentor") then
		return 4, 4
	elseif (sSquadName == "dark_eldar_squad_tormentor_assault") then
		return 4, 4
	elseif (sSquadName == "dark_eldar_squad_shadow") then
		return 0, 5
	elseif (sSquadName == "dark_eldar_squad_phoenix") then
		return 0, 8
	elseif (sSquadName == "dark_eldar_squad_agony_titan") then
		return 2, 0
	elseif (sSquadName == "dark_eldar_squad_agony_titan_deployed") then
		return 2, 0
	end
	return 0, 0
end

function DarkEldarBuildBaseStrategy:UpdateTierLevel()
	
	-- Reset tier level
	self.tierLevel = 1

	-- Prepare
	local iHQAddon1ID = cpu_manager.stats:GetAddOnID("addon_dark_eldar_hq_1")
	local iHQAddon2ID = cpu_manager.stats:GetAddOnID("addon_dark_eldar_hq_2")
	local oStats = cpu_manager.stats:GetPlayerStatsFromID( cpu_manager.player_id )
	
	-- Check HQ's for addons
	for oBase in oStats:GetBases() do

		-- Check for valid building
		if (oBase:IsValid() and not oBase:IsListeningPost()) then

			-- Check tier 5 
			if cpu_manager.cpu_player:IsResearchComplete("dark_eldar_apocalypse_research") then
				self.tierLevel = 6
				return
			elseif cpu_manager.cpu_player:IsResearchComplete("dark_eldar_tier4_research") then
				self.tierLevel = 5
				return
			elseif cpu_manager.cpu_player:IsResearchComplete("dark_eldar_tier3_research") then
				self.tierLevel = 4
				return
			-- Check for HQ addon 2 
			elseif (oBase:HasAddOn(iHQAddon2ID)) then
				self.tierLevel = 3
				return
			-- Check for HQ addon 1 
			elseif (oBase:HasAddOn(iHQAddon1ID)) then
				self.tierLevel = 2
				return
			end
		end
	end
end

function DarkEldarBuildBaseStrategy:BuildFlexible()
  
	-- Locales
	local iArmyStrength = cpu_manager:GetArmyStrength()
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )
	
	if (iArmyStrength >= 1000 or (iPower >= 800 and iRequisition >= 900)) then
		
		-- Dynamic research item syntax: ResearchName, MinTier, RequisitionCost, PowerCost, MinSquadCap, MinSupportCap, SquadName, SquadMinCount
		local iCommanderSquads	= self:CountSquads("dark_eldar_squad_archon") + self:CountSquads("dark_eldar_squad_haemonculus")
		local iInfantrySquads	= self:CountSquads("dark_eldar_squad_mandrake") + self:CountSquads("dark_eldar_squad_warrior") + self:CountSquads("dark_eldar_squad_scourge") +
								  self:CountSquads("dark_eldar_squad_wych") + self:CountSquads("dark_eldar_squad_hellion")
		local iVehicleSquads	= self:CountSquads("dark_eldar_squad_reaver") + self:CountSquads("dark_eldar_squad_raider") + self:CountSquads("dark_eldar_squad_reaper") +
								  self:CountSquads("dark_eldar_squad_talos") + self:CountSquads("dark_eldar_squad_ravager") + self:CountSquads("dark_eldar_squad_rampage") + self:CountSquads("dark_eldar_squad_shadow")
		
		-- Compute tier 1 researches
		if (self.tierLevel >= 1) then
		
			-- Compute infantry researches
			if (self:CountSquads("dark_eldar_squad_mandrake") >= 1) then
				self:DynamicResearch("dark_eldar_infiltration_mandrake_research", 1, 50, 25, 0, 0, nil, 0)
			end
	
			-- Compute secondary researches
			if (iArmyStrength >= 750) then

				-- Compute Soulshock defenses
				self:DynamicResearch("dark_eldar_upgrade_soulshock", 1, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 100
				
				-- Compute infantry researches
				if (iInfantrySquads >= 2) then
					self:DynamicResearch("dark_eldar_fleet_of_foot_research", 1, 50, 50, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_poisoned_blades_research", 1, 75, 75, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_upgrade_soulseeker_ammunition", 2, 100, 40, 0, 0, nil, 0)
				end
			end
			
			-- Compute bonus researches
			if (iArmyStrength >= 1250) then
				
				-- Compute infantry researches
				if (iInfantrySquads >= 3) then
					self:DynamicResearch("dark_eldar_terrorfex_grenade_research", 1, 50, 50, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_upgrade_destructor", 1, 75, 75, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_upgrade_power_scythe", 1, 75, 75, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_range_increase_research", 1, 75, 75, 0, 0, nil, 0)
				end
			end
		end
		
		-- Compute tier 2 researches
		if (self.tierLevel >= 2) then
		
			-- Compute resource researches
			self:DynamicResearch("dark_eldar_upgrade_power_1", 2, 200, 20, 0, 0, nil, 0)
			self:DynamicResearch("dark_eldar_upgrade_requisition_1", 2, 75, 250, 0, 0, nil, 0)
			
			-- Compute Turret upgrade
			self:DynamicResearch("dark_eldar_turret_upgrade1", 2, 150, 150, 0, 0, nil, 0)
			
			-- Compute infantry researches
			if (iInfantrySquads >= 3) then
				self:DynamicResearch("dark_eldar_soul_leach_research", 2, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 60
				self:DynamicResearch("dark_eldar_poisoned_blades_research_2", 2, 100, 100, 0, 0, nil, 0)
			end

			-- Compute jetbike researches
			if (self:CountSquads("dark_eldar_squad_reaver") >= 2) then
				self:DynamicResearch("dark_eldar_reaver_targeting_research", 2, 75, 25, 0, 0, nil, 0)
			end

			-- Compute vehicle researches
			if (iVehicleSquads >= 3) then
				self:DynamicResearch("dark_eldar_upgrade_vehicle_armor", 2, 125, 75, 0, 0, nil, 0)
			end
			
			-- Compute commander researches
			if (self:CountSquads("dark_eldar_squad_incubus") >= 1) then
				self:DynamicResearch("dark_eldar_upgrade_retinue_size_1", 2, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 40
				self:DynamicResearch("dark_eldar_upgrade_retinue_size_2", 2, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 75
			end
		
			-- Compute mandrake researches
			if (self:CountSquads("dark_eldar_squad_mandrake") >= 1) then
				self:DynamicResearch("dark_eldar_upgrade_mandrake_melee", 2, 75, 25, 0, 0, nil, 0)
			end

			-- Compute secondary researches
			if (iArmyStrength >= 1250) then
			
				-- Compute Portal researches
				self:DynamicResearch("dark_eldar_portal_healing_research", 2, 100, 50, 0, 0, nil, 0)
				self:DynamicResearch("dark_eldar_portal_shroud_research", 2, 200, 200, 0, 0, nil, 0)
				self:DynamicResearch("dark_eldar_portal_shroud_shadow_research", 2, 250, 250, 0, 0, nil, 0)
		
				-- Compute infantry researches
				if (iInfantrySquads >= 3) then
					self:DynamicResearch("dark_eldar_horrorfex_grenade_research", 2, 75, 75, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_upgrade_infantry_health", 2, 100, 50, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_haywire_grenade_research", 2, 100, 100, 0, 0, nil, 0)
				end			
			end
			
			-- Compute bonus researches
			if (iArmyStrength >= 1750) then
			
				-- Compute commander researches
				if (iCommanderSquads >= 1) then
					self:DynamicResearch("dark_eldar_crucible_of_malediction_research", 2, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 90
				end
		
				-- Compute infantry researches
				if (iInfantrySquads >= 3) then
					self:DynamicResearch("dark_eldar_upgrade_agonizer", 2, 100, 100, 0, 0, nil, 0)
				end
			end

			-- Compute HQ Tier2 Addons for future HQs
			if (self:GetBuildingCountByName("dark_eldar_hq") > 1) and (iRequisition >= 1000 and iPower >= 500) then
				self:DynamicAddon("addon_dark_eldar_hq_1", 100, 2, 400, 130, 0, 0, nil, nil, false)
			end
		end
		
		-- Compute tier 3 researches
		if (self.tierLevel >= 3) then
		
			-- Compute resource researches
			self:DynamicResearch("dark_eldar_upgrade_power_2", 3, 350, 40, 0, 0, nil, 0)
			self:DynamicResearch("dark_eldar_upgrade_requisition_2", 3, 100, 350, 0, 0, nil, 0)

			-- Compute vehicle researches
			if (iVehicleSquads >= 3) then
				self:DynamicResearch("dark_eldar_upgrade_vehicle_armor_2", 3, 150, 100, 0, 0, nil, 0)
			end
			
			-- Compute Soulshock defenses
			self:DynamicResearch("dark_eldar_upgrade_soulshock_2", 3, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 200

			-- Compute mandrake researches
			if (self:CountSquads("dark_eldar_squad_mandrake") >= 1) then
				self:DynamicResearch("dark_eldar_upgrade_mandrake_melee_2", 3, 100, 65, 0, 0, nil, 0)
			end

			-- Compute secondary researches
			if (iArmyStrength >= 1750) then
				
				-- Compute commander researches
				if (self:CountSquads("dark_eldar_squad_incubus") >= 1) then
					self:DynamicResearch("dark_eldar_upgrade_retinue_size_3", 3, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 150
				end
				
				-- Compute infantry researches
				if (iInfantrySquads >= 3) then
					self:DynamicResearch("dark_eldar_upgrade_commander_health", 3, 60, 60, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_gravity_grenade_research", 3, 100, 100, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_upgrade_soulseeker_ammunition_2", 3, 130, 65, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_upgrade_infantry_health_2", 3, 150, 100, 0, 0, nil, 0)
				end	
			end
			
			-- Compute turret upgrades research
			self:DynamicResearch("dark_eldar_turret_upgrade2", 3, 225, 225, 0, 0, nil, 0)
			self:DynamicResearch("dark_eldar_listening_post_upgrade", 3, 600, 240, 0, 0, nil, 0)


			-- Compute talos researches
			if (self:CountSquads("dark_eldar_squad_talos") >= 1) then
				self:DynamicResearch("dark_eldar_wildfire_research", 3, 50, 75, 0, 0, nil, 0)
			end

			-- Compute HQ Tier3 Addons for future HQs
			if (self:GetBuildingCountByName("dark_eldar_hq") > 1) and (iRequisition >= 3000 and iPower >= 1500) then
				self:DynamicAddon("addon_dark_eldar_hq_2", 50, 3, 500, 500, 0, 0, nil, nil, false)
			end

			-- Compute Tier III
			self:DynamicResearch("dark_eldar_tier3_research", 3, 1000, 1000, 0, 0, nil, 0)
		end
		
		-- Compute tier 4 researches
		if (self.tierLevel >= 4) then
		
			-- Compute resource researches
			self:DynamicResearch("dark_eldar_upgrade_power_3", 4, 500, 60, 0, 0, nil, 0)
			self:DynamicResearch("dark_eldar_upgrade_requisition_3", 4, 125, 450, 0, 0, nil, 0)

			-- Compute vehicle researches
			if (iVehicleSquads >= 3) then
				self:DynamicResearch("dark_eldar_upgrade_vehicle_armor_3", 4, 175, 125, 0, 0, nil, 0)
			end

			-- Compute warp beast researches
			if (self:CountSquads("dark_eldar_squad_warp_beast") >= 1) then
				self:DynamicResearch("dark_eldar_upgrade_warp_beast_morale", 4, 130, 70, 0, 0, nil, 0)
				self:DynamicResearch("dark_eldar_upgrade_warp_beast_morale_2", 4, 150, 100, 0, 0, nil, 0)
			end
	
			-- Compute dias research
			if (self:CountSquads("dark_eldar_squad_dais_of_destruction") >= 1) then
				self:DynamicResearch("dark_eldar_dais_research", 4, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 200
			end

			-- Compute bonus researches
			if (iArmyStrength >= 2250) then
		
				-- Compute infantry researches
				if (iInfantrySquads >= 3) then
					self:DynamicResearch("dark_eldar_upgrade_commander_health_2", 4, 80, 80, 0, 0, nil, 0)
					self:DynamicResearch("dark_eldar_range_increase_research_2", 4, 100, 100, 0, 0, nil, 0)
				end
			end

			-- Compute Structure Relocation if we have extra resources to burn
			if (iPower >= 5000 and iRequisition >= 5000) then
				self:DynamicResearch("dark_eldar_portal_relocation_research", 4, 200, 200, 0, 0, nil, 0)
			end

			-- Compute soulharvest research
			self:DynamicResearch("dark_eldar_soulharvest_research", 4, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 500

			-- Compute Tier IV research
			self:DynamicResearch("dark_eldar_tier4_research", 4, 1500, 1500, 0, 0, nil, 0)
		end
	
		-- Compute tier 5 researches
		if (self.tierLevel >= 5) then

			-- Compute resource researches
			self:DynamicResearch("dark_eldar_upgrade_power_4", 5, 650, 80, 0, 0, nil, 0)
			self:DynamicResearch("dark_eldar_upgrade_requisition_4", 5, 150, 550, 0, 0, nil, 0)
			
			-- Compute Apocalypse
			if self:HasCriticalLocation() then
				self:DynamicResearch("dark_eldar_apocalypse_research", 5, 3000, 3000, 0, 0, nil, 0)	-- Soul Cost: 3000
			end
		end
	
		-- Compute tier 6 researches
		if (self.tierLevel >= 6) then

			-- Compute resource researches
			self:DynamicResearch("dark_eldar_upgrade_power_5", 6, 800, 100, 0, 0, nil, 0)
			self:DynamicResearch("dark_eldar_upgrade_requisition_5", 6, 300, 1100, 0, 0, nil, 0)

			-- Compute donations and the end game
			self:DynamicResearch("dark_eldar_donate1_research", 6, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 1000
			self:DynamicResearch("dark_eldar_donate2_research", 6, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 2000
			self:DynamicResearch("dark_eldar_donate3_research", 6, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 3000
			self:DynamicResearch("dark_eldar_donate4_research", 6, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 4000
			self:DynamicResearch("dark_eldar_donate5_research", 6, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 5000
			
			-- Compute Commorragh research
			self:DynamicResearch("dark_eldar_cities_of_commorah_research", 6, 0, 0, 0, 0, nil, 0)	-- Soul Cost: 10000
		end
	end
	
	-- Restrict dynamic builds to hard difficulty or higher
	if (CpuManager.AISettings.bMultiBuildings) then
	
		-- Dynamic buildings
		-- Item-Syntax: BuildingName, BuildingCount, MinTier, MinRequisition, MinPower, MinSquadCap, MinSupportCap
		self:DynamicBuild("dark_eldar_hq", 2, 1, 700, 150, 0, 0)
		self:DynamicBuild("dark_eldar_plasma_generator", 6 * self:GetBuildingCountByName("dark_eldar_hq"), 3, 500, 0, 0, 0)

		-- Dynamically regulate quantity of defensive buildings based on how many strats/crits/relics we have through the tiers so we avoid cluttering/bottlenecking on maps with limited points
		if (self.tierLevel >= 2 and (iRequisition >= 1500 and iPower >= 1500)) then
    			if (resource_manager:GetNumOwnedStrategicPoints() < 4) or (resource_manager:GetNumOwnedStrategicPoints() < 3 and self:HasCriticalLocation()) or (resource_manager:GetNumOwnedStrategicPoints() < 3 and self:HasRelic()) then
				self:DynamicBuild("dark_eldar_turret", 2, 2, 600, 500, 0, 0)
				self:DynamicBuild("dark_eldar_mine_field", 2, 2, 500, 400, 0, 0)
				self:DynamicBuild("dark_eldar_portal", 1, 2, 500, 500, 0, 0)
				self:DynamicBuild("dark_eldar_turret", 3, 3, 600, 500, 0, 0)
				self:DynamicBuild("dark_eldar_mine_field", 3, 3, 500, 400, 0, 0)
				self:DynamicBuild("dark_eldar_portal", 2, 3, 500, 500, 0, 0)
				self:DynamicBuild("dark_eldar_wall", 2, 3, 500, 100, 0, 0)
   			end
		else
   			if (resource_manager:GetNumOwnedStrategicPoints() > 3) or (resource_manager:GetNumOwnedStrategicPoints() > 2 and self:HasCriticalLocation()) or (resource_manager:GetNumOwnedStrategicPoints() > 2 and self:HasRelic()) then
				self:DynamicBuild("dark_eldar_turret", 3, 2, 600, 500, 0, 0)
				self:DynamicBuild("dark_eldar_mine_field", 2, 2, 500, 400, 0, 0)
				self:DynamicBuild("dark_eldar_portal", 1, 2, 500, 500, 0, 0)
				self:DynamicBuild("dark_eldar_wall", 3, 3, 500, 100, 0, 0)
				self:DynamicBuild("dark_eldar_turret", 6, 3, 600, 500, 0, 0)
				self:DynamicBuild("dark_eldar_mine_field", 6, 3, 500, 400, 0, 0)
				self:DynamicBuild("dark_eldar_portal", 2, 3, 500, 500, 0, 0)
				self:DynamicBuild("dark_eldar_wall", 6, 3, 700, 300, 0, 0)
			end
		end

		if (self.tierLevel >= 4 and (iRequisition >= 2500 and iPower >= 2500)) then
    			if (resource_manager:GetNumOwnedStrategicPoints() > 4) or (resource_manager:GetNumOwnedStrategicPoints() > 3 and self:HasCriticalLocation()) or (resource_manager:GetNumOwnedStrategicPoints() > 3 and self:HasRelic()) then
				self:DynamicBuild("dark_eldar_turret", 8, 4, 600, 500, 0, 0)
				self:DynamicBuild("dark_eldar_mine_field", 8, 4, 500, 400, 0, 0)
				self:DynamicBuild("dark_eldar_portal", 3, 4, 500, 500, 0, 0)
				self:DynamicBuild("dark_eldar_wall", 8, 4, 500, 100, 0, 0)
				self:DynamicBuild("dark_eldar_turret", 10, 5, 600, 500, 0, 0)
				self:DynamicBuild("dark_eldar_mine_field", 10, 5, 500, 400, 0, 0)
				self:DynamicBuild("dark_eldar_portal", 4, 5, 500, 500, 0, 0)
				self:DynamicBuild("dark_eldar_wall", 10, 5, 500, 100, 0, 0)
				self:DynamicBuild("dark_eldar_turret", 12, 6, 600, 500, 0, 0)
				self:DynamicBuild("dark_eldar_mine_field", 12, 6, 500, 400, 0, 0)
				self:DynamicBuild("dark_eldar_wall", 12, 6, 500, 100, 0, 0)
			end
		end

		-- Build additional support buildings as tiers progress
		if (self.tierLevel >= 2) then
			if (iRequisition >= 2000 and iPower >= 2000) then
				self:DynamicBuild("dark_eldar_hall_of_blood", 2, 2, 1500, 0, 0, 0) 
				self:DynamicBuild("dark_eldar_skimmer_shop", 2, 3, 500, 1000, 0, 0)
				self:DynamicBuild("dark_eldar_hq", 3, 4, 1000, 500, 0, 0)
				self:DynamicBuild("dark_eldar_hq", 4, 5, 2000, 1000, 0, 0)
				self:DynamicBuild("dark_eldar_hq_sp_dxp3", 2, 5, 10000, 10000, 0, 0)
			end
		end

		-- Build additional uber buildings in later tiers
		if (self.tierLevel >= 6) then
			if (iRequisition >= 3000 and iPower >= 3000) then
				self:DynamicBuild("dark_eldar_hall_of_blood", 3, 6, 3000, 0, 0, 0) 
				self:DynamicBuild("dark_eldar_skimmer_shop", 3, 6, 3500, 2000, 0, 0)
				self:DynamicBuild("dark_eldar_corruptedgate", 2, 6, 7000, 7000, 0, 0)
				self:DynamicBuild("dark_eldar_hq_sp_dxp3", 3, 6, 15000, 15000, 0, 0)
			end
		end

		-- Build additional Superweapons if we have excess resources
		if (iRequisition >= 12000 and iPower >= 12000) then
			self:DynamicBuild("dark_eldar_hq_sp_dxp3", 4, 6, 16000, 16000, 0, 0)
			self:DynamicBuild("dark_eldar_hq_sp_dxp3", 5, 6, 17000, 17000, 0, 0)
			self:DynamicBuild("dark_eldar_hq_sp_dxp3", 6, 6, 18000, 18000, 0, 0)
		end
	end

	-- At this stage, every structure is free
	if (cpu_manager.cpu_player:IsResearchComplete("dark_eldar_cities_of_commorah_research")) then 
			
		-- Choose what to build.
		self.m_iWantToBuild = math.random(0, 3)
			
		if (self.m_iWantToBuild == 0) then -- Build defenses
			self:DynamicBuild("dark_eldar_wall", 20, 6, 0, 0, 0, 0)
			self:DynamicBuild("dark_eldar_mine_field", 20, 6, 0, 0, 0, 0)
			self:DynamicBuild("dark_eldar_turret", 20, 6, 0, 0, 0, 0)
				
		elseif (self.m_iWantToBuild == 1) then -- Build production structures
			self:DynamicBuild("dark_eldar_hall_of_blood", 3, 6, 0, 0, 0, 0) 
			self:DynamicBuild("dark_eldar_skimmer_shop", 3, 6, 0, 0, 0, 0)
			self:DynamicBuild("dark_eldar_corruptedgate", 3, 6, 0, 0, 0, 0)
				
		elseif (self.m_iWantToBuild == 2) then -- Build economic structures
			self:DynamicBuild("dark_eldar_plasma_generator", 6 * self:GetBuildingCountByName("dark_eldar_hq"), 1, 0, 0, 0, 0)
			self:DynamicBuild("dark_eldar_hq", 4, 6, 2000, 1500, 0, 0)
			self:DynamicBuild("dark_eldar_soul_cage", 4, 6, 0, 0, 0, 0)
			
		elseif (self.m_iWantToBuild == 3) then -- Build portals
			self:DynamicBuild("dark_eldar_portal", 10, 6, 0, 0, 0, 0)
		end
			
		-- Immediately build all Citadels since they are now free
		self:DynamicBuild("dark_eldar_hq_sp_dxp3", 6, 6, 0, 0, 0, 0)
	end
	
	-- Ensure murdered slaves are available to be harvested for the soul resource
	self:BuildSoulSlaves()

	-- Build nukes
	if cpu_manager.cpu_player:IsResearchComplete("dark_eldar_donate5_research") then

		-- Build nuke
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Squad
		
		tBuildType.name = "dark_eldar_squad_soulstorm_cataclysm"
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic build of "..tBuildType.name)
		end
	end
end

function DarkEldarBuildBaseStrategy:BuildSoulSlaves()

	if (self:GetBuildingCountByName("dark_eldar_slave_caravel_ai") > 0) then

		-- Build murdered slave
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Squad
		
		tBuildType.name = "dark_eldar_squad_slave_murdered_ai"
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic build of "..tBuildType.name)
		end
	end

	if (self:GetBuildingCountByName("dark_eldar_slave_caravel") > 0) then

		-- Build other murdered slave
		local tBuildType = CpuBuildType()
		tBuildType.btype = CpuPrerequisites.BT_Squad
		
		tBuildType.name = "dark_eldar_squad_slave_murdered"
		if (self:TryBuild( tBuildType )) then
			aitrace("BuildController: Dynamic build of "..tBuildType.name)
		end
	end
end

-- Method to check if force tech should be computed
function DarkEldarBuildBaseStrategy:ForceTech()

	-- Check time
	if (g_iGMT < 60 * CpuManager.ForceTech.StartTier1) then
		return false
	end

	-- Check resources
	local iRequisition = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Requisition )
	local iPower = resource_manager:GetResourceAmount():Get( ResourceAmount.RT_Power )

	-- Check tier
	local iTierLevel = self:GetTierLevel()
	if (iTierLevel == 1) then
	
		-- Check resources
		if (iRequisition > 600 and iPower > 200) then
			return false
		end
		return not self.m_bHQAddon1
		
	elseif (iTierLevel == 2) then
	
		-- Check for wych cult arena
		if (self:GetBuildingCountByName("dark_eldar_wych_cult_arena", false) < 1) then
			return true
		end

		-- Check time
		if (g_iGMT > 60 * CpuManager.ForceTech.StartTier2 and (iRequisition < 600 or iPower < 600)) then
			return true
		end
		
	elseif (iTierLevel == 3) then	

		-- Check time
		if (g_iGMT > 60 * CpuManager.ForceTech.StartTier3 and (iRequisition < 1100 or iPower < 1100)) then
			return true
		end
	end
	return false
end

-- Return placement type for buildings
function DarkEldarBuildBaseStrategy:GetPlacementType(iBuildingID)
	
	-- Check building
	if (iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_hq")) then
        	local count = self:GetBuildingCountByName("dark_eldar_hq", false)
		local friend = cpu_manager:FindClosestFriendPlayer()
		if friend == nil then
			-- Lone Player
                	if count == 0 and not cpu_manager:HQThreat() then
                    		return "HQ"
                	else
                    		return "Safeplace"
                	end
        	else
        		-- Has allies
                	if count > 2 or cpu_manager:HQThreat() then
 				return "HQ"
                	else
				return "Safeplace"
                	end
		end
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_hall_of_blood") or
		iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_skimmer_shop") or
		iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_corruptedgate") or
	        iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_slave_caravel_ai") or
		iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_hq_sp_dxp3")) then
		return "Military"
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_portal")) then
		return "Front1"	
	elseif (iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_turret") or
		iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_wall") or
		iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_mine_field")) then
		return "Front2"
	elseif (cpu_manager:IsGenerator(iBuildingID) or
		iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_haemonculus_laboratory") or
		iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_wych_cult_arena") or
		iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_soul_cage") or
		iBuildingID == cpu_manager.stats:GetBuildingID("dark_eldar_slave_caravel")) then
		return "BaseBack"
	end
	return "Basic"
end

function DarkEldarBuildBaseStrategy:HQEmergency()

	-- Check HQ count
	local iHQCount = self:GetBuildingCountByName("dark_eldar_hq")
	if (iHQCount >= 2) then
		return false
	end

	-- Build a second HQ if first one is severly damaged
	local bHQDamaged = false
	for oBuilding in military_manager:GetBases() do
	
		-- Check for valid building
		if (oBuilding:IsValid() and not oBuilding:IsListeningPost() and oBuilding:GetBaseName() == "dark_eldar_hq") then
	  
			-- Check health
			if (oBuilding:GetHealthPercentage() < 0.6) then

				-- Adjust current build program
				for iLoop1 = 1, table.getn(self.info.BuildPrograms[self.m_iCurrentBuildProgram]) do
				
					-- Search HQ entry and set build count to two
					if (self.info.BuildPrograms[self.m_iCurrentBuildProgram][iLoop1][7] == "dark_eldar_hq") then
						self.info.BuildPrograms[self.m_iCurrentBuildProgram][iLoop1][5] = 2
						return true
					end
				end
			end
		end
	end
	return false
end

-- Arkhan 03.2006: Inherited method to modify squad demand
function DarkEldarBuildBaseStrategy:ModifySquadDemand(iUnitID)

	-- No more shield gens then squads 
	if (iUnitID == cpu_manager.stats:GetSquadID("dark_eldar_squad_araspida")) then
		
		-- Check number of attachable squads 
		local gens_attach = function ( squad_ai )
			return (squad_ai:GetTactic():GetUnitStrength() >= 250 and squad_ai:CanReceiveAttachment())
		end
		local num_attach = self:CountSquads("dark_eldar_squad_mandrake", gens_attach) +
				   self:CountSquads("dark_eldar_squad_warrior", gens_attach) +
				   self:CountSquads("dark_eldar_squad_wych", gens_attach) +
				   self:CountSquads("dark_eldar_squad_warp_beast", gens_attach) + 
				   self:CountSquads("dark_eldar_squad_warrior_trueborn", gens_attach) + 
				   self:CountSquads("dark_eldar_squad_wrack", gens_attach) 
 
 		-- Check gen count
		local num_gens = self:CountSquads("dark_eldar_squad_araspida")
		if (num_gens >= num_attach) then
			return 0
		end	
	end
	return BuildBaseStrategy.ModifySquadDemand(self, iUnitID)
end

-- Arkhan 11.2006: Virtual method for checking out relic units
function DarkEldarBuildBaseStrategy:RelicRequired(sName)

	-- Check name
	if (sName == "dark_eldar_squad_dais_of_destruction") then
		return true
	end
	return false
end