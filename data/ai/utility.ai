--------------------------------------------------------------------------------------------------------------
-- CONSTANTS -------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

VALUE_NEVER_BUILD		= -400000
VALUE_LOCK_BUILD		= -200000

-- above this should never be built
VALUE_TOO_MANY_REQS		= -150000
VALUE_NO_BUILD			= -100000
VALUE_CAP				= -50000
VALUE_RESOURCE_RATE		= -25000
VALUE_BUILD_TIME		= -10000

VALUE_PER_TIER			= -200


VALUE_PROMOTE_BUILD		= 200000
INT_MAX					= 100000


--------------------------------------------------------------------------------------------------------------
-- Logging funcitons --------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

stack_trace_num = 0
tracing = {}


function aitrace( msg )

	profile_start("aitrace")

	for i = 0, stack_trace_num-1 do
		msg = ("   "..msg)
	end

	table.insert(tracing, msg)
	
	profile_end("aitrace")
end


function aipushtrace( name )
	aitrace( name )
	stack_trace_num = stack_trace_num + 1
end


function aipoptrace( name )
	stack_trace_num = stack_trace_num - 1
	aitrace( name )
end


--------------------------------------------------------------------------------------------------------------
-- Utility Fns -------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------


function dbAssert( b )
	if( b == false ) then
		local source, line = dbGetLine()
		ai_assert = true
		local msg = "Assertion failed at "..source..", line "..line
		aitrace(msg)
		dbBreak()
		error(msg)
	end
end


function foreach_bind( tbl, func, ... )

	local ret_val = nil
	
	local arg_count = arg.n
	for i in tbl do
		if( arg_count == 0) then
			ret_val = func( tbl[i] )
		elseif( arg_count == 1) then
			ret_val = func( arg[1], tbl[i] )
		elseif( arg_count == 2) then
			ret_val = func( arg[1], arg[2], tbl[i] )
		elseif( arg_count == 3) then
			ret_val = func( arg[1], arg[2], arg[3], tbl[i] )
		elseif( arg_count == 4) then
			ret_val = func( arg[1], arg[2], arg[3], arg[4], tbl[i] )
		end
		
		if( ret_val ~= nil ) then
			break
		end
	end
	
	return ret_val

end

function GenerateUnitEffectiveness()
	effectiveness = {}
	
	effectiveness[ UnitStatsAI.UC_LightInfantryLow ] 	= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_LightInfantryMed ] 	= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_LightInfantryHigh ] 	= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_HeavyInfantryMed ] 	= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_HeavyInfantryHigh ] 	= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_VehicleLow ] 			= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_VehicleMed ] 			= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_VehicleHigh ] 		= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_MonsterMed ] 			= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_MonsterHigh ] 		= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_Commander ] 			= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_BuildingLow ] 		= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_BuildingMed ] 		= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_BuildingHigh ] 		= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_AirLow ]		 		= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_AirMed ] 				= math.random(5.0,10.0)
	effectiveness[ UnitStatsAI.UC_AirHigh ] 			= math.random(5.0,10.0)

	return effectiveness
end


function distance( vec1, vec2 )
	dbAssert( vec1 ~= nil )
	dbAssert( vec2 ~= nil )

	local v1 = vec1
	v1.y = 0
	local v2 = vec2
	v2.y = 0
	return (v1 - v2):Length()
end

function distance_sqr( vec1, vec2 )

	dbAssert( vec1 ~= nil )
	dbAssert( vec2 ~= nil )

	local v1 = vec1
	v1.y = 0
	local v2 = vec2
	v2.y = 0
	return (v1 - v2):LengthSqr()
end

function vec2str( vec )
   
   if vec ~= nil then
	  local txt = "<"..string.format("%.1f",vec.x)..","..string.format("%.1f",vec.y)..","..string.format("%.1f",vec.z)..">"
   
	  return txt
   end

   return "nil"
end


--------------------------------------------------------------------------------------------------------------
-- Profiling -------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

g_profile = false

function profile_start(name)
	
	if g_profile then
		aiprofile_start( cpu_manager.cpu_player, name )
	end

end

function profile_end(name)

	if g_profile then
		aiprofile_end( cpu_manager.cpu_player, name )
	end

end

--------------------------------------------------------------------------------------------------------------
-- Timer -----------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

class 'Timer'

function Timer:__init( method, object, count )

	self.current_count = 0
	self.count = count
	self.method = method
	self.object = object

end

function Timer:Call()
	
	self.current_count = self.current_count + 1
	
	if self.current_count >= self.count then
		self.current_count = 0
		self.method( self.object )
	end
	
end

