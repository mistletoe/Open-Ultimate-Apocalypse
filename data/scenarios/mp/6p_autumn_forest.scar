-------------------------------------------------
--[[CREDITS]]
-------------------------------------------------
-- Music set-up by s1_ONE
-- Tunnel scripts by s1_ONE (based on Ruosteinen ones)

-------------------------------------------------
--[[ IMPORTS ]]
-------------------------------------------------
import("scarUtil.scar")
import("WXPScarUtil.scar")

-------------------------------------------------
--[[ON GAME SETUP]]
-------------------------------------------------
g_Player1 = World_GetPlayerAt(0)
g_Player2 = World_GetPlayerAt(1)
g_Player3 = World_GetPlayerAt(2)
g_Player4 = World_GetPlayerAt(3)
g_Player5 = World_GetPlayerAt(4)
g_Player6 = World_GetPlayerAt(5)
g_TunnelDelay = 8
g_EntryCount = 0
g_ExitCount = 0
g_SimulCount = 0
t_Tunnel1Queue = { }
t_Tunnel2Queue = { }
t_Tunnel3Queue = { }
t_Tunnel4Queue = { }

-------------------------------------------------
--[[ ON INITIALIZATION ]]
-------------------------------------------------
function OnInit()
	
	Rule_SetupMusicPlaylist()
    	Rule_Blood_Ambiance()
	Rule_AddInterval( Rule_imperial_eye, 1 )
	Rule_AddInterval( Rule_Tunnel1, 1 )
	Rule_AddIntervalDelay( Rule_Tunnel2, 1, 0.5 ) -- delay the second tunnel to ensure they run at different times. This makes the queuing simpler
	Rule_AddInterval( Rule_Tunnel3, 1 )
	Rule_AddIntervalDelay( Rule_Tunnel4, 1, 0.5 ) -- delay the second tunnel to ensure they run at different times. This makes the queuing simpler
end

--[[ the Scar_AddInit(OnInit) function is mandatory! This registers your init function with scar. ]]
Scar_AddInit(OnInit)


-------------------------------------------------
--[[ TUNNELS ]]
-------------------------------------------------
function Rule_Tunnel1()
--[[gets any squads near to the tunnel entrance and moves them to the tunnel exit]]
	if Player_AreSquadsNearMarker( g_Player1, "mkr_insideTunnel1" ) 
		or Player_AreSquadsNearMarker( g_Player2, "mkr_insideTunnel1" )
		or Player_AreSquadsNearMarker( g_Player3, "mkr_insideTunnel1" )
	then
		-- get the squads and despawn them
		Player_GetAllSquadsNearMarker( g_Player1, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel1" )
		Player_GetAllSquadsNearMarker( g_Player2, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel1" )
		Player_GetAllSquadsNearMarker( g_Player3, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel1" )
		SGroup_DeSpawn( "sg_tunnel"..g_EntryCount )
		g_EntryCount = g_EntryCount+1
		table.insert(t_Tunnel1Queue, 0)
	end
	
	local numQueuing = table.getn(t_Tunnel1Queue)
	if numQueuing > 0 then
		-- loop through table, increasing all values by 1
		for i = 1, numQueuing do
			t_Tunnel1Queue[i] = t_Tunnel1Queue[i] + 1
		end
		
		-- spawns the next squad if it's been in long enough
		if t_Tunnel1Queue[1] >= g_TunnelDelay then
			SGroup_ReSpawnMarker( "sg_tunnel"..g_ExitCount, "mkr_outsideTunnel1" )
			SGroup_Destroy( SGroup_FromName("sg_tunnel"..g_ExitCount) )
			g_ExitCount = g_ExitCount+1
			table.remove(t_Tunnel1Queue, 1)
		end
	end	
end


function Rule_Tunnel2()
--[[gets any squads near to the tunnel entrance and moves them to the tunnel exit]]
	if Player_AreSquadsNearMarker( g_Player1, "mkr_insideTunnel2" ) 
		or Player_AreSquadsNearMarker( g_Player2, "mkr_insideTunnel2" )
		or Player_AreSquadsNearMarker( g_Player3, "mkr_insideTunnel2" )
	then
		-- get the squads and despawn them
		Player_GetAllSquadsNearMarker( g_Player1, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel2" )
		Player_GetAllSquadsNearMarker( g_Player2, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel2" )
		Player_GetAllSquadsNearMarker( g_Player3, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel2" )
		SGroup_DeSpawn( "sg_tunnel"..g_EntryCount )
		g_EntryCount = g_EntryCount+1
		table.insert(t_Tunnel2Queue, 0)
	end
	
	local numQueuing = table.getn(t_Tunnel2Queue)
	if numQueuing > 0 then
		-- loop through table, increasing all values by 1
		for i = 1, numQueuing do
			t_Tunnel2Queue[i] = t_Tunnel2Queue[i] + 1
		end
		
		-- spawns the next squad if it's been in long enough
		if t_Tunnel2Queue[1] >= g_TunnelDelay then
			SGroup_ReSpawnMarker( "sg_tunnel"..g_ExitCount, "mkr_outsideTunnel2" )
			SGroup_Destroy( SGroup_FromName("sg_tunnel"..g_ExitCount) )
			g_ExitCount = g_ExitCount+1
			table.remove(t_Tunnel2Queue, 1)
		end
	end	
end


function Rule_Tunnel3()
--[[gets any squads near to the tunnel entrance and moves them to the tunnel exit]]
	if Player_AreSquadsNearMarker( g_Player4, "mkr_insideTunnel3" ) 
		or Player_AreSquadsNearMarker( g_Player5, "mkr_insideTunnel3" )
		or Player_AreSquadsNearMarker( g_Player6, "mkr_insideTunnel3" )
	then
		-- get the squads and despawn them
		Player_GetAllSquadsNearMarker( g_Player4, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel3" )
		Player_GetAllSquadsNearMarker( g_Player5, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel3" )
		Player_GetAllSquadsNearMarker( g_Player6, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel3" )
		SGroup_DeSpawn( "sg_tunnel"..g_EntryCount )
		g_EntryCount = g_EntryCount+1
		table.insert(t_Tunnel3Queue, 0)
	end
	
	local numQueuing = table.getn(t_Tunnel3Queue)
	if numQueuing > 0 then
		-- loop through table, increasing all values by 1
		for i = 1, numQueuing do
			t_Tunnel3Queue[i] = t_Tunnel3Queue[i] + 1
		end
		
		-- spawns the next squad if it's been in long enough
		if t_Tunnel3Queue[1] >= g_TunnelDelay then
			SGroup_ReSpawnMarker( "sg_tunnel"..g_ExitCount, "mkr_outsideTunnel3" )
			SGroup_Destroy( SGroup_FromName("sg_tunnel"..g_ExitCount) )
			g_ExitCount = g_ExitCount+1
			table.remove(t_Tunnel3Queue, 1)
		end
	end	
end


function Rule_Tunnel4()
--[[gets any squads near to the tunnel entrance and moves them to the tunnel exit]]
	if Player_AreSquadsNearMarker( g_Player4, "mkr_insideTunnel4" ) 
		or Player_AreSquadsNearMarker( g_Player5, "mkr_insideTunnel4" )
		or Player_AreSquadsNearMarker( g_Player6, "mkr_insideTunnel4" )
	then
		-- get the squads and despawn them
		Player_GetAllSquadsNearMarker( g_Player4, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel4" )
		Player_GetAllSquadsNearMarker( g_Player5, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel4" )
		Player_GetAllSquadsNearMarker( g_Player6, "sg_tunnel"..g_EntryCount, "mkr_insideTunnel4" )
		SGroup_DeSpawn( "sg_tunnel"..g_EntryCount )
		g_EntryCount = g_EntryCount+1
		table.insert(t_Tunnel4Queue, 0)
	end
	
	local numQueuing = table.getn(t_Tunnel4Queue)
	if numQueuing > 0 then
		-- loop through table, increasing all values by 1
		for i = 1, numQueuing do
			t_Tunnel4Queue[i] = t_Tunnel4Queue[i] + 1
		end
		
		-- spawns the next squad if it's been in long enough
		if t_Tunnel4Queue[1] >= g_TunnelDelay then
			SGroup_ReSpawnMarker( "sg_tunnel"..g_ExitCount, "mkr_outsideTunnel4" )
			SGroup_Destroy( SGroup_FromName("sg_tunnel"..g_ExitCount) )
			g_ExitCount = g_ExitCount+1
			table.remove(t_Tunnel4Queue, 1)
		end
	end	
end


-------------------------------------------------
--[[ PING  ]]
-------------------------------------------------

Pinged = false

function Rule_imperial_eye()

	if Pinged == false and
	Player_AreSquadsNearMarker(g_Player4, "mkr_imp_spot") == true then
		pg_mkr1 = Ping_Marker("mkr_imp_spot", true, "default")
		Pinged = true
		Rule_AddOneShot(Rule_StopPing, 3)
       	end
end

function Rule_StopPing()
	Ping_Stop(pg_mkr1)
	Pinged = false
end


-------------------------------------------------
--[[ MUSIC ]]
-------------------------------------------------

function Rule_SetupMusicPlaylist()
    t_music = {"music_necron_theme_perc", "MU_IG_STR_SpaceMarine", "MU_IG_STR_SpaceMarine_perc_brass", "MU_IG_STR_ImpGd_perc_voice", "MU_IG_STR_ImpGd", "MU_IG_STR_Chaos_perc_str"}
	t_music_blood_ambiance = {"stinger_mo1_thedaemongate"}

    Playlist_Manager( PC_Music, t_music, true, true , {20, 40})
    
    t_ambient = {"ambient_desert" }
    Playlist_Manager( PC_Ambient, t_ambient, true, true , {5, 10})
    
end

--[[plays this music when the player is near the daemon gate]]
function Rule_Blood_Ambiance()

    if Player_AreSquadsNearMarker(g_Player1, "mkr_Chaos_Gate") or
        Player_AreSquadsNearMarker(g_Player2,"mkr_Chaos_Gate") or
        Player_AreSquadsNearMarker(g_Player3,"mkr_Chaos_Gate") then
        
        Playlist_Manager( PC_Music, t_music_blood_ambiance, true, false , {20, 40})
        Rule_Remove(Rule_Blood_Ambiance)
        
        
    end
end