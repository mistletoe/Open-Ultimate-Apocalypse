--####################################################################################################
--#
--#     Heroes Special main SCAR script
--#
--#     Original Heroes idea and implementation by CutterShane 2006
--#     Heroes Special rework by Arkhan 2007
--#		And then the Cylarne updated it. 2011
--#
--####################################################################################################

import("Player.scar");
import("GroupCallers.scar");
import("Command.scar");
import("Groups.scar");
import("ScarUtil.scar");
import("WXPScarUtil.scar");
import("Heroes/Settings.scar");


-- Arkhan 01.2007: Init constants
UnitTypes = {}
UnitRanks = {}
CommandLevel = {}

-- Arkhan 01.2007: Init globals
g_iPlayer = 0
g_eCurrentPlayerID = nil
g_sCurrentPlayerRace = nil
g_iPlayerCount = 0
g_aLastUpdateTime = {}
g_aUnitList = {}
g_aGenerals = {}
g_iNextPlayerUpdate = 0
g_iNextFXUpdate = 0
g_eUpgradeSquadGroupID = nil
g_eSelectionSquadGroupID = nil
g_eCurrentSquadGroupID = nil
g_iSelectedUnitID = nil
g_iCurrentUnitLevel = 0


-- Init start up data
function Hero_InitRule()

	-- Init heroes
	Reset()
	
	-- Start main rule interval
	Rule_AddInterval(Hero_MainRule, 0.5)
end

function Reset()

	print("Reset Heroes...")

	-- Get player count and game time
	g_iPlayerCount = World_GetPlayerCount()
	local iTime = World_GetGameTime()

	-- Compute all players
	g_aUnitList = {}
	g_aLastUpdateTime = {}
	g_aGenerals = {}
	for iLoop1 = 1, g_iPlayerCount do
	
		-- Get player ID
		local ePlayerID = World_GetPlayerAt(iLoop1 - 1)
		
		-- Set lippy for AI players
		if (Cpu_IsCpuPlayer(ePlayerID) and Cpu_IsEnabled(ePlayerID)) then
			pcall(Cpu_SetLippy, ePlayerID, true)
		end
		
		-- Import race data
		local sPlayerRace = Player_GetRaceName(ePlayerID)
		if (UnitTypes[sPlayerRace] == nil) then
			pcall(import, 'heroes/races/'..sPlayerRace..'.scar')
		end
		
		-- Add unit list entry
		table.insert(g_aUnitList, {})
	
		-- Add last update time entry
		table.insert(g_aLastUpdateTime, iTime)
		
		-- Add generals entry
		table.insert(g_aGenerals, 1)
	end
	
	-- Create squad groups
	g_eUpgradeSquadGroupID = SGroup_CreateIfNotFound("UpgradeSquadGroup")
	g_eSelectionSquadGroupID = SGroup_CreateIfNotFound("SelectionSquadGroup")
	g_eCurrentSquadGroupID = SGroup_CreateIfNotFound("CurrentSquadGroup")
end

-- Hero main rule function (Called each interval)
function Hero_MainRule ()

	-- Validation check
	if (table.getn(g_aUnitList) <= 0 or
		table.getn(g_aLastUpdateTime) <= 0 or
		table.getn(g_aGenerals) <= 0 or
		not SGroup_Exists("UpgradeSquadGroup") or
		not SGroup_Exists("SelectionSquadGroup") or
		not SGroup_Exists("CurrentSquadGroup")) then
		
		-- Reset heroes
		Reset()
	end

	-- Player update only each second
	local iCurrentTime = World_GetGameTime()
	if (iCurrentTime < g_iNextPlayerUpdate) then
		ShowCurrentUnitInfo()
	end
	g_iNextPlayerUpdate = iCurrentTime + 1
	
	-- Get player ID and race of the next player alive
	g_eCurrentPlayerID = nil
	g_sCurrentPlayerRace = nil
	for iLoop1 = 1, g_iPlayerCount do
	
		-- Increase current player index
		g_iPlayer = g_iPlayer + 1
		if (g_iPlayer > g_iPlayerCount) then
			g_iPlayer = 1
		end
		
		-- Check if player is alive
		local ePlayerID = World_GetPlayerAt(g_iPlayer - 1)
		if (Player_IsAlive(ePlayerID)) then
		
			-- Check player race
			local sPlayerRace = Player_GetRaceName(ePlayerID)
			if (UnitTypes[sPlayerRace] ~= nil) then
				g_eCurrentPlayerID = ePlayerID
				g_sCurrentPlayerRace = sPlayerRace
				break
			end
		end
	end
	if (g_eCurrentPlayerID == nil) then
		return
	end
	
	-- Check last player update time
	local iTimeDelta = iCurrentTime - g_aLastUpdateTime[g_iPlayer]
	if (iTimeDelta < 1) then
		return
	end
	g_aLastUpdateTime[g_iPlayer] = iCurrentTime
	
	-- Get player and enemy squads
	local oPlayerSquads = Player_GetSquads(g_eCurrentPlayerID)
	local oPlayerBuildings = Player_GetEntities(g_eCurrentPlayerID)
	local aEnemySquads = {}
	for iLoop1 = 1, g_iPlayerCount do
	
		-- Check if player is alive
		local ePlayerID = World_GetPlayerAt(iLoop1 - 1)
		if (Player_IsAlive(ePlayerID) and Player_GetRelationship(ePlayerID, g_eCurrentPlayerID) == R_ENEMY) then
			table.insert(aEnemySquads, Player_GetSquads(ePlayerID))
		end
	end
	
	-- Check for a general with a command bonus
	local iCommandLevel = 1
	for iLoop1 in CommandLevel[g_sCurrentPlayerRace] do
		
		-- Check if the commander level is high enough for a command level increase
		if (g_aGenerals[g_iPlayer] >= CommandLevel[g_sCurrentPlayerRace][iLoop1]) then
			iCommandLevel = iCommandLevel + 1
		end
	end
	g_aGenerals[g_iPlayer] = 1
	
	-- Increase AI command level after 30 minutes
	--[[if (iCurrentTime > 6 * 30 * 60) then
		AIUnitStartingRank.Harder = math.max(7, AIUnitStartingRank.Harder)
		AIUnitStartingRank.Insane = math.max(7, AIUnitStartingRank.Insane)
	elseif (iCurrentTime > 5 * 30 * 60) then
		AIUnitStartingRank.Harder = math.max(6, AIUnitStartingRank.Harder)
		AIUnitStartingRank.Insane = math.max(6, AIUnitStartingRank.Insane)
	elseif (iCurrentTime > 4 * 30 * 60) then
		AIUnitStartingRank.Harder = math.max(5, AIUnitStartingRank.Harder)
		AIUnitStartingRank.Insane = math.max(5, AIUnitStartingRank.Insane)
	elseif (iCurrentTime > 3 * 30 * 60) then
		AIUnitStartingRank.Harder = math.max(4, AIUnitStartingRank.Harder)
		AIUnitStartingRank.Insane = math.max(4, AIUnitStartingRank.Insane)
	elseif (iCurrentTime > 2 * 30 * 60) then
		AIUnitStartingRank.Harder = math.max(3, AIUnitStartingRank.Harder)
		AIUnitStartingRank.Insane = math.max(3, AIUnitStartingRank.Insane)
	elseif (iCurrentTime > 30 * 60) then
		AIUnitStartingRank.Harder = math.max(2, AIUnitStartingRank.Harder)
		AIUnitStartingRank.Insane = math.max(2, AIUnitStartingRank.Insane)
	end]]
	
	-- Check AI unit starting rank
	if (Cpu_IsCpuPlayer(g_eCurrentPlayerID)) then
	
		-- Check AI difficulty
		local eAIDifficulty = Cpu_GetDifficulty(g_eCurrentPlayerID)
		local iAIUnitStartingRank = 1
		if (eAIDifficulty == AD_Easy) then
			iCommandLevel = math.max(iCommandLevel, AIUnitStartingRank.Easy)
		elseif (eAIDifficulty == AD_Standard) then
			iCommandLevel = math.max(iCommandLevel, AIUnitStartingRank.Standard)
		elseif (eAIDifficulty == AD_Hard) then
			iCommandLevel = math.max(iCommandLevel, AIUnitStartingRank.Hard)
		elseif (eAIDifficulty == AD_Advanced) then
			iCommandLevel = math.max(iCommandLevel, AIUnitStartingRank.Harder)
		elseif (eAIDifficulty == AD_Insane) then
			iCommandLevel = math.max(iCommandLevel, AIUnitStartingRank.Insane)
		end
	end
	
	-- Init squad check functor
	local Hero_SquadCheck = function(eSquadGroupID, iItemIndex, eSquadID)
	
		-- Get unit info
		local iSquadID = Squad_GetGameID(eSquadID)
		
		-- Search squad in unit list
		local iUnitIndex = 0
		for iLoop1 in g_aUnitList[g_iPlayer] do
			
			-- Check unit ID
			if (g_aUnitList[g_iPlayer][iLoop1].ID == iSquadID) then
				iUnitIndex = iLoop1
				break
			end
		end
		
		-- Check if we have to initialize a new unit info struct
		local sUnitName = Squad_GetBlueprintName(eSquadID)
		if (iUnitIndex <= 0) then
		
			-- Check if unit type is valid
			if (UnitTypes[g_sCurrentPlayerRace][sUnitName] == nil) then
				return
			end
			
			-- Check if unit already exists
			for iLoop1 in g_aUnitList[g_iPlayer] do
			
				-- Check if unit ID exists
				if (sUnitName == g_aUnitList[g_iPlayer][iLoop1].Name and
					not Squad_Exists(g_aUnitList[g_iPlayer][iLoop1].ID) and
					Modifier_Exists(g_aUnitList[g_iPlayer][iLoop1].Modifications["ModHealthMax"][1])) then
				
					-- Check validity modifier
					local oModifier = g_aUnitList[g_iPlayer][iLoop1].Modifications["ModHealthMax"][2]
					local iModifierIndex = ModifierUtil_GetSquadApplierIndex(oModifier, eSquadID)
					if (iModifierIndex == g_aUnitList[g_iPlayer][iLoop1].Modifications["ModHealthMax"][3]) then
						g_aUnitList[g_iPlayer][iLoop1].ID = iSquadID
						iUnitIndex = iLoop1
						break
					end
				end
			end
			
			-- Check if we have to create a new data set
			if (iUnitIndex == 0) then
			
				-- Set starting XP
				local sUnitType = UnitTypes[g_sCurrentPlayerRace][sUnitName].Type
				local iStartingXP = UnitRanks[g_sCurrentPlayerRace][iCommandLevel].XPRequirements[sUnitType]
			
				-- Add unit info struct
				local tUnitInfo =
				{
					Name = sUnitName,
					ID = iSquadID,
					XP = iStartingXP,
					Level = 1,
					TrainingTime = RequiredTrainingTime,
					Modifications =	{},
				}
				table.insert(g_aUnitList[g_iPlayer], tUnitInfo)
				iUnitIndex = table.getn(g_aUnitList[g_iPlayer])
				
				-- Add modifier for validity checks
				UnitStatAddBaseFactor("ModHealthMax", eSquadID, iUnitIndex, 1.0)
			end
			
		elseif (g_aUnitList[g_iPlayer][iUnitIndex].Level > 1) then
			
			-- Add training time and return if squad is in hold
			if (Squad_IsInHold(eSquadID, oPlayerBuildings)) then
				g_aUnitList[g_iPlayer][iUnitIndex].TrainingTime = g_aUnitList[g_iPlayer][iUnitIndex].TrainingTime + iTimeDelta
				return
			end
			
			-- Check if all unit modifiers are still valid
			for iLoop1 in g_aUnitList[g_iPlayer][iUnitIndex].Modifications do
				
				-- Check if modifier is still active
				if (not Modifier_Exists(g_aUnitList[g_iPlayer][iUnitIndex].Modifications[iLoop1][1])) then
					
					-- Reapply modifier
					local oModifier = g_aUnitList[g_iPlayer][iUnitIndex].Modifications[iLoop1][2]
					local iNewModifierID = Modifier_ApplyToSquad(oModifier, eSquadID)
					
					-- Store new modifier ID
					g_aUnitList[g_iPlayer][iUnitIndex].Modifications[iLoop1][1] = iNewModifierID
				end
			end
		end
		
		-- Check if unit is a general
		if (UnitTypes[g_sCurrentPlayerRace][sUnitName].General ~= nil) then
		
			-- Update level of the general
			g_aGenerals[g_iPlayer] = math.max(g_aGenerals[g_iPlayer], g_aUnitList[g_iPlayer][iUnitIndex].Level)
		end
		
		-- Check if unit is in combat
		if (Squad_IsUnderAttack(eSquadID)) then
		
			-- Add under attack XP and reset training time
			g_aUnitList[g_iPlayer][iUnitIndex].XP = g_aUnitList[g_iPlayer][iUnitIndex].XP + iTimeDelta * XPPerSecondUnderAttack
			g_aUnitList[g_iPlayer][iUnitIndex].TrainingTime = 0
		else
		
			-- Clear current squad group and add current unit
			SGroup_Clear(g_eCurrentSquadGroupID)
			SGroup_Add(g_eCurrentSquadGroupID, eSquadID)
		
			-- Check if unit is constructing a building
			if (Cmd_IsConstructingBuilding("CurrentSquadGroup", false)) then
			
				-- Add construction XP and reset training time
				g_aUnitList[g_iPlayer][iUnitIndex].XP = g_aUnitList[g_iPlayer][iUnitIndex].XP + iTimeDelta * XPPerSecondConstruction

			else
				
				-- Check if unit is attacking the forces of an enemy player
				local bAttacking = false
				for iLoop1 in aEnemySquads do
				
					-- Check if unit is attacking the enemy forces
					if (SGroup_WasAttacked(aEnemySquads[iLoop1], g_eCurrentSquadGroupID)) then
						bAttacking = true
						break
					end
				end
				
				-- Check if unit is attacking
				if (bAttacking) then
				
					-- Add attacking XP and reset training time
					g_aUnitList[g_iPlayer][iUnitIndex].XP = g_aUnitList[g_iPlayer][iUnitIndex].XP + iTimeDelta * XPPerSecondAttacking
					g_aUnitList[g_iPlayer][iUnitIndex].TrainingTime = 0			
				else
				
					-- Add idle XP and training time
					g_aUnitList[g_iPlayer][iUnitIndex].XP = g_aUnitList[g_iPlayer][iUnitIndex].XP + iTimeDelta * XPPerSecondIdle
					g_aUnitList[g_iPlayer][iUnitIndex].TrainingTime = g_aUnitList[g_iPlayer][iUnitIndex].TrainingTime + iTimeDelta
				end
			end
		end
		
		-- Check level according to the current XP of the unit
		local iLevelMax = table.getn(UnitRanks[g_sCurrentPlayerRace])
		local iLevel = 1
		for iLoop1 = iLevelMax, 1, -1 do
		
			-- Check XP requirements
			local sUnitType = UnitTypes[g_sCurrentPlayerRace][sUnitName].Type
			local iXPRequirement = UnitRanks[g_sCurrentPlayerRace][iLoop1].XPRequirements[sUnitType]
			if (iXPRequirement >= 0 and g_aUnitList[g_iPlayer][iUnitIndex].XP >= iXPRequirement) then
				iLevel = iLoop1
				break
			end
		end	
		
		-- Check if the unit has reached a higher level and enough training time to upgrade
		if (iLevel > g_aUnitList[g_iPlayer][iUnitIndex].Level and
			g_aUnitList[g_iPlayer][iUnitIndex].TrainingTime >= RequiredTrainingTime) then
			
			-- Show upgrade FX
			ShowUpgradeFX(eSquadID, iLevel, sUnitName, iUnitIndex)
		
			-- Upgrade unit to the new level and reset training time
			for iLoop1 = g_aUnitList[g_iPlayer][iUnitIndex].Level + 1, iLevel do
				UnitTypes[g_sCurrentPlayerRace][sUnitName].UpgradeFunction(eSquadID, iLoop1, iUnitIndex)
			end
			g_aUnitList[g_iPlayer][iUnitIndex].Level = iLevel
			g_aUnitList[g_iPlayer][iUnitIndex].TrainingTime = 0.0
		end
	end
	
	-- Compute squad check functor for all player squads
	SGroup_ForEachEx(oPlayerSquads, Hero_SquadCheck, true, true)
	
	-- Remove invalid player units
	local iUnitCount = table.getn(g_aUnitList[g_iPlayer])
	for iLoop1 = iUnitCount, 1, -1 do
	
		-- Check if unit is valid
		if (not Squad_Exists(g_aUnitList[g_iPlayer][iLoop1].ID)) then
		
			-- Check if modifier exists
			if (g_aUnitList[g_iPlayer][iLoop1].Modifications["ModHealthMax"] == nil or
			 	not Modifier_Exists(g_aUnitList[g_iPlayer][iLoop1].Modifications["ModHealthMax"][1])) then
			
				-- Remove unit from unit list
				table.remove(g_aUnitList[g_iPlayer], iLoop1)
			end
		end
	end
	
	-- Show unit rank of currently selected unit
	ShowCurrentUnitInfo()
	
	-- Update FX only every 2 seconds
	if (iCurrentTime < g_iNextFXUpdate) then
		return
	end
	g_iNextFXUpdate = iCurrentTime + 2
	
	-- Update unit aura FX of all players
	for iLoop1 in g_aUnitList do
	
		-- Check if player is alive
		local ePlayerID = World_GetPlayerAt(iLoop1 - 1)
		if (Player_IsAlive(ePlayerID)) then
			
			-- Get player race
			local sPlayerRace = Player_GetRaceName(ePlayerID)

			-- Compute all player units
			for iLoop2 in g_aUnitList[iLoop1] do
			
				-- Check if squad exists
				if (Squad_Exists(g_aUnitList[iLoop1][iLoop2].ID)) then
			
					-- Show permanent level aura if available
					local eSquadID = Squad_GetSquadFromGameID(g_aUnitList[iLoop1][iLoop2].ID)
					local sUnitName = Squad_GetBlueprintName(eSquadID)
					local sFXType = UnitTypes[sPlayerRace][sUnitName].FXType
					local iLevel = g_aUnitList[iLoop1][iLoop2].Level
					if (UnitRanks[sPlayerRace][iLevel].AuraFX[sFXType] ~= nil) then
					
						-- Clear current squad group and add unit
						SGroup_Clear(g_eCurrentSquadGroupID)
						SGroup_Add(g_eCurrentSquadGroupID, eSquadID)
					
						-- Show aura FX
						for iLoop3 in UnitRanks[sPlayerRace][iLevel].AuraFX[sFXType] do
							World_FXEventSquad(UnitRanks[sPlayerRace][iLevel].AuraFX[sFXType][iLoop3], g_eCurrentSquadGroupID)
						end
					end
				end
			end
		end
	end
end

-- Arkhan 01.2007: Show unit rank
function ShowCurrentUnitInfo()

	-- Get local player
	local iLocalPlayer = Tut_GetLocalPlayerIndex() + 1
	local eLocalPlayer = World_GetPlayerAt(iLocalPlayer - 1)
	if (Player_IsAlive(eLocalPlayer)) then
	
		-- Get selected units
		Misc_GetSelectedSquads(g_eSelectionSquadGroupID)
		if (SGroup_Count(g_eSelectionSquadGroupID) == 1) then
			
			-- Create squad checker
			local Hero_SelectionCheck = function(eSquadGroupID, iItemIndex, eSquadID)
	
				-- Get unit info
				local iSquadID = Squad_GetGameID(eSquadID)
				
				-- Search squad in unit list
				local iUnitIndex = 0
				for iLoop1 in g_aUnitList[iLocalPlayer] do
					
					-- Check unit ID
					if (g_aUnitList[iLocalPlayer][iLoop1].ID == iSquadID) then
						iUnitIndex = iLoop1
						break
					end
				end
				
				-- Check if we found the unit
				if (iUnitIndex > 0) then
				
					-- Show unit rank
					local iLevel = g_aUnitList[iLocalPlayer][iUnitIndex].Level
					if (g_iCurrentUnitLevel ~= iLevel) then
						UI_ShowCount("UnitRank", eLocalPlayer, 5800000 + iLevel, 0)
						g_iCurrentUnitLevel = iLevel
					end
				
				elseif (g_iCurrentUnitLevel > 0) then
				
					-- Hide unit rank
					UI_HideCount("UnitRank")
					g_iCurrentUnitLevel = 0
				end
			end
			
			-- Compute selection check functor
			SGroup_ForEach(g_eSelectionSquadGroupID, Hero_SelectionCheck)
			
		elseif (g_iCurrentUnitLevel > 0) then

			-- Hide unit rank
			UI_HideCount("UnitRank")
			g_iCurrentUnitLevel = 0
		end
	end
end

-- Arkhan 01.2007: Show upgrade FX and message
function ShowUpgradeFX(eSquadID, iLevel, sUnitName, iUnitIndex)

	-- Check for upgrade FX
	local sFXType = UnitTypes[g_sCurrentPlayerRace][sUnitName].FXType
	if (UnitRanks[g_sCurrentPlayerRace][iLevel].UpgradeFX[sFXType] ~= nil) then

		-- Show upgrade FX
		SGroup_Clear(g_eUpgradeSquadGroupID)
		SGroup_Add(g_eUpgradeSquadGroupID, eSquadID)
		for iLoop1 in UnitRanks[g_sCurrentPlayerRace][iLevel].UpgradeFX[sFXType] do
			World_FXEventSquad(UnitRanks[g_sCurrentPlayerRace][iLevel].UpgradeFX[sFXType][iLoop1], g_eUpgradeSquadGroupID)
		end
	end
	
	-- Check for local player
	if (Tut_GetLocalPlayerIndex() == g_iPlayer - 1) then
	
		-- Show upgrade message
		local sUnitRank = UnitRanks[g_sCurrentPlayerRace][iLevel].Name
		local sUnitTitle = UnitTypes[g_sCurrentPlayerRace][sUnitName].Title
		local sMessage = sUnitTitle.." achieved "..sUnitRank.." status"
		local sIcon = UnitRanks[g_sCurrentPlayerRace][iLevel].MessageFX.Icon
		local sSound = UnitRanks[g_sCurrentPlayerRace][iLevel].MessageFX.Sound
		if (sIcon ~= nil and sSound ~= nil) then
			EventCue_DoEvent(sIcon, sSound, sMessage, sMessage)
		end
	end
end

-- Arkhan 01.2007: Add a fixed value to a certain unit stat
function UnitStatAddValue(sModifier, eSquadID, iUnitIndex, fValue)
	
	-- Check if modifier exists
	if (g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier] ~= nil) then
	
		-- Remove and release modifier
		if (Modifier_Exists(g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier][1])) then
			pcall(Modifier_Remove, g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier][1])
		end
		Modifier_Destroy(g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier][2])
	end
	
	-- Create modifier
	local sType = UnitModifiers[sModifier][1]
	local sName = UnitModifiers[sModifier][2]
	local oModifier = nil
	if (sType == "MAT_Entity") then
		oModifier = Modifier_Create(MAT_Entity, sName, MUT_Addition, false, fValue, "")
	elseif (sType == "MAT_Squad") then
		oModifier = Modifier_Create(MAT_Squad, sName, MUT_Addition, false, fValue, "")
	end

	-- Apply modifier
	local bStatus, iModifierID = pcall(Modifier_ApplyToSquad, oModifier, eSquadID)
	if (not bStatus) then
		return
	end
	
	-- Get modifier index
	local iModifierIndex = ModifierUtil_GetSquadApplierIndex(oModifier, eSquadID)
		
	-- Store modifier info
	g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier] = { iModifierID, oModifier, iModifierIndex }
end

-- Arkhan 01.2007: Add a percentage factor of the base value to a certain unit stat
function UnitStatAddBaseFactor(sModifier, eSquadID, iUnitIndex, fFactor)

	-- Check if modifier exists
	if (g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier] ~= nil) then
	
		-- Remove and release modifier
		if (Modifier_Exists(g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier][1])) then
			pcall(Modifier_Remove, g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier][1])
		end
		Modifier_Destroy(g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier][2])
	end

	-- Create modifier
	local sType = UnitModifiers[sModifier][1]
	local sName = UnitModifiers[sModifier][2]
	local oModifier = nil
	if (sType == "MAT_Entity") then
		oModifier = Modifier_Create(MAT_Entity, sName, MUT_Multiplication, false, fFactor, "")
	elseif (sType == "MAT_Squad") then
		oModifier = Modifier_Create(MAT_Squad, sName, MUT_Multiplication, false, fFactor, "")
	end

	-- Apply modifier
	local bStatus, iModifierID = pcall(Modifier_ApplyToSquad, oModifier, eSquadID)
	if (not bStatus) then
		return
	end
		
	-- Get modifier index
	local iModifierIndex = ModifierUtil_GetSquadApplierIndex(oModifier, eSquadID)
		
	-- Store modifier info
	g_aUnitList[g_iPlayer][iUnitIndex].Modifications[sModifier] = { iModifierID, oModifier, iModifierIndex }
end